!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/",n(n.s=14)}([function(e,t,n){e.exports=n(25)()},function(e,t,n){"use strict";e.exports=n(16)},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";n.r(t),n.d(t,"createStore",(function(){return l})),n.d(t,"combineReducers",(function(){return s})),n.d(t,"bindActionCreators",(function(){return d})),n.d(t,"applyMiddleware",(function(){return h})),n.d(t,"compose",(function(){return p})),n.d(t,"__DO_NOT_USE__ActionTypes",(function(){return o}));var r=n(5),o={INIT:"@@redux/INIT"+Math.random().toString(36).substring(7).split("").join("."),REPLACE:"@@redux/REPLACE"+Math.random().toString(36).substring(7).split("").join(".")},i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function u(e){if("object"!==(void 0===e?"undefined":i(e))||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function l(e,t,n){var a;if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(l)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var c=e,s=t,f=[],d=f,p=!1;function h(){d===f&&(d=f.slice())}function m(){if(p)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return s}function v(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(p)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");var t=!0;return h(),d.push(e),function(){if(t){if(p)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");t=!1,h();var n=d.indexOf(e);d.splice(n,1)}}}function y(e){if(!u(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(p)throw new Error("Reducers may not dispatch actions.");try{p=!0,s=c(s,e)}finally{p=!1}for(var t=f=d,n=0;n<t.length;n++){(0,t[n])()}return e}return y({type:o.INIT}),(a={dispatch:y,subscribe:v,getState:m,replaceReducer:function(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");c=e,y({type:o.REPLACE})}})[r.a]=function(){var e,t=v;return(e={subscribe:function(e){if("object"!==(void 0===e?"undefined":i(e))||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(m())}return n(),{unsubscribe:t(n)}}})[r.a]=function(){return this},e},a}function c(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function s(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var i=t[r];0,"function"==typeof e[i]&&(n[i]=e[i])}var a=Object.keys(n);var u=void 0;try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:o.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:"@@redux/PROBE_UNKNOWN_ACTION_"+Math.random().toString(36).substring(7).split("").join(".")}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+o.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')}))}(n)}catch(e){u=e}return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments[1];if(u)throw u;for(var r=!1,o={},i=0;i<a.length;i++){var l=a[i],s=n[l],f=e[l],d=s(f,t);if(void 0===d){var p=c(l,t);throw new Error(p)}o[l]=d,r=r||d!==f}return r?o:e}}function f(e,t){return function(){return t(e.apply(this,arguments))}}function d(e,t){if("function"==typeof e)return f(e,t);if("object"!==(void 0===e?"undefined":i(e))||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":void 0===e?"undefined":i(e))+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');for(var n=Object.keys(e),r={},o=0;o<n.length;o++){var a=n[o],u=e[a];"function"==typeof u&&(r[a]=f(u,t))}return r}function p(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function h(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var i=e.apply(void 0,r),u=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},l={getState:i.getState,dispatch:function(){return u.apply(void 0,arguments)}},c=t.map((function(e){return e(l)}));return u=p.apply(void 0,c)(i.dispatch),a({},i,{dispatch:u})}}}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o,i,a,u){if(!e){var l;if(void 0===t)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,r,o,i,a,u],s=0;(l=new Error(t.replace(/%s/g,(function(){return c[s++]})))).name="Invariant Violation"}throw l.framesToPop=1,l}}},function(e,t,n){"use strict";(function(e,r){var o,i=n(13);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var a=Object(i.a)(o);t.a=a}).call(this,n(2),n(29)(e))},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;function a(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,u,l=a(e),c=1;c<arguments.length;c++){for(var s in n=Object(arguments[c]))o.call(n,s)&&(l[s]=n[s]);if(r){u=r(n);for(var f=0;f<u.length;f++)i.call(n,u[f])&&(l[u[f]]=n[u[f]])}}return l}},function(e,t,n){"use strict";var r,o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},i=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),a=[];function u(e){for(var t=-1,n=0;n<a.length;n++)if(a[n].identifier===e){t=n;break}return t}function l(e,t){for(var n={},r=[],o=0;o<e.length;o++){var i=e[o],l=t.base?i[0]+t.base:i[0],c=n[l]||0,s="".concat(l," ").concat(c);n[l]=c+1;var f=u(s),d={css:i[1],media:i[2],sourceMap:i[3]};-1!==f?(a[f].references++,a[f].updater(d)):a.push({identifier:s,updater:v(d,t),references:1}),r.push(s)}return r}function c(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var o=n.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var a=i(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var s,f=(s=[],function(e,t){return s[e]=t,s.filter(Boolean).join("\n")});function d(e,t,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=f(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}function p(e,t,n){var r=n.css,o=n.media,i=n.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),i&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var h=null,m=0;function v(e,t){var n,r,o;if(t.singleton){var i=m++;n=h||(h=c(t)),r=d.bind(null,n,i,!1),o=d.bind(null,n,i,!0)}else n=c(t),r=p.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=o());var n=l(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var o=u(n[r]);a[o].references--}for(var i=l(e,t),c=0;c<n.length;c++){var s=u(n[c]);0===a[s].references&&(a[s].updater(),a.splice(s,1))}n=i}}}},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(a=r,u=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(u),"/*# ".concat(l," */")),i=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([o]).join("\n")}var a,u,l;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var u=0;u<e.length;u++){var l=[].concat(e[u]);r&&o[l[0]]||(n&&(l[2]?l[2]="".concat(n," and ").concat(l[2]):l[2]=n),t.push(l))}},t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=t.ADD_TODO="ADD_TODO",o=t.EDIT_ITEM="EDIT_ITEM",i=t.DELETE_ITEM="DELETE_ITEM",a=t.SET_EDIT="SET_EDIT";t.addTodo=function(e){return{type:r,text:e}},t.editItem=function(e){return{type:o,updatedItem:e}},t.deleteItem=function(e){return{type:i,deleteKey:e}},t.setEdit=function(e){return{type:a,editKey:e}}},function(e,t,n){"use strict";n.r(t),n.d(t,"Provider",(function(){return d})),n.d(t,"createProvider",(function(){return f})),n.d(t,"connectAdvanced",(function(){return P})),n.d(t,"connect",(function(){return re}));var r=n(1),o=n(0),i=n.n(o),a=i.a.shape({trySubscribe:i.a.func.isRequired,tryUnsubscribe:i.a.func.isRequired,notifyNestedSubs:i.a.func.isRequired,isSubscribed:i.a.func.isRequired}),u=i.a.shape({subscribe:i.a.func.isRequired,dispatch:i.a.func.isRequired,getState:i.a.func.isRequired});function l(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function f(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"store",n=arguments[1],o=n||t+"Subscription",f=function(e){function n(r,o){l(this,n);var i=c(this,e.call(this,r,o));return i[t]=r.store,i}return s(n,e),n.prototype.getChildContext=function(){var e;return(e={})[t]=this[t],e[o]=null,e},n.prototype.render=function(){return r.Children.only(this.props.children)},n}(r.Component);return f.propTypes={store:u.isRequired,children:i.a.element.isRequired},f.childContextTypes=((e={})[t]=u.isRequired,e[o]=a,e),f}var d=f(),p=n(11),h=n.n(p),m=n(4),v=n.n(m);var y={notify:function(){}};var g=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.store=t,this.parentSub=n,this.onStateChange=r,this.unsubscribe=null,this.listeners=y}return e.prototype.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},e.prototype.notifyNestedSubs=function(){this.listeners.notify()},e.prototype.isSubscribed=function(){return Boolean(this.unsubscribe)},e.prototype.trySubscribe=function(){var e,t;this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.onStateChange):this.store.subscribe(this.onStateChange),this.listeners=(e=[],t=[],{clear:function(){t=null,e=null},notify:function(){for(var n=e=t,r=0;r<n.length;r++)n[r]()},get:function(){return t},subscribe:function(n){var r=!0;return t===e&&(t=e.slice()),t.push(n),function(){r&&null!==e&&(r=!1,t===e&&(t=e.slice()),t.splice(t.indexOf(n),1))}}}))},e.prototype.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=y)},e}(),b=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function w(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function x(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function k(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function T(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}var S=0,E={};function _(){}function C(e,t){var n={run:function(r){try{var o=e(t.getState(),r);(o!==n.props||n.error)&&(n.shouldComponentUpdate=!0,n.props=o,n.error=null)}catch(e){n.shouldComponentUpdate=!0,n.error=e}}};return n}function P(e){var t,n,o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=o.getDisplayName,l=void 0===i?function(e){return"ConnectAdvanced("+e+")"}:i,c=o.methodName,s=void 0===c?"connectAdvanced":c,f=o.renderCountProp,d=void 0===f?void 0:f,p=o.shouldHandleStateChanges,m=void 0===p||p,y=o.storeKey,P=void 0===y?"store":y,O=o.withRef,N=void 0!==O&&O,j=T(o,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef"]),I=P+"Subscription",M=S++,R=((t={})[P]=u,t[I]=a,t),D=((n={})[I]=a,n);return function(t){v()("function"==typeof t,"You must pass a component to the function returned by "+s+". Instead received "+JSON.stringify(t));var n=t.displayName||t.name||"Component",o=l(n),i=b({},j,{getDisplayName:l,methodName:s,renderCountProp:d,shouldHandleStateChanges:m,storeKey:P,withRef:N,displayName:o,wrappedComponentName:n,WrappedComponent:t}),a=function(n){function a(e,t){w(this,a);var r=x(this,n.call(this,e,t));return r.version=M,r.state={},r.renderCount=0,r.store=e[P]||t[P],r.propsMode=Boolean(e[P]),r.setWrappedInstance=r.setWrappedInstance.bind(r),v()(r.store,'Could not find "'+P+'" in either the context or props of "'+o+'". Either wrap the root component in a <Provider>, or explicitly pass "'+P+'" as a prop to "'+o+'".'),r.initSelector(),r.initSubscription(),r}return k(a,n),a.prototype.getChildContext=function(){var e,t=this.propsMode?null:this.subscription;return(e={})[I]=t||this.context[I],e},a.prototype.componentDidMount=function(){m&&(this.subscription.trySubscribe(),this.selector.run(this.props),this.selector.shouldComponentUpdate&&this.forceUpdate())},a.prototype.componentWillReceiveProps=function(e){this.selector.run(e)},a.prototype.shouldComponentUpdate=function(){return this.selector.shouldComponentUpdate},a.prototype.componentWillUnmount=function(){this.subscription&&this.subscription.tryUnsubscribe(),this.subscription=null,this.notifyNestedSubs=_,this.store=null,this.selector.run=_,this.selector.shouldComponentUpdate=!1},a.prototype.getWrappedInstance=function(){return v()(N,"To access the wrapped instance, you need to specify { withRef: true } in the options argument of the "+s+"() call."),this.wrappedInstance},a.prototype.setWrappedInstance=function(e){this.wrappedInstance=e},a.prototype.initSelector=function(){var t=e(this.store.dispatch,i);this.selector=C(t,this.store),this.selector.run(this.props)},a.prototype.initSubscription=function(){if(m){var e=(this.propsMode?this.props:this.context)[I];this.subscription=new g(this.store,e,this.onStateChange.bind(this)),this.notifyNestedSubs=this.subscription.notifyNestedSubs.bind(this.subscription)}},a.prototype.onStateChange=function(){this.selector.run(this.props),this.selector.shouldComponentUpdate?(this.componentDidUpdate=this.notifyNestedSubsOnComponentDidUpdate,this.setState(E)):this.notifyNestedSubs()},a.prototype.notifyNestedSubsOnComponentDidUpdate=function(){this.componentDidUpdate=void 0,this.notifyNestedSubs()},a.prototype.isSubscribed=function(){return Boolean(this.subscription)&&this.subscription.isSubscribed()},a.prototype.addExtraProps=function(e){if(!(N||d||this.propsMode&&this.subscription))return e;var t=b({},e);return N&&(t.ref=this.setWrappedInstance),d&&(t[d]=this.renderCount++),this.propsMode&&this.subscription&&(t[I]=this.subscription),t},a.prototype.render=function(){var e=this.selector;if(e.shouldComponentUpdate=!1,e.error)throw e.error;return Object(r.createElement)(t,this.addExtraProps(e.props))},a}(r.Component);return a.WrappedComponent=t,a.displayName=o,a.childContextTypes=D,a.contextTypes=R,a.propTypes=R,h()(a,t)}}var O=Object.prototype.hasOwnProperty;function N(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function j(e,t){if(N(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!O.call(t,n[o])||!N(e[n[o]],t[n[o]]))return!1;return!0}var I=n(3),M=n(12),R="object"==typeof self&&self&&self.Object===Object&&self,D=(M.a||R||Function("return this")()).Symbol,A=Object.prototype;A.hasOwnProperty,A.toString,D&&D.toStringTag;Object.prototype.toString;D&&D.toStringTag;U=Object.getPrototypeOf,F=Object;var U,F;var z=Function.prototype,L=Object.prototype,W=z.toString;L.hasOwnProperty,W.call(Object);function B(e){return function(t,n){var r=e(t,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function q(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function V(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=q(e);var o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=q(o),o=r(t,n)),o},r}}var H=[function(e){return"function"==typeof e?V(e):void 0},function(e){return e?void 0:B((function(e){return{dispatch:e}}))},function(e){return e&&"object"==typeof e?B((function(t){return Object(I.bindActionCreators)(e,t)})):void 0}];var $=[function(e){return"function"==typeof e?V(e):void 0},function(e){return e?void 0:B((function(){return{}}))}],K=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function Q(e,t,n){return K({},n,e,t)}var Y=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r=n.pure,o=n.areMergedPropsEqual,i=!1,a=void 0;return function(t,n,u){var l=e(t,n,u);return i?r&&o(l,a)||(a=l):(i=!0,a=l),a}}}(e):void 0},function(e){return e?void 0:function(){return Q}}];function X(e,t,n,r){return function(o,i){return n(e(o,i),t(r,i),i)}}function G(e,t,n,r,o){var i=o.areStatesEqual,a=o.areOwnPropsEqual,u=o.areStatePropsEqual,l=!1,c=void 0,s=void 0,f=void 0,d=void 0,p=void 0;function h(o,l){var h,m,v=!a(l,s),y=!i(o,c);return c=o,s=l,v&&y?(f=e(c,s),t.dependsOnOwnProps&&(d=t(r,s)),p=n(f,d,s)):v?(e.dependsOnOwnProps&&(f=e(c,s)),t.dependsOnOwnProps&&(d=t(r,s)),p=n(f,d,s)):y?(h=e(c,s),m=!u(h,f),f=h,m&&(p=n(f,d,s)),p):p}return function(o,i){return l?h(o,i):(f=e(c=o,s=i),d=t(r,s),p=n(f,d,s),l=!0,p)}}function J(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,o=t.initMergeProps,i=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),a=n(e,i),u=r(e,i),l=o(e,i);return(i.pure?G:X)(a,u,l,e,i)}var Z=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function ee(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}function te(e,t,n){for(var r=t.length-1;r>=0;r--){var o=t[r](e);if(o)return o}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function ne(e,t){return e===t}var re=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.connectHOC,n=void 0===t?P:t,r=e.mapStateToPropsFactories,o=void 0===r?$:r,i=e.mapDispatchToPropsFactories,a=void 0===i?H:i,u=e.mergePropsFactories,l=void 0===u?Y:u,c=e.selectorFactory,s=void 0===c?J:c;return function(e,t,r){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},u=i.pure,c=void 0===u||u,f=i.areStatesEqual,d=void 0===f?ne:f,p=i.areOwnPropsEqual,h=void 0===p?j:p,m=i.areStatePropsEqual,v=void 0===m?j:m,y=i.areMergedPropsEqual,g=void 0===y?j:y,b=ee(i,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),w=te(e,o,"mapStateToProps"),x=te(t,a,"mapDispatchToProps"),k=te(r,l,"mergeProps");return n(s,Z({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:w,initMapDispatchToProps:x,initMergeProps:k,pure:c,areStatesEqual:d,areOwnPropsEqual:h,areStatePropsEqual:v,areMergedPropsEqual:g},b))}}()},function(e,t,n){e.exports=function(){"use strict";var e={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},t={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},n=Object.defineProperty,r=Object.getOwnPropertyNames,o=Object.getOwnPropertySymbols,i=Object.getOwnPropertyDescriptor,a=Object.getPrototypeOf,u=a&&a(Object);return function l(c,s,f){if("string"!=typeof s){if(u){var d=a(s);d&&d!==u&&l(c,d,f)}var p=r(s);o&&(p=p.concat(o(s)));for(var h=0;h<p.length;++h){var m=p[h];if(!(e[m]||t[m]||f&&f[m])){var v=i(s,m);try{n(c,m,v)}catch(e){}}}return c}return c}}()},function(e,t,n){"use strict";(function(e){var n="object"==typeof e&&e&&e.Object===Object&&e;t.a=n}).call(this,n(2))},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",(function(){return r}))},function(e,t,n){e.exports=n(15)},function(e,t,n){"use strict";var r=c(n(1)),o=c(n(17));n(21),n(23);var i=n(10),a=n(3),u=c(n(30)),l=c(n(35));function c(e){return e&&e.__esModule?e:{default:e}}var s=(0,a.applyMiddleware)()(a.createStore);o.default.render(r.default.createElement(i.Provider,{store:s(l.default)},r.default.createElement(u.default,null)),document.querySelector(".container"))},function(e,t,n){"use strict";
/** @license React v16.8.0
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(6),o="function"==typeof Symbol&&Symbol.for,i=o?Symbol.for("react.element"):60103,a=o?Symbol.for("react.portal"):60106,u=o?Symbol.for("react.fragment"):60107,l=o?Symbol.for("react.strict_mode"):60108,c=o?Symbol.for("react.profiler"):60114,s=o?Symbol.for("react.provider"):60109,f=o?Symbol.for("react.context"):60110,d=o?Symbol.for("react.concurrent_mode"):60111,p=o?Symbol.for("react.forward_ref"):60112,h=o?Symbol.for("react.suspense"):60113,m=o?Symbol.for("react.memo"):60115,v=o?Symbol.for("react.lazy"):60116,y="function"==typeof Symbol&&Symbol.iterator;function g(e,t,n,r,o,i,a,u){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,r,o,i,a,u],c=0;(e=Error(t.replace(/%s/g,(function(){return l[c++]})))).name="Invariant Violation"}throw e.framesToPop=1,e}}function b(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);g(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var w={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},x={};function k(e,t,n){this.props=e,this.context=t,this.refs=x,this.updater=n||w}function T(){}function S(e,t,n){this.props=e,this.context=t,this.refs=x,this.updater=n||w}k.prototype.isReactComponent={},k.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&b("85"),this.updater.enqueueSetState(this,e,t,"setState")},k.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},T.prototype=k.prototype;var E=S.prototype=new T;E.constructor=S,r(E,k.prototype),E.isPureReactComponent=!0;var _={current:null},C={current:null},P=Object.prototype.hasOwnProperty,O={key:!0,ref:!0,__self:!0,__source:!0};function N(e,t,n){var r=void 0,o={},a=null,u=null;if(null!=t)for(r in void 0!==t.ref&&(u=t.ref),void 0!==t.key&&(a=""+t.key),t)P.call(t,r)&&!O.hasOwnProperty(r)&&(o[r]=t[r]);var l=arguments.length-2;if(1===l)o.children=n;else if(1<l){for(var c=Array(l),s=0;s<l;s++)c[s]=arguments[s+2];o.children=c}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===o[r]&&(o[r]=l[r]);return{$$typeof:i,type:e,key:a,ref:u,props:o,_owner:C.current}}function j(e){return"object"==typeof e&&null!==e&&e.$$typeof===i}var I=/\/+/g,M=[];function R(e,t,n,r){if(M.length){var o=M.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function D(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>M.length&&M.push(e)}function A(e,t,n){return null==e?0:function e(t,n,r,o){var u=typeof t;"undefined"!==u&&"boolean"!==u||(t=null);var l=!1;if(null===t)l=!0;else switch(u){case"string":case"number":l=!0;break;case"object":switch(t.$$typeof){case i:case a:l=!0}}if(l)return r(o,t,""===n?"."+U(t,0):n),1;if(l=0,n=""===n?".":n+":",Array.isArray(t))for(var c=0;c<t.length;c++){var s=n+U(u=t[c],c);l+=e(u,s,r,o)}else if(null===t||"object"!=typeof t?s=null:s="function"==typeof(s=y&&t[y]||t["@@iterator"])?s:null,"function"==typeof s)for(t=s.call(t),c=0;!(u=t.next()).done;)l+=e(u=u.value,s=n+U(u,c++),r,o);else"object"===u&&b("31","[object Object]"===(r=""+t)?"object with keys {"+Object.keys(t).join(", ")+"}":r,"");return l}(e,"",t,n)}function U(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function F(e,t){e.func.call(e.context,t,e.count++)}function z(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?L(e,r,n,(function(e){return e})):null!=e&&(j(e)&&(e=function(e,t){return{$$typeof:i,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(I,"$&/")+"/")+n)),r.push(e))}function L(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(I,"$&/")+"/"),A(e,z,t=R(t,i,r,o)),D(t)}function W(){var e=_.current;return null===e&&b("307"),e}var B={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return L(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;A(e,F,t=R(null,null,t,n)),D(t)},count:function(e){return A(e,(function(){return null}),null)},toArray:function(e){var t=[];return L(e,t,null,(function(e){return e})),t},only:function(e){return j(e)||b("143"),e}},createRef:function(){return{current:null}},Component:k,PureComponent:S,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:p,render:e}},lazy:function(e){return{$$typeof:v,_ctor:e,_status:-1,_result:null}},memo:function(e,t){return{$$typeof:m,type:e,compare:void 0===t?null:t}},useCallback:function(e,t){return W().useCallback(e,t)},useContext:function(e,t){return W().useContext(e,t)},useEffect:function(e,t){return W().useEffect(e,t)},useImperativeHandle:function(e,t,n){return W().useImperativeHandle(e,t,n)},useDebugValue:function(){},useLayoutEffect:function(e,t){return W().useLayoutEffect(e,t)},useMemo:function(e,t){return W().useMemo(e,t)},useReducer:function(e,t,n){return W().useReducer(e,t,n)},useRef:function(e){return W().useRef(e)},useState:function(e){return W().useState(e)},Fragment:u,StrictMode:l,Suspense:h,createElement:N,cloneElement:function(e,t,n){null==e&&b("267",e);var o=void 0,a=r({},e.props),u=e.key,l=e.ref,c=e._owner;if(null!=t){void 0!==t.ref&&(l=t.ref,c=C.current),void 0!==t.key&&(u=""+t.key);var s=void 0;for(o in e.type&&e.type.defaultProps&&(s=e.type.defaultProps),t)P.call(t,o)&&!O.hasOwnProperty(o)&&(a[o]=void 0===t[o]&&void 0!==s?s[o]:t[o])}if(1===(o=arguments.length-2))a.children=n;else if(1<o){s=Array(o);for(var f=0;f<o;f++)s[f]=arguments[f+2];a.children=s}return{$$typeof:i,type:e.type,key:u,ref:l,props:a,_owner:c}},createFactory:function(e){var t=N.bind(null,e);return t.type=e,t},isValidElement:j,version:"16.8.0",unstable_ConcurrentMode:d,unstable_Profiler:c,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentDispatcher:_,ReactCurrentOwner:C,assign:r}},q={default:B},V=q&&B||q;e.exports=V.default||V},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=n(18)},function(e,t,n){"use strict";
/** @license React v16.8.0
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(1),o=n(6),i=n(19);function a(e,t,n,r,o,i,a,u){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,r,o,i,a,u],c=0;(e=Error(t.replace(/%s/g,(function(){return l[c++]})))).name="Invariant Violation"}throw e.framesToPop=1,e}}function u(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);a(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}function l(e,t,n,r,o,i,a,u,l){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}r||u("227");var c=!1,s=null,f=!1,d=null,p={onError:function(e){c=!0,s=e}};function h(e,t,n,r,o,i,a,u,f){c=!1,s=null,l.apply(p,arguments)}var m=null,v={};function y(){if(m)for(var e in v){var t=v[e],n=m.indexOf(e);if(-1<n||u("96",e),!b[n])for(var r in t.extractEvents||u("97",e),b[n]=t,n=t.eventTypes){var o=void 0,i=n[r],a=t,l=r;w.hasOwnProperty(l)&&u("99",l),w[l]=i;var c=i.phasedRegistrationNames;if(c){for(o in c)c.hasOwnProperty(o)&&g(c[o],a,l);o=!0}else i.registrationName?(g(i.registrationName,a,l),o=!0):o=!1;o||u("98",r,e)}}}function g(e,t,n){x[e]&&u("100",e),x[e]=t,k[e]=t.eventTypes[n].dependencies}var b=[],w={},x={},k={},T=null,S=null,E=null;function _(e,t,n){var r=e.type||"unknown-event";e.currentTarget=E(n),function(e,t,n,r,o,i,a,l,p){if(h.apply(this,arguments),c){if(c){var m=s;c=!1,s=null}else u("198"),m=void 0;f||(f=!0,d=m)}}(r,t,void 0,e),e.currentTarget=null}function C(e,t){return null==t&&u("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function P(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var O=null;function N(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)_(e,t[r],n[r]);else t&&_(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}var j={injectEventPluginOrder:function(e){m&&u("101"),m=Array.prototype.slice.call(e),y()},injectEventPluginsByName:function(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];v.hasOwnProperty(t)&&v[t]===r||(v[t]&&u("102",t),v[t]=r,n=!0)}n&&y()}};function I(e,t){var n=e.stateNode;if(!n)return null;var r=T(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}return e?null:(n&&"function"!=typeof n&&u("231",t,typeof n),n)}function M(e){if(null!==e&&(O=C(O,e)),e=O,O=null,e&&(P(e,N),O&&u("95"),f))throw e=d,f=!1,d=null,e}var R=Math.random().toString(36).slice(2),D="__reactInternalInstance$"+R,A="__reactEventHandlers$"+R;function U(e){if(e[D])return e[D];for(;!e[D];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[D]).tag||6===e.tag?e:null}function F(e){return!(e=e[D])||5!==e.tag&&6!==e.tag?null:e}function z(e){if(5===e.tag||6===e.tag)return e.stateNode;u("33")}function L(e){return e[A]||null}function W(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function B(e,t,n){(t=I(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=C(n._dispatchListeners,t),n._dispatchInstances=C(n._dispatchInstances,e))}function q(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=W(t);for(t=n.length;0<t--;)B(n[t],"captured",e);for(t=0;t<n.length;t++)B(n[t],"bubbled",e)}}function V(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=I(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=C(n._dispatchListeners,t),n._dispatchInstances=C(n._dispatchInstances,e))}function H(e){e&&e.dispatchConfig.registrationName&&V(e._targetInst,null,e)}function $(e){P(e,q)}var K=!("undefined"==typeof window||!window.document||!window.document.createElement);function Q(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Y={animationend:Q("Animation","AnimationEnd"),animationiteration:Q("Animation","AnimationIteration"),animationstart:Q("Animation","AnimationStart"),transitionend:Q("Transition","TransitionEnd")},X={},G={};function J(e){if(X[e])return X[e];if(!Y[e])return e;var t,n=Y[e];for(t in n)if(n.hasOwnProperty(t)&&t in G)return X[e]=n[t];return e}K&&(G=document.createElement("div").style,"AnimationEvent"in window||(delete Y.animationend.animation,delete Y.animationiteration.animation,delete Y.animationstart.animation),"TransitionEvent"in window||delete Y.transitionend.transition);var Z=J("animationend"),ee=J("animationiteration"),te=J("animationstart"),ne=J("transitionend"),re="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),oe=null,ie=null,ae=null;function ue(){if(ae)return ae;var e,t,n=ie,r=n.length,o="value"in oe?oe.value:oe.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return ae=o.slice(e,1<t?1-t:void 0)}function le(){return!0}function ce(){return!1}function se(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?le:ce,this.isPropagationStopped=ce,this}function fe(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function de(e){e instanceof this||u("279"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function pe(e){e.eventPool=[],e.getPooled=fe,e.release=de}o(se.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=le)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=le)},persist:function(){this.isPersistent=le},isPersistent:ce,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=ce,this._dispatchInstances=this._dispatchListeners=null}}),se.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},se.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var i=new t;return o(i,n.prototype),n.prototype=i,n.prototype.constructor=n,n.Interface=o({},r.Interface,e),n.extend=r.extend,pe(n),n},pe(se);var he=se.extend({data:null}),me=se.extend({data:null}),ve=[9,13,27,32],ye=K&&"CompositionEvent"in window,ge=null;K&&"documentMode"in document&&(ge=document.documentMode);var be=K&&"TextEvent"in window&&!ge,we=K&&(!ye||ge&&8<ge&&11>=ge),xe=String.fromCharCode(32),ke={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},Te=!1;function Se(e,t){switch(e){case"keyup":return-1!==ve.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function Ee(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var _e=!1;var Ce={eventTypes:ke,extractEvents:function(e,t,n,r){var o=void 0,i=void 0;if(ye)e:{switch(e){case"compositionstart":o=ke.compositionStart;break e;case"compositionend":o=ke.compositionEnd;break e;case"compositionupdate":o=ke.compositionUpdate;break e}o=void 0}else _e?Se(e,n)&&(o=ke.compositionEnd):"keydown"===e&&229===n.keyCode&&(o=ke.compositionStart);return o?(we&&"ko"!==n.locale&&(_e||o!==ke.compositionStart?o===ke.compositionEnd&&_e&&(i=ue()):(ie="value"in(oe=r)?oe.value:oe.textContent,_e=!0)),o=he.getPooled(o,t,n,r),i?o.data=i:null!==(i=Ee(n))&&(o.data=i),$(o),i=o):i=null,(e=be?function(e,t){switch(e){case"compositionend":return Ee(t);case"keypress":return 32!==t.which?null:(Te=!0,xe);case"textInput":return(e=t.data)===xe&&Te?null:e;default:return null}}(e,n):function(e,t){if(_e)return"compositionend"===e||!ye&&Se(e,t)?(e=ue(),ae=ie=oe=null,_e=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return we&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=me.getPooled(ke.beforeInput,t,n,r)).data=e,$(t)):t=null,null===i?t:null===t?i:[i,t]}},Pe=null,Oe=null,Ne=null;function je(e){if(e=S(e)){"function"!=typeof Pe&&u("280");var t=T(e.stateNode);Pe(e.stateNode,e.type,t)}}function Ie(e){Oe?Ne?Ne.push(e):Ne=[e]:Oe=e}function Me(){if(Oe){var e=Oe,t=Ne;if(Ne=Oe=null,je(e),t)for(e=0;e<t.length;e++)je(t[e])}}function Re(e,t){return e(t)}function De(e,t,n){return e(t,n)}function Ae(){}var Ue=!1;function Fe(e,t){if(Ue)return e(t);Ue=!0;try{return Re(e,t)}finally{Ue=!1,(null!==Oe||null!==Ne)&&(Ae(),Me())}}var ze={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Le(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!ze[e.type]:"textarea"===t}function We(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function Be(e){if(!K)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}function qe(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Ve(e){e._valueTracker||(e._valueTracker=function(e){var t=qe(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function He(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=qe(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}var $e=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,Ke=/^(.*)[\\\/]/,Qe="function"==typeof Symbol&&Symbol.for,Ye=Qe?Symbol.for("react.element"):60103,Xe=Qe?Symbol.for("react.portal"):60106,Ge=Qe?Symbol.for("react.fragment"):60107,Je=Qe?Symbol.for("react.strict_mode"):60108,Ze=Qe?Symbol.for("react.profiler"):60114,et=Qe?Symbol.for("react.provider"):60109,tt=Qe?Symbol.for("react.context"):60110,nt=Qe?Symbol.for("react.concurrent_mode"):60111,rt=Qe?Symbol.for("react.forward_ref"):60112,ot=Qe?Symbol.for("react.suspense"):60113,it=Qe?Symbol.for("react.memo"):60115,at=Qe?Symbol.for("react.lazy"):60116,ut="function"==typeof Symbol&&Symbol.iterator;function lt(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=ut&&e[ut]||e["@@iterator"])?e:null}function ct(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case nt:return"ConcurrentMode";case Ge:return"Fragment";case Xe:return"Portal";case Ze:return"Profiler";case Je:return"StrictMode";case ot:return"Suspense"}if("object"==typeof e)switch(e.$$typeof){case tt:return"Context.Consumer";case et:return"Context.Provider";case rt:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case it:return ct(e.type);case at:if(e=1===e._status?e._result:null)return ct(e)}return null}function st(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,o=e._debugSource,i=ct(e.type);n=null,r&&(n=ct(r.type)),r=i,i="",o?i=" (at "+o.fileName.replace(Ke,"")+":"+o.lineNumber+")":n&&(i=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+i}t+=n,e=e.return}while(e);return t}var ft=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,dt=Object.prototype.hasOwnProperty,pt={},ht={};function mt(e,t,n,r,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t}var vt={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){vt[e]=new mt(e,0,!1,e,null)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];vt[t]=new mt(t,1,!1,e[1],null)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){vt[e]=new mt(e,2,!1,e.toLowerCase(),null)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){vt[e]=new mt(e,2,!1,e,null)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){vt[e]=new mt(e,3,!1,e.toLowerCase(),null)})),["checked","multiple","muted","selected"].forEach((function(e){vt[e]=new mt(e,3,!0,e,null)})),["capture","download"].forEach((function(e){vt[e]=new mt(e,4,!1,e,null)})),["cols","rows","size","span"].forEach((function(e){vt[e]=new mt(e,6,!1,e,null)})),["rowSpan","start"].forEach((function(e){vt[e]=new mt(e,5,!1,e.toLowerCase(),null)}));var yt=/[\-:]([a-z])/g;function gt(e){return e[1].toUpperCase()}function bt(e,t,n,r){var o=vt.hasOwnProperty(t)?vt[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!dt.call(ht,e)||!dt.call(pt,e)&&(ft.test(e)?ht[e]=!0:(pt[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function wt(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function xt(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function kt(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=wt(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Tt(e,t){null!=(t=t.checked)&&bt(e,"checked",t,!1)}function St(e,t){Tt(e,t);var n=wt(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?_t(e,t.type,n):t.hasOwnProperty("defaultValue")&&_t(e,t.type,wt(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Et(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function _t(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(yt,gt);vt[t]=new mt(t,1,!1,e,null)})),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(yt,gt);vt[t]=new mt(t,1,!1,e,"http://www.w3.org/1999/xlink")})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(yt,gt);vt[t]=new mt(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")})),vt.tabIndex=new mt("tabIndex",1,!1,"tabindex",null);var Ct={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Pt(e,t,n){return(e=se.getPooled(Ct.change,e,t,n)).type="change",Ie(n),$(e),e}var Ot=null,Nt=null;function jt(e){M(e)}function It(e){if(He(z(e)))return e}function Mt(e,t){if("change"===e)return t}var Rt=!1;function Dt(){Ot&&(Ot.detachEvent("onpropertychange",At),Nt=Ot=null)}function At(e){"value"===e.propertyName&&It(Nt)&&Fe(jt,e=Pt(Nt,e,We(e)))}function Ut(e,t,n){"focus"===e?(Dt(),Nt=n,(Ot=t).attachEvent("onpropertychange",At)):"blur"===e&&Dt()}function Ft(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return It(Nt)}function zt(e,t){if("click"===e)return It(t)}function Lt(e,t){if("input"===e||"change"===e)return It(t)}K&&(Rt=Be("input")&&(!document.documentMode||9<document.documentMode));var Wt={eventTypes:Ct,_isInputEventSupported:Rt,extractEvents:function(e,t,n,r){var o=t?z(t):window,i=void 0,a=void 0,u=o.nodeName&&o.nodeName.toLowerCase();if("select"===u||"input"===u&&"file"===o.type?i=Mt:Le(o)?Rt?i=Lt:(i=Ft,a=Ut):(u=o.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(i=zt),i&&(i=i(e,t)))return Pt(i,n,r);a&&a(e,o,t),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&_t(o,"number",o.value)}},Bt=se.extend({view:null,detail:null}),qt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Vt(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=qt[e])&&!!t[e]}function Ht(){return Vt}var $t=0,Kt=0,Qt=!1,Yt=!1,Xt=Bt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Ht,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=$t;return $t=e.screenX,Qt?"mousemove"===e.type?e.screenX-t:0:(Qt=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Kt;return Kt=e.screenY,Yt?"mousemove"===e.type?e.screenY-t:0:(Yt=!0,0)}}),Gt=Xt.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Jt={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Zt={eventTypes:Jt,extractEvents:function(e,t,n,r){var o="mouseover"===e||"pointerover"===e,i="mouseout"===e||"pointerout"===e;if(o&&(n.relatedTarget||n.fromElement)||!i&&!o)return null;if(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,i?(i=t,t=(t=n.relatedTarget||n.toElement)?U(t):null):i=null,i===t)return null;var a=void 0,u=void 0,l=void 0,c=void 0;"mouseout"===e||"mouseover"===e?(a=Xt,u=Jt.mouseLeave,l=Jt.mouseEnter,c="mouse"):"pointerout"!==e&&"pointerover"!==e||(a=Gt,u=Jt.pointerLeave,l=Jt.pointerEnter,c="pointer");var s=null==i?o:z(i);if(o=null==t?o:z(t),(e=a.getPooled(u,i,n,r)).type=c+"leave",e.target=s,e.relatedTarget=o,(n=a.getPooled(l,t,n,r)).type=c+"enter",n.target=o,n.relatedTarget=s,r=t,i&&r)e:{for(o=r,c=0,a=t=i;a;a=W(a))c++;for(a=0,l=o;l;l=W(l))a++;for(;0<c-a;)t=W(t),c--;for(;0<a-c;)o=W(o),a--;for(;c--;){if(t===o||t===o.alternate)break e;t=W(t),o=W(o)}t=null}else t=null;for(o=t,t=[];i&&i!==o&&(null===(c=i.alternate)||c!==o);)t.push(i),i=W(i);for(i=[];r&&r!==o&&(null===(c=r.alternate)||c!==o);)i.push(r),r=W(r);for(r=0;r<t.length;r++)V(t[r],"bubbled",e);for(r=i.length;0<r--;)V(i[r],"captured",n);return[e,n]}};function en(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t}var tn=Object.prototype.hasOwnProperty;function nn(e,t){if(en(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!tn.call(t,n[r])||!en(e[n[r]],t[n[r]]))return!1;return!0}function rn(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function on(e){2!==rn(e)&&u("188")}function an(e){if(!(e=function(e){var t=e.alternate;if(!t)return 3===(t=rn(e))&&u("188"),1===t?null:e;for(var n=e,r=t;;){var o=n.return,i=o?o.alternate:null;if(!o||!i)break;if(o.child===i.child){for(var a=o.child;a;){if(a===n)return on(o),e;if(a===r)return on(o),t;a=a.sibling}u("188")}if(n.return!==r.return)n=o,r=i;else{a=!1;for(var l=o.child;l;){if(l===n){a=!0,n=o,r=i;break}if(l===r){a=!0,r=o,n=i;break}l=l.sibling}if(!a){for(l=i.child;l;){if(l===n){a=!0,n=i,r=o;break}if(l===r){a=!0,r=i,n=o;break}l=l.sibling}a||u("189")}}n.alternate!==r&&u("190")}return 3!==n.tag&&u("188"),n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var un=se.extend({animationName:null,elapsedTime:null,pseudoElement:null}),ln=se.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),cn=Bt.extend({relatedTarget:null});function sn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var fn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},dn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},pn=Bt.extend({key:function(e){if(e.key){var t=fn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=sn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?dn[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Ht,charCode:function(e){return"keypress"===e.type?sn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?sn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),hn=Xt.extend({dataTransfer:null}),mn=Bt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Ht}),vn=se.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),yn=Xt.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),gn=[["abort","abort"],[Z,"animationEnd"],[ee,"animationIteration"],[te,"animationStart"],["canplay","canPlay"],["canplaythrough","canPlayThrough"],["drag","drag"],["dragenter","dragEnter"],["dragexit","dragExit"],["dragleave","dragLeave"],["dragover","dragOver"],["durationchange","durationChange"],["emptied","emptied"],["encrypted","encrypted"],["ended","ended"],["error","error"],["gotpointercapture","gotPointerCapture"],["load","load"],["loadeddata","loadedData"],["loadedmetadata","loadedMetadata"],["loadstart","loadStart"],["lostpointercapture","lostPointerCapture"],["mousemove","mouseMove"],["mouseout","mouseOut"],["mouseover","mouseOver"],["playing","playing"],["pointermove","pointerMove"],["pointerout","pointerOut"],["pointerover","pointerOver"],["progress","progress"],["scroll","scroll"],["seeking","seeking"],["stalled","stalled"],["suspend","suspend"],["timeupdate","timeUpdate"],["toggle","toggle"],["touchmove","touchMove"],[ne,"transitionEnd"],["waiting","waiting"],["wheel","wheel"]],bn={},wn={};function xn(e,t){var n=e[0],r="on"+((e=e[1])[0].toUpperCase()+e.slice(1));t={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[n],isInteractive:t},bn[e]=t,wn[n]=t}[["blur","blur"],["cancel","cancel"],["click","click"],["close","close"],["contextmenu","contextMenu"],["copy","copy"],["cut","cut"],["auxclick","auxClick"],["dblclick","doubleClick"],["dragend","dragEnd"],["dragstart","dragStart"],["drop","drop"],["focus","focus"],["input","input"],["invalid","invalid"],["keydown","keyDown"],["keypress","keyPress"],["keyup","keyUp"],["mousedown","mouseDown"],["mouseup","mouseUp"],["paste","paste"],["pause","pause"],["play","play"],["pointercancel","pointerCancel"],["pointerdown","pointerDown"],["pointerup","pointerUp"],["ratechange","rateChange"],["reset","reset"],["seeked","seeked"],["submit","submit"],["touchcancel","touchCancel"],["touchend","touchEnd"],["touchstart","touchStart"],["volumechange","volumeChange"]].forEach((function(e){xn(e,!0)})),gn.forEach((function(e){xn(e,!1)}));var kn={eventTypes:bn,isInteractiveTopLevelEventType:function(e){return void 0!==(e=wn[e])&&!0===e.isInteractive},extractEvents:function(e,t,n,r){var o=wn[e];if(!o)return null;switch(e){case"keypress":if(0===sn(n))return null;case"keydown":case"keyup":e=pn;break;case"blur":case"focus":e=cn;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Xt;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=hn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=mn;break;case Z:case ee:case te:e=un;break;case ne:e=vn;break;case"scroll":e=Bt;break;case"wheel":e=yn;break;case"copy":case"cut":case"paste":e=ln;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Gt;break;default:e=se}return $(t=e.getPooled(o,t,n,r)),t}},Tn=kn.isInteractiveTopLevelEventType,Sn=[];function En(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r;for(r=n;r.return;)r=r.return;if(!(r=3!==r.tag?null:r.stateNode.containerInfo))break;e.ancestors.push(n),n=U(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var o=We(e.nativeEvent);r=e.topLevelType;for(var i=e.nativeEvent,a=null,u=0;u<b.length;u++){var l=b[u];l&&(l=l.extractEvents(r,t,i,o))&&(a=C(a,l))}M(a)}}var _n=!0;function Cn(e,t){if(!t)return null;var n=(Tn(e)?On:Nn).bind(null,e);t.addEventListener(e,n,!1)}function Pn(e,t){if(!t)return null;var n=(Tn(e)?On:Nn).bind(null,e);t.addEventListener(e,n,!0)}function On(e,t){De(Nn,e,t)}function Nn(e,t){if(_n){var n=We(t);if(null===(n=U(n))||"number"!=typeof n.tag||2===rn(n)||(n=null),Sn.length){var r=Sn.pop();r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,e=r}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{Fe(En,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>Sn.length&&Sn.push(e)}}}var jn={},In=0,Mn="_reactListenersID"+(""+Math.random()).slice(2);function Rn(e){return Object.prototype.hasOwnProperty.call(e,Mn)||(e[Mn]=In++,jn[e[Mn]]={}),jn[e[Mn]]}function Dn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function An(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Un(e,t){var n,r=An(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=An(r)}}function Fn(){for(var e=window,t=Dn();t instanceof e.HTMLIFrameElement;){try{e=t.contentDocument.defaultView}catch(e){break}t=Dn(e.document)}return t}function zn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var Ln=K&&"documentMode"in document&&11>=document.documentMode,Wn={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Bn=null,qn=null,Vn=null,Hn=!1;function $n(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return Hn||null==Bn||Bn!==Dn(n)?null:("selectionStart"in(n=Bn)&&zn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Vn&&nn(Vn,n)?null:(Vn=n,(e=se.getPooled(Wn.select,qn,e,t)).type="select",e.target=Bn,$(e),e))}var Kn={eventTypes:Wn,extractEvents:function(e,t,n,r){var o,i=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!i)){e:{i=Rn(i),o=k.onSelect;for(var a=0;a<o.length;a++){var u=o[a];if(!i.hasOwnProperty(u)||!i[u]){i=!1;break e}}i=!0}o=!i}if(o)return null;switch(i=t?z(t):window,e){case"focus":(Le(i)||"true"===i.contentEditable)&&(Bn=i,qn=t,Vn=null);break;case"blur":Vn=qn=Bn=null;break;case"mousedown":Hn=!0;break;case"contextmenu":case"mouseup":case"dragend":return Hn=!1,$n(n,r);case"selectionchange":if(Ln)break;case"keydown":case"keyup":return $n(n,r)}return null}};function Qn(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function Yn(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+wt(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function Xn(e,t){return null!=t.dangerouslySetInnerHTML&&u("91"),o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Gn(e,t){var n=t.value;null==n&&(n=t.defaultValue,null!=(t=t.children)&&(null!=n&&u("92"),Array.isArray(t)&&(1>=t.length||u("93"),t=t[0]),n=t),null==n&&(n="")),e._wrapperState={initialValue:wt(n)}}function Jn(e,t){var n=wt(t.value),r=wt(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Zn(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}j.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),T=L,S=F,E=z,j.injectEventPluginsByName({SimpleEventPlugin:kn,EnterLeaveEventPlugin:Zt,ChangeEventPlugin:Wt,SelectEventPlugin:Kn,BeforeInputEventPlugin:Ce});var er="http://www.w3.org/1999/xhtml",tr="http://www.w3.org/2000/svg";function nr(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function rr(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?nr(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var or=void 0,ir=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction((function(){return e(t,n)}))}:e}((function(e,t){if(e.namespaceURI!==tr||"innerHTML"in e)e.innerHTML=t;else{for((or=or||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=or.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function ar(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ur={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},lr=["Webkit","ms","Moz","O"];function cr(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ur.hasOwnProperty(e)&&ur[e]?(""+t).trim():t+"px"}function sr(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=cr(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(ur).forEach((function(e){lr.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ur[t]=ur[e]}))}));var fr=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function dr(e,t){t&&(fr[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&u("137",e,""),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&u("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||u("61")),null!=t.style&&"object"!=typeof t.style&&u("62",""))}function pr(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function hr(e,t){var n=Rn(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=k[t];for(var r=0;r<t.length;r++){var o=t[r];if(!n.hasOwnProperty(o)||!n[o]){switch(o){case"scroll":Pn("scroll",e);break;case"focus":case"blur":Pn("focus",e),Pn("blur",e),n.blur=!0,n.focus=!0;break;case"cancel":case"close":Be(o)&&Pn(o,e);break;case"invalid":case"submit":case"reset":break;default:-1===re.indexOf(o)&&Cn(o,e)}n[o]=!0}}}function mr(){}var vr=null,yr=null;function gr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function br(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var wr="function"==typeof setTimeout?setTimeout:void 0,xr="function"==typeof clearTimeout?clearTimeout:void 0,kr=i.unstable_scheduleCallback,Tr=i.unstable_cancelCallback;function Sr(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}function Er(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}new Set;var _r=[],Cr=-1;function Pr(e){0>Cr||(e.current=_r[Cr],_r[Cr]=null,Cr--)}function Or(e,t){Cr++,_r[Cr]=e.current,e.current=t}var Nr={},jr={current:Nr},Ir={current:!1},Mr=Nr;function Rr(e,t){var n=e.type.contextTypes;if(!n)return Nr;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function Dr(e){return null!=(e=e.childContextTypes)}function Ar(e){Pr(Ir),Pr(jr)}function Ur(e){Pr(Ir),Pr(jr)}function Fr(e,t,n){jr.current!==Nr&&u("168"),Or(jr,t),Or(Ir,n)}function zr(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())i in e||u("108",ct(t)||"Unknown",i);return o({},n,r)}function Lr(e){var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||Nr,Mr=jr.current,Or(jr,t),Or(Ir,Ir.current),!0}function Wr(e,t,n){var r=e.stateNode;r||u("169"),n?(t=zr(e,t,Mr),r.__reactInternalMemoizedMergedChildContext=t,Pr(Ir),Pr(jr),Or(jr,t)):Pr(Ir),Or(Ir,n)}var Br=null,qr=null;function Vr(e){return function(t){try{return e(t)}catch(e){}}}function Hr(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.contextDependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function $r(e,t,n,r){return new Hr(e,t,n,r)}function Kr(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Qr(e,t){var n=e.alternate;return null===n?((n=$r(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,n.contextDependencies=e.contextDependencies,n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Yr(e,t,n,r,o,i){var a=2;if(r=e,"function"==typeof e)Kr(e)&&(a=1);else if("string"==typeof e)a=5;else e:switch(e){case Ge:return Xr(n.children,o,i,t);case nt:return Gr(n,3|o,i,t);case Je:return Gr(n,2|o,i,t);case Ze:return(e=$r(12,n,t,4|o)).elementType=Ze,e.type=Ze,e.expirationTime=i,e;case ot:return(e=$r(13,n,t,o)).elementType=ot,e.type=ot,e.expirationTime=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case et:a=10;break e;case tt:a=9;break e;case rt:a=11;break e;case it:a=14;break e;case at:a=16,r=null;break e}u("130",null==e?e:typeof e,"")}return(t=$r(a,n,t,o)).elementType=e,t.type=r,t.expirationTime=i,t}function Xr(e,t,n,r){return(e=$r(7,e,r,t)).expirationTime=n,e}function Gr(e,t,n,r){return e=$r(8,e,r,t),t=0==(1&t)?Je:nt,e.elementType=t,e.type=t,e.expirationTime=n,e}function Jr(e,t,n){return(e=$r(6,e,null,t)).expirationTime=n,e}function Zr(e,t,n){return(t=$r(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function eo(e,t){e.didError=!1;var n=e.earliestPendingTime;0===n?e.earliestPendingTime=e.latestPendingTime=t:n<t?e.earliestPendingTime=t:e.latestPendingTime>t&&(e.latestPendingTime=t),ro(t,e)}function to(e,t){e.didError=!1,e.latestPingedTime>=t&&(e.latestPingedTime=0);var n=e.earliestPendingTime,r=e.latestPendingTime;n===t?e.earliestPendingTime=r===t?e.latestPendingTime=0:r:r===t&&(e.latestPendingTime=n),n=e.earliestSuspendedTime,r=e.latestSuspendedTime,0===n?e.earliestSuspendedTime=e.latestSuspendedTime=t:n<t?e.earliestSuspendedTime=t:r>t&&(e.latestSuspendedTime=t),ro(t,e)}function no(e,t){var n=e.earliestPendingTime;return n>t&&(t=n),(e=e.earliestSuspendedTime)>t&&(t=e),t}function ro(e,t){var n=t.earliestSuspendedTime,r=t.latestSuspendedTime,o=t.earliestPendingTime,i=t.latestPingedTime;0===(o=0!==o?o:i)&&(0===e||r<e)&&(o=r),0!==(e=o)&&n>e&&(e=n),t.nextExpirationTimeToWorkOn=o,t.expirationTime=e}function oo(e,t){if(e&&e.defaultProps)for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var io=(new r.Component).refs;function ao(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,null!==(r=e.updateQueue)&&0===e.expirationTime&&(r.baseState=n)}var uo={isMounted:function(e){return!!(e=e._reactInternalFiber)&&2===rn(e)},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=pu(),o=Wi(r=Ua(r,e));o.payload=t,null!=n&&(o.callback=n),Ia(),qi(e,o),Wa(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=pu(),o=Wi(r=Ua(r,e));o.tag=Ai,o.payload=t,null!=n&&(o.callback=n),Ia(),qi(e,o),Wa(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=pu(),r=Wi(n=Ua(n,e));r.tag=Ui,null!=t&&(r.callback=t),Ia(),qi(e,r),Wa(e,n)}};function lo(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!t.prototype||!t.prototype.isPureReactComponent||(!nn(n,r)||!nn(o,i))}function co(e,t,n){var r=!1,o=Nr,i=t.contextType;return"object"==typeof i&&null!==i?i=Di(i):(o=Dr(t)?Mr:jr.current,i=(r=null!=(r=t.contextTypes))?Rr(e,o):Nr),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=uo,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function so(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&uo.enqueueReplaceState(t,t.state,null)}function fo(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=io;var i=t.contextType;"object"==typeof i&&null!==i?o.context=Di(i):(i=Dr(t)?Mr:jr.current,o.context=Rr(e,i)),null!==(i=e.updateQueue)&&(Ki(e,i,n,o,r),o.state=e.memoizedState),"function"==typeof(i=t.getDerivedStateFromProps)&&(ao(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&uo.enqueueReplaceState(o,o.state,null),null!==(i=e.updateQueue)&&(Ki(e,i,n,o,r),o.state=e.memoizedState)),"function"==typeof o.componentDidMount&&(e.effectTag|=4)}var po=Array.isArray;function ho(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){n=n._owner;var r=void 0;n&&(1!==n.tag&&u("309"),r=n.stateNode),r||u("147",e);var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===io&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}"string"!=typeof e&&u("284"),n._owner||u("290",e)}return e}function mo(e,t){"textarea"!==e.type&&u("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function vo(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t,n){return(e=Qr(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function a(t){return e&&null===t.alternate&&(t.effectTag=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=Jr(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function c(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=ho(e,t,n),r.return=e,r):((r=Yr(n.type,n.key,n.props,null,e.mode,r)).ref=ho(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Zr(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,i){return null===t||7!==t.tag?((t=Xr(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Jr(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case Ye:return(n=Yr(t.type,t.key,t.props,null,e.mode,n)).ref=ho(e,null,t),n.return=e,n;case Xe:return(t=Zr(t,e.mode,n)).return=e,t}if(po(t)||lt(t))return(t=Xr(t,e.mode,n,null)).return=e,t;mo(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case Ye:return n.key===o?n.type===Ge?f(e,t,n.props.children,r,o):c(e,t,n,r):null;case Xe:return n.key===o?s(e,t,n,r):null}if(po(n)||lt(n))return null!==o?null:f(e,t,n,r,null);mo(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case Ye:return e=e.get(null===r.key?n:r.key)||null,r.type===Ge?f(t,e,r.props.children,o,r.key):c(t,e,r,o);case Xe:return s(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(po(r)||lt(r))return f(t,e=e.get(n)||null,r,o,null);mo(t,r)}return null}function m(o,a,u,l){for(var c=null,s=null,f=a,m=a=0,v=null;null!==f&&m<u.length;m++){f.index>m?(v=f,f=null):v=f.sibling;var y=p(o,f,u[m],l);if(null===y){null===f&&(f=v);break}e&&f&&null===y.alternate&&t(o,f),a=i(y,a,m),null===s?c=y:s.sibling=y,s=y,f=v}if(m===u.length)return n(o,f),c;if(null===f){for(;m<u.length;m++)(f=d(o,u[m],l))&&(a=i(f,a,m),null===s?c=f:s.sibling=f,s=f);return c}for(f=r(o,f);m<u.length;m++)(v=h(f,o,m,u[m],l))&&(e&&null!==v.alternate&&f.delete(null===v.key?m:v.key),a=i(v,a,m),null===s?c=v:s.sibling=v,s=v);return e&&f.forEach((function(e){return t(o,e)})),c}function v(o,a,l,c){var s=lt(l);"function"!=typeof s&&u("150"),null==(l=s.call(l))&&u("151");for(var f=s=null,m=a,v=a=0,y=null,g=l.next();null!==m&&!g.done;v++,g=l.next()){m.index>v?(y=m,m=null):y=m.sibling;var b=p(o,m,g.value,c);if(null===b){m||(m=y);break}e&&m&&null===b.alternate&&t(o,m),a=i(b,a,v),null===f?s=b:f.sibling=b,f=b,m=y}if(g.done)return n(o,m),s;if(null===m){for(;!g.done;v++,g=l.next())null!==(g=d(o,g.value,c))&&(a=i(g,a,v),null===f?s=g:f.sibling=g,f=g);return s}for(m=r(o,m);!g.done;v++,g=l.next())null!==(g=h(m,o,v,g.value,c))&&(e&&null!==g.alternate&&m.delete(null===g.key?v:g.key),a=i(g,a,v),null===f?s=g:f.sibling=g,f=g);return e&&m.forEach((function(e){return t(o,e)})),s}return function(e,r,i,l){var c="object"==typeof i&&null!==i&&i.type===Ge&&null===i.key;c&&(i=i.props.children);var s="object"==typeof i&&null!==i;if(s)switch(i.$$typeof){case Ye:e:{for(s=i.key,c=r;null!==c;){if(c.key===s){if(7===c.tag?i.type===Ge:c.elementType===i.type){n(e,c.sibling),(r=o(c,i.type===Ge?i.props.children:i.props)).ref=ho(e,c,i),r.return=e,e=r;break e}n(e,c);break}t(e,c),c=c.sibling}i.type===Ge?((r=Xr(i.props.children,e.mode,l,i.key)).return=e,e=r):((l=Yr(i.type,i.key,i.props,null,e.mode,l)).ref=ho(e,r,i),l.return=e,e=l)}return a(e);case Xe:e:{for(c=i.key;null!==r;){if(r.key===c){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Zr(i,e.mode,l)).return=e,e=r}return a(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i)).return=e,e=r):(n(e,r),(r=Jr(i,e.mode,l)).return=e,e=r),a(e);if(po(i))return m(e,r,i,l);if(lt(i))return v(e,r,i,l);if(s&&mo(e,i),void 0===i&&!c)switch(e.tag){case 1:case 0:u("152",(l=e.type).displayName||l.name||"Component")}return n(e,r)}}var yo=vo(!0),go=vo(!1),bo={},wo={current:bo},xo={current:bo},ko={current:bo};function To(e){return e===bo&&u("174"),e}function So(e,t){Or(ko,t),Or(xo,e),Or(wo,bo);var n=t.nodeType;switch(n){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:rr(null,"");break;default:t=rr(t=(n=8===n?t.parentNode:t).namespaceURI||null,n=n.tagName)}Pr(wo),Or(wo,t)}function Eo(e){Pr(wo),Pr(xo),Pr(ko)}function _o(e){To(ko.current);var t=To(wo.current),n=rr(t,e.type);t!==n&&(Or(xo,e),Or(wo,n))}function Co(e){xo.current===e&&(Pr(wo),Pr(xo))}var Po=$e.ReactCurrentDispatcher,Oo=0,No=null,jo=null,Io=null,Mo=null,Ro=null,Do=null,Ao=0,Uo=null,Fo=0,zo=!1,Lo=null,Wo=0;function Bo(){u("307")}function qo(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!en(e[n],t[n]))return!1;return!0}function Vo(e,t,n,r,o,i){if(Oo=i,No=t,Io=null!==e?e.memoizedState:null,Po.current=null===Io?ri:oi,t=n(r,o),zo){do{zo=!1,Wo+=1,Io=null!==e?e.memoizedState:null,Do=Mo,Uo=Ro=jo=null,Po.current=oi,t=n(r,o)}while(zo);Lo=null,Wo=0}return Po.current=ni,(e=No).memoizedState=Mo,e.expirationTime=Ao,e.updateQueue=Uo,e.effectTag|=Fo,e=null!==jo&&null!==jo.next,Oo=0,Do=Ro=Mo=Io=jo=No=null,Ao=0,Uo=null,Fo=0,e&&u("300"),t}function Ho(){Po.current=ni,Oo=0,Do=Ro=Mo=Io=jo=No=null,Ao=0,Uo=null,Fo=0,zo=!1,Lo=null,Wo=0}function $o(){var e={memoizedState:null,baseState:null,queue:null,baseUpdate:null,next:null};return null===Ro?Mo=Ro=e:Ro=Ro.next=e,Ro}function Ko(){if(null!==Do)Do=(Ro=Do).next,Io=null!==(jo=Io)?jo.next:null;else{null===Io&&u("310");var e={memoizedState:(jo=Io).memoizedState,baseState:jo.baseState,queue:jo.queue,baseUpdate:jo.baseUpdate,next:null};Ro=null===Ro?Mo=e:Ro.next=e,Io=jo.next}return Ro}function Qo(e,t){return"function"==typeof t?t(e):t}function Yo(e){var t=Ko(),n=t.queue;if(null===n&&u("311"),0<Wo){var r=n.dispatch;if(null!==Lo){var o=Lo.get(n);if(void 0!==o){Lo.delete(n);var i=t.memoizedState;do{i=e(i,o.action),o=o.next}while(null!==o);return en(i,t.memoizedState)||(mi=!0),t.memoizedState=i,t.baseUpdate===n.last&&(t.baseState=i),[i,r]}}return[t.memoizedState,r]}r=n.last;var a=t.baseUpdate;if(i=t.baseState,null!==a?(null!==r&&(r.next=null),r=a.next):r=null!==r?r.next:null,null!==r){var l=o=null,c=r,s=!1;do{var f=c.expirationTime;f<Oo?(s||(s=!0,l=a,o=i),f>Ao&&(Ao=f)):i=c.eagerReducer===e?c.eagerState:e(i,c.action),a=c,c=c.next}while(null!==c&&c!==r);s||(l=a,o=i),en(i,t.memoizedState)||(mi=!0),t.memoizedState=i,t.baseUpdate=l,t.baseState=o,n.eagerReducer=e,n.eagerState=i}return[t.memoizedState,n.dispatch]}function Xo(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===Uo?(Uo={lastEffect:null}).lastEffect=e.next=e:null===(t=Uo.lastEffect)?Uo.lastEffect=e.next=e:(n=t.next,t.next=e,e.next=n,Uo.lastEffect=e),e}function Go(e,t,n,r){var o=$o();Fo|=e,o.memoizedState=Xo(t,n,void 0,void 0===r?null:r)}function Jo(e,t,n,r){var o=Ko();r=void 0===r?null:r;var i=void 0;if(null!==jo){var a=jo.memoizedState;if(i=a.destroy,null!==r&&qo(r,a.deps))return void Xo(0,n,i,r)}Fo|=e,o.memoizedState=Xo(t,n,i,r)}function Zo(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function ei(){}function ti(e,t,n){25>Wo||u("301");var r=e.alternate;if(e===No||null!==r&&r===No)if(zo=!0,e={expirationTime:Oo,action:n,eagerReducer:null,eagerState:null,next:null},null===Lo&&(Lo=new Map),void 0===(n=Lo.get(t)))Lo.set(t,e);else{for(t=n;null!==t.next;)t=t.next;t.next=e}else{Ia();var o=pu(),i={expirationTime:o=Ua(o,e),action:n,eagerReducer:null,eagerState:null,next:null},a=t.last;if(null===a)i.next=i;else{var l=a.next;null!==l&&(i.next=l),a.next=i}if(t.last=i,0===e.expirationTime&&(null===r||0===r.expirationTime)&&null!==(r=t.eagerReducer))try{var c=t.eagerState,s=r(c,n);if(i.eagerReducer=r,i.eagerState=s,en(s,c))return}catch(e){}Wa(e,o)}}var ni={readContext:Di,useCallback:Bo,useContext:Bo,useEffect:Bo,useImperativeHandle:Bo,useLayoutEffect:Bo,useMemo:Bo,useReducer:Bo,useRef:Bo,useState:Bo,useDebugValue:Bo},ri={readContext:Di,useCallback:function(e,t){return $o().memoizedState=[e,void 0===t?null:t],e},useContext:Di,useEffect:function(e,t){return Go(516,192,e,t)},useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):[e],Go(4,36,Zo.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Go(4,36,e,t)},useMemo:function(e,t){var n=$o();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=$o();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={last:null,dispatch:null,eagerReducer:e,eagerState:t}).dispatch=ti.bind(null,No,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},$o().memoizedState=e},useState:function(e){var t=$o();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={last:null,dispatch:null,eagerReducer:Qo,eagerState:e}).dispatch=ti.bind(null,No,e),[t.memoizedState,e]},useDebugValue:ei},oi={readContext:Di,useCallback:function(e,t){var n=Ko();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&qo(t,r[1])?r[0]:(n.memoizedState=[e,t],e)},useContext:Di,useEffect:function(e,t){return Jo(516,192,e,t)},useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):[e],Jo(4,36,Zo.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Jo(4,36,e,t)},useMemo:function(e,t){var n=Ko();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&qo(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)},useReducer:Yo,useRef:function(){return Ko().memoizedState},useState:function(e){return Yo(Qo)},useDebugValue:ei},ii=null,ai=null,ui=!1;function li(e,t){var n=$r(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function ci(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);default:return!1}}function si(e){if(ui){var t=ai;if(t){var n=t;if(!ci(e,t)){if(!(t=Sr(n))||!ci(e,t))return e.effectTag|=2,ui=!1,void(ii=e);li(ii,n)}ii=e,ai=Er(t)}else e.effectTag|=2,ui=!1,ii=e}}function fi(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag;)e=e.return;ii=e}function di(e){if(e!==ii)return!1;if(!ui)return fi(e),ui=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!br(t,e.memoizedProps))for(t=ai;t;)li(e,t),t=Sr(t);return fi(e),ai=ii?Sr(e.stateNode):null,!0}function pi(){ai=ii=null,ui=!1}var hi=$e.ReactCurrentOwner,mi=!1;function vi(e,t,n,r){t.child=null===e?go(t,null,n,r):yo(t,e.child,n,r)}function yi(e,t,n,r,o){n=n.render;var i=t.ref;return Ri(t,o),r=Vo(e,t,n,r,i,o),null===e||mi?(t.effectTag|=1,vi(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),_i(e,t,o))}function gi(e,t,n,r,o,i){if(null===e){var a=n.type;return"function"!=typeof a||Kr(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Yr(n.type,null,r,null,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,bi(e,t,a,r,o,i))}return a=e.child,o<i&&(o=a.memoizedProps,(n=null!==(n=n.compare)?n:nn)(o,r)&&e.ref===t.ref)?_i(e,t,i):(t.effectTag|=1,(e=Qr(a,r)).ref=t.ref,e.return=t,t.child=e)}function bi(e,t,n,r,o,i){return null!==e&&nn(e.memoizedProps,r)&&e.ref===t.ref&&(mi=!1,o<i)?_i(e,t,i):xi(e,t,n,r,i)}function wi(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function xi(e,t,n,r,o){var i=Dr(n)?Mr:jr.current;return i=Rr(t,i),Ri(t,o),n=Vo(e,t,n,r,i,o),null===e||mi?(t.effectTag|=1,vi(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),_i(e,t,o))}function ki(e,t,n,r,o){if(Dr(n)){var i=!0;Lr(t)}else i=!1;if(Ri(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),co(t,n,r),fo(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,u=t.memoizedProps;a.props=u;var l=a.context,c=n.contextType;"object"==typeof c&&null!==c?c=Di(c):c=Rr(t,c=Dr(n)?Mr:jr.current);var s=n.getDerivedStateFromProps,f="function"==typeof s||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||l!==c)&&so(t,a,r,c),Fi=!1;var d=t.memoizedState;l=a.state=d;var p=t.updateQueue;null!==p&&(Ki(t,p,r,a,o),l=t.memoizedState),u!==r||d!==l||Ir.current||Fi?("function"==typeof s&&(ao(t,n,s,r),l=t.memoizedState),(u=Fi||lo(t,n,u,r,d,l,c))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.effectTag|=4)):("function"==typeof a.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=l),a.props=r,a.state=l,a.context=c,r=u):("function"==typeof a.componentDidMount&&(t.effectTag|=4),r=!1)}else a=t.stateNode,u=t.memoizedProps,a.props=t.type===t.elementType?u:oo(t.type,u),l=a.context,"object"==typeof(c=n.contextType)&&null!==c?c=Di(c):c=Rr(t,c=Dr(n)?Mr:jr.current),(f="function"==typeof(s=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||l!==c)&&so(t,a,r,c),Fi=!1,l=t.memoizedState,d=a.state=l,null!==(p=t.updateQueue)&&(Ki(t,p,r,a,o),d=t.memoizedState),u!==r||l!==d||Ir.current||Fi?("function"==typeof s&&(ao(t,n,s,r),d=t.memoizedState),(s=Fi||lo(t,n,u,r,l,d,c))?(f||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,d,c),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,d,c)),"function"==typeof a.componentDidUpdate&&(t.effectTag|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=d),a.props=r,a.state=d,a.context=c,r=s):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),r=!1);return Ti(e,t,n,r,i,o)}function Ti(e,t,n,r,o,i){wi(e,t);var a=0!=(64&t.effectTag);if(!r&&!a)return o&&Wr(t,n,!1),_i(e,t,i);r=t.stateNode,hi.current=t;var u=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&a?(t.child=yo(t,e.child,null,i),t.child=yo(t,null,u,i)):vi(e,t,u,i),t.memoizedState=r.state,o&&Wr(t,n,!0),t.child}function Si(e){var t=e.stateNode;t.pendingContext?Fr(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Fr(0,t.context,!1),So(e,t.containerInfo)}function Ei(e,t,n){var r=t.mode,o=t.pendingProps,i=t.memoizedState;if(0==(64&t.effectTag)){i=null;var a=!1}else i={timedOutAt:null!==i?i.timedOutAt:0},a=!0,t.effectTag&=-65;if(null===e)if(a){var u=o.fallback;e=Xr(null,r,0,null),0==(1&t.mode)&&(e.child=null!==t.memoizedState?t.child.child:t.child),r=Xr(u,r,n,null),e.sibling=r,(n=e).return=r.return=t}else n=r=go(t,null,o.children,n);else null!==e.memoizedState?(u=(r=e.child).sibling,a?(n=o.fallback,o=Qr(r,r.pendingProps),0==(1&t.mode)&&((a=null!==t.memoizedState?t.child.child:t.child)!==r.child&&(o.child=a)),r=o.sibling=Qr(u,n,u.expirationTime),n=o,o.childExpirationTime=0,n.return=r.return=t):n=r=yo(t,r.child,o.children,n)):(u=e.child,a?(a=o.fallback,(o=Xr(null,r,0,null)).child=u,0==(1&t.mode)&&(o.child=null!==t.memoizedState?t.child.child:t.child),(r=o.sibling=Xr(a,r,n,null)).effectTag|=2,n=o,o.childExpirationTime=0,n.return=r.return=t):r=n=yo(t,u,o.children,n)),t.stateNode=e.stateNode;return t.memoizedState=i,t.child=n,r}function _i(e,t,n){if(null!==e&&(t.contextDependencies=e.contextDependencies),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child&&u("153"),null!==t.child){for(n=Qr(e=t.child,e.pendingProps,e.expirationTime),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Qr(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function Ci(e,t,n){var r=t.expirationTime;if(null!==e){if(e.memoizedProps!==t.pendingProps||Ir.current)mi=!0;else if(r<n){switch(mi=!1,t.tag){case 3:Si(t),pi();break;case 5:_o(t);break;case 1:Dr(t.type)&&Lr(t);break;case 4:So(t,t.stateNode.containerInfo);break;case 10:Ii(t,t.memoizedProps.value);break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?Ei(e,t,n):null!==(t=_i(e,t,n))?t.sibling:null}return _i(e,t,n)}}else mi=!1;switch(t.expirationTime=0,t.tag){case 2:r=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps;var o=Rr(t,jr.current);if(Ri(t,n),o=Vo(null,t,r,e,o,n),t.effectTag|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,Ho(),Dr(r)){var i=!0;Lr(t)}else i=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null;var a=r.getDerivedStateFromProps;"function"==typeof a&&ao(t,r,a,e),o.updater=uo,t.stateNode=o,o._reactInternalFiber=t,fo(t,r,e,n),t=Ti(null,t,r,!0,i,n)}else t.tag=0,vi(null,t,o,n),t=t.child;return t;case 16:switch(o=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),i=t.pendingProps,e=function(e){var t=e._result;switch(e._status){case 1:return t;case 2:case 0:throw t;default:switch(e._status=0,(t=(t=e._ctor)()).then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)})),e._status){case 1:return e._result;case 2:throw e._result}throw e._result=t,t}}(o),t.type=e,o=t.tag=function(e){if("function"==typeof e)return Kr(e)?1:0;if(null!=e){if((e=e.$$typeof)===rt)return 11;if(e===it)return 14}return 2}(e),i=oo(e,i),a=void 0,o){case 0:a=xi(null,t,e,i,n);break;case 1:a=ki(null,t,e,i,n);break;case 11:a=yi(null,t,e,i,n);break;case 14:a=gi(null,t,e,oo(e.type,i),r,n);break;default:u("306",e,"")}return a;case 0:return r=t.type,o=t.pendingProps,xi(e,t,r,o=t.elementType===r?o:oo(r,o),n);case 1:return r=t.type,o=t.pendingProps,ki(e,t,r,o=t.elementType===r?o:oo(r,o),n);case 3:return Si(t),null===(r=t.updateQueue)&&u("282"),o=null!==(o=t.memoizedState)?o.element:null,Ki(t,r,t.pendingProps,null,n),(r=t.memoizedState.element)===o?(pi(),t=_i(e,t,n)):(o=t.stateNode,(o=(null===e||null===e.child)&&o.hydrate)&&(ai=Er(t.stateNode.containerInfo),ii=t,o=ui=!0),o?(t.effectTag|=2,t.child=go(t,null,r,n)):(vi(e,t,r,n),pi()),t=t.child),t;case 5:return _o(t),null===e&&si(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,a=o.children,br(r,o)?a=null:null!==i&&br(r,i)&&(t.effectTag|=16),wi(e,t),1!==n&&1&t.mode&&o.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(vi(e,t,a,n),t=t.child),t;case 6:return null===e&&si(t),null;case 13:return Ei(e,t,n);case 4:return So(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=yo(t,null,r,n):vi(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,yi(e,t,r,o=t.elementType===r?o:oo(r,o),n);case 7:return vi(e,t,t.pendingProps,n),t.child;case 8:case 12:return vi(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,a=t.memoizedProps,Ii(t,i=o.value),null!==a){var l=a.value;if(0===(i=en(l,i)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,i):1073741823))){if(a.children===o.children&&!Ir.current){t=_i(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var c=l.contextDependencies;if(null!==c){a=l.child;for(var s=c.first;null!==s;){if(s.context===r&&0!=(s.observedBits&i)){1===l.tag&&((s=Wi(n)).tag=Ui,qi(l,s)),l.expirationTime<n&&(l.expirationTime=n),null!==(s=l.alternate)&&s.expirationTime<n&&(s.expirationTime=n);for(var f=l.return;null!==f;){if(s=f.alternate,f.childExpirationTime<n)f.childExpirationTime=n,null!==s&&s.childExpirationTime<n&&(s.childExpirationTime=n);else{if(!(null!==s&&s.childExpirationTime<n))break;s.childExpirationTime=n}f=f.return}c.expirationTime<n&&(c.expirationTime=n);break}s=s.next}}else a=10===l.tag&&l.type===t.type?null:l.child;if(null!==a)a.return=l;else for(a=l;null!==a;){if(a===t){a=null;break}if(null!==(l=a.sibling)){l.return=a.return,a=l;break}a=a.return}l=a}}vi(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(i=t.pendingProps).children,Ri(t,n),r=r(o=Di(o,i.unstable_observedBits)),t.effectTag|=1,vi(e,t,r,n),t.child;case 14:return i=oo(o=t.type,t.pendingProps),gi(e,t,o,i=oo(o.type,i),r,n);case 15:return bi(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:oo(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,Dr(r)?(e=!0,Lr(t)):e=!1,Ri(t,n),co(t,r,o),fo(t,r,o,n),Ti(null,t,r,!0,e,n);default:u("156")}}var Pi={current:null},Oi=null,Ni=null,ji=null;function Ii(e,t){var n=e.type._context;Or(Pi,n._currentValue),n._currentValue=t}function Mi(e){var t=Pi.current;Pr(Pi),e.type._context._currentValue=t}function Ri(e,t){Oi=e,ji=Ni=null;var n=e.contextDependencies;null!==n&&n.expirationTime>=t&&(mi=!0),e.contextDependencies=null}function Di(e,t){return ji!==e&&!1!==t&&0!==t&&("number"==typeof t&&1073741823!==t||(ji=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Ni?(null===Oi&&u("308"),Ni=t,Oi.contextDependencies={first:t,expirationTime:0}):Ni=Ni.next=t),e._currentValue}var Ai=1,Ui=2,Fi=!1;function zi(e){return{baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Li(e){return{baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Wi(e){return{expirationTime:e,tag:0,payload:null,callback:null,next:null,nextEffect:null}}function Bi(e,t){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t)}function qi(e,t){var n=e.alternate;if(null===n){var r=e.updateQueue,o=null;null===r&&(r=e.updateQueue=zi(e.memoizedState))}else r=e.updateQueue,o=n.updateQueue,null===r?null===o?(r=e.updateQueue=zi(e.memoizedState),o=n.updateQueue=zi(n.memoizedState)):r=e.updateQueue=Li(o):null===o&&(o=n.updateQueue=Li(r));null===o||r===o?Bi(r,t):null===r.lastUpdate||null===o.lastUpdate?(Bi(r,t),Bi(o,t)):(Bi(r,t),o.lastUpdate=t)}function Vi(e,t){var n=e.updateQueue;null===(n=null===n?e.updateQueue=zi(e.memoizedState):Hi(e,n)).lastCapturedUpdate?n.firstCapturedUpdate=n.lastCapturedUpdate=t:(n.lastCapturedUpdate.next=t,n.lastCapturedUpdate=t)}function Hi(e,t){var n=e.alternate;return null!==n&&t===n.updateQueue&&(t=e.updateQueue=Li(t)),t}function $i(e,t,n,r,i,a){switch(n.tag){case Ai:return"function"==typeof(e=n.payload)?e.call(a,r,i):e;case 3:e.effectTag=-2049&e.effectTag|64;case 0:if(null==(i="function"==typeof(e=n.payload)?e.call(a,r,i):e))break;return o({},r,i);case Ui:Fi=!0}return r}function Ki(e,t,n,r,o){Fi=!1;for(var i=(t=Hi(e,t)).baseState,a=null,u=0,l=t.firstUpdate,c=i;null!==l;){var s=l.expirationTime;s<o?(null===a&&(a=l,i=c),u<s&&(u=s)):(c=$i(e,0,l,c,n,r),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=l:(t.lastEffect.nextEffect=l,t.lastEffect=l))),l=l.next}for(s=null,l=t.firstCapturedUpdate;null!==l;){var f=l.expirationTime;f<o?(null===s&&(s=l,null===a&&(i=c)),u<f&&(u=f)):(c=$i(e,0,l,c,n,r),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=l:(t.lastCapturedEffect.nextEffect=l,t.lastCapturedEffect=l))),l=l.next}null===a&&(t.lastUpdate=null),null===s?t.lastCapturedUpdate=null:e.effectTag|=32,null===a&&null===s&&(i=c),t.baseState=i,t.firstUpdate=a,t.firstCapturedUpdate=s,e.expirationTime=u,e.memoizedState=c}function Qi(e,t,n){null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),Yi(t.firstEffect,n),t.firstEffect=t.lastEffect=null,Yi(t.firstCapturedEffect,n),t.firstCapturedEffect=t.lastCapturedEffect=null}function Yi(e,t){for(;null!==e;){var n=e.callback;if(null!==n){e.callback=null;var r=t;"function"!=typeof n&&u("191",n),n.call(r)}e=e.nextEffect}}function Xi(e,t){return{value:e,source:t,stack:st(t)}}function Gi(e){e.effectTag|=4}var Ji,Zi,ea;Ji=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Zi=function(e,t,n,r,i){var a=e.memoizedProps;if(a!==r){var u=t.stateNode;switch(To(wo.current),e=null,n){case"input":a=xt(u,a),r=xt(u,r),e=[];break;case"option":a=Qn(u,a),r=Qn(u,r),e=[];break;case"select":a=o({},a,{value:void 0}),r=o({},r,{value:void 0}),e=[];break;case"textarea":a=Xn(u,a),r=Xn(u,r),e=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(u.onclick=mr)}dr(n,r),u=n=void 0;var l=null;for(n in a)if(!r.hasOwnProperty(n)&&a.hasOwnProperty(n)&&null!=a[n])if("style"===n){var c=a[n];for(u in c)c.hasOwnProperty(u)&&(l||(l={}),l[u]="")}else"dangerouslySetInnerHTML"!==n&&"children"!==n&&"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&"autoFocus"!==n&&(x.hasOwnProperty(n)?e||(e=[]):(e=e||[]).push(n,null));for(n in r){var s=r[n];if(c=null!=a?a[n]:void 0,r.hasOwnProperty(n)&&s!==c&&(null!=s||null!=c))if("style"===n)if(c){for(u in c)!c.hasOwnProperty(u)||s&&s.hasOwnProperty(u)||(l||(l={}),l[u]="");for(u in s)s.hasOwnProperty(u)&&c[u]!==s[u]&&(l||(l={}),l[u]=s[u])}else l||(e||(e=[]),e.push(n,l)),l=s;else"dangerouslySetInnerHTML"===n?(s=s?s.__html:void 0,c=c?c.__html:void 0,null!=s&&c!==s&&(e=e||[]).push(n,""+s)):"children"===n?c===s||"string"!=typeof s&&"number"!=typeof s||(e=e||[]).push(n,""+s):"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&(x.hasOwnProperty(n)?(null!=s&&hr(i,n),e||c===s||(e=[])):(e=e||[]).push(n,s))}l&&(e=e||[]).push("style",l),i=e,(t.updateQueue=i)&&Gi(t)}},ea=function(e,t,n,r){n!==r&&Gi(t)};var ta="function"==typeof WeakSet?WeakSet:Set;function na(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=st(n)),null!==n&&ct(n.type),t=t.value,null!==e&&1===e.tag&&ct(e.type);try{console.error(t)}catch(e){setTimeout((function(){throw e}))}}function ra(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Aa(e,t)}else t.current=null}function oa(e,t,n){if(null!==(n=null!==(n=n.updateQueue)?n.lastEffect:null)){var r=n=n.next;do{if(0!=(r.tag&e)){var o=r.destroy;r.destroy=void 0,void 0!==o&&o()}0!=(r.tag&t)&&(o=r.create,r.destroy=o()),r=r.next}while(r!==n)}}function ia(e){switch("function"==typeof qr&&qr(e),e.tag){case 0:case 11:case 14:case 15:var t=e.updateQueue;if(null!==t&&null!==(t=t.lastEffect)){var n=t=t.next;do{var r=n.destroy;if(void 0!==r){var o=e;try{r()}catch(e){Aa(o,e)}}n=n.next}while(n!==t)}break;case 1:if(ra(e),"function"==typeof(t=e.stateNode).componentWillUnmount)try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){Aa(e,t)}break;case 5:ra(e);break;case 4:la(e)}}function aa(e){return 5===e.tag||3===e.tag||4===e.tag}function ua(e){e:{for(var t=e.return;null!==t;){if(aa(t)){var n=t;break e}t=t.return}u("160"),n=void 0}var r=t=void 0;switch(n.tag){case 5:t=n.stateNode,r=!1;break;case 3:case 4:t=n.stateNode.containerInfo,r=!0;break;default:u("161")}16&n.effectTag&&(ar(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||aa(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var o=e;;){if(5===o.tag||6===o.tag)if(n)if(r){var i=t,a=o.stateNode,l=n;8===i.nodeType?i.parentNode.insertBefore(a,l):i.insertBefore(a,l)}else t.insertBefore(o.stateNode,n);else r?(a=t,l=o.stateNode,8===a.nodeType?(i=a.parentNode).insertBefore(l,a):(i=a).appendChild(l),null!=(a=a._reactRootContainer)||null!==i.onclick||(i.onclick=mr)):t.appendChild(o.stateNode);else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}}function la(e){for(var t=e,n=!1,r=void 0,o=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&u("160"),n.tag){case 5:r=n.stateNode,o=!1;break e;case 3:case 4:r=n.stateNode.containerInfo,o=!0;break e}n=n.return}n=!0}if(5===t.tag||6===t.tag){e:for(var i=t,a=i;;)if(ia(a),null!==a.child&&4!==a.tag)a.child.return=a,a=a.child;else{if(a===i)break;for(;null===a.sibling;){if(null===a.return||a.return===i)break e;a=a.return}a.sibling.return=a.return,a=a.sibling}o?(i=r,a=t.stateNode,8===i.nodeType?i.parentNode.removeChild(a):i.removeChild(a)):r.removeChild(t.stateNode)}else if(4===t.tag?(r=t.stateNode.containerInfo,o=!0):ia(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;4===(t=t.return).tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}function ca(e,t){switch(t.tag){case 0:case 11:case 14:case 15:oa(4,8,t);break;case 1:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps;e=null!==e?e.memoizedProps:r;var o=t.type,i=t.updateQueue;t.updateQueue=null,null!==i&&function(e,t,n,r,o){e[A]=o,"input"===n&&"radio"===o.type&&null!=o.name&&Tt(e,o),pr(n,r),r=pr(n,o);for(var i=0;i<t.length;i+=2){var a=t[i],u=t[i+1];"style"===a?sr(e,u):"dangerouslySetInnerHTML"===a?ir(e,u):"children"===a?ar(e,u):bt(e,a,u,r)}switch(n){case"input":St(e,o);break;case"textarea":Jn(e,o);break;case"select":t=e._wrapperState.wasMultiple,e._wrapperState.wasMultiple=!!o.multiple,null!=(n=o.value)?Yn(e,!!o.multiple,n,!1):t!==!!o.multiple&&(null!=o.defaultValue?Yn(e,!!o.multiple,o.defaultValue,!0):Yn(e,!!o.multiple,o.multiple?[]:"",!1))}}(n,i,o,e,r)}break;case 6:null===t.stateNode&&u("162"),t.stateNode.nodeValue=t.memoizedProps;break;case 3:case 12:break;case 13:if(n=t.memoizedState,r=void 0,e=t,null===n?r=!1:(r=!0,e=t.child,0===n.timedOutAt&&(n.timedOutAt=pu())),null!==e&&function(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)r.style.display="none";else{r=n.stateNode;var o=n.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,r.style.display=cr("display",o)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else{if(13===n.tag&&null!==n.memoizedState){(r=n.child.sibling).return=n,n=r;continue}if(null!==n.child){n.child.return=n,n=n.child;continue}}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}(e,r),null!==(n=t.updateQueue)){t.updateQueue=null;var a=t.stateNode;null===a&&(a=t.stateNode=new ta),n.forEach((function(e){var n=za.bind(null,t,e);a.has(e)||(a.add(e),e.then(n,n))}))}break;case 17:break;default:u("163")}}var sa="function"==typeof WeakMap?WeakMap:Map;function fa(e,t,n){(n=Wi(n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Tu(r),na(e,t)},n}function da(e,t,n){(n=Wi(n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return r(o)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Oa?Oa=new Set([this]):Oa.add(this));var n=t.value,o=t.stack;na(e,t),this.componentDidCatch(n,{componentStack:null!==o?o:""})}),n}function pa(e){switch(e.tag){case 1:Dr(e.type)&&Ar();var t=e.effectTag;return 2048&t?(e.effectTag=-2049&t|64,e):null;case 3:return Eo(),Ur(),0!=(64&(t=e.effectTag))&&u("285"),e.effectTag=-2049&t|64,e;case 5:return Co(e),null;case 13:return 2048&(t=e.effectTag)?(e.effectTag=-2049&t|64,e):null;case 4:return Eo(),null;case 10:return Mi(e),null;default:return null}}var ha=$e.ReactCurrentDispatcher,ma=$e.ReactCurrentOwner,va=1073741822,ya=0,ga=!1,ba=null,wa=null,xa=0,ka=-1,Ta=!1,Sa=null,Ea=!1,_a=null,Ca=null,Pa=null,Oa=null;function Na(){if(null!==ba)for(var e=ba.return;null!==e;){var t=e;switch(t.tag){case 1:var n=t.type.childContextTypes;null!=n&&Ar();break;case 3:Eo(),Ur();break;case 5:Co(t);break;case 4:Eo();break;case 10:Mi(t)}e=e.return}wa=null,xa=0,ka=-1,Ta=!1,ba=null}function ja(e,t){Pa=Ca=_a=null;var n=Ka;Ka=!0;do{if(512&t.effectTag){var r=!1,o=void 0;try{var i=t;oa(128,0,i),oa(0,64,i)}catch(e){r=!0,o=e}r&&Aa(t,o)}t=t.nextEffect}while(null!==t);Ka=n,0!==(n=e.expirationTime)&&hu(e,n)}function Ia(){null!==Ca&&Tr(Ca),null!==Pa&&Pa()}function Ma(e){for(;;){var t=e.alternate,n=e.return,r=e.sibling;if(0==(1024&e.effectTag)){ba=e;e:{var i=t,a=xa,l=(t=e).pendingProps;switch(t.tag){case 2:case 16:break;case 15:case 0:break;case 1:Dr(t.type)&&Ar();break;case 3:Eo(),Ur(),(l=t.stateNode).pendingContext&&(l.context=l.pendingContext,l.pendingContext=null),null!==i&&null!==i.child||(di(t),t.effectTag&=-3);break;case 5:Co(t);var c=To(ko.current);if(a=t.type,null!==i&&null!=t.stateNode)Zi(i,t,a,l,c),i.ref!==t.ref&&(t.effectTag|=128);else if(l){var s=To(wo.current);if(di(t)){i=(l=t).stateNode;var f=l.type,d=l.memoizedProps,p=c;switch(i[D]=l,i[A]=d,a=void 0,c=f){case"iframe":case"object":Cn("load",i);break;case"video":case"audio":for(f=0;f<re.length;f++)Cn(re[f],i);break;case"source":Cn("error",i);break;case"img":case"image":case"link":Cn("error",i),Cn("load",i);break;case"form":Cn("reset",i),Cn("submit",i);break;case"details":Cn("toggle",i);break;case"input":kt(i,d),Cn("invalid",i),hr(p,"onChange");break;case"select":i._wrapperState={wasMultiple:!!d.multiple},Cn("invalid",i),hr(p,"onChange");break;case"textarea":Gn(i,d),Cn("invalid",i),hr(p,"onChange")}for(a in dr(c,d),f=null,d)d.hasOwnProperty(a)&&(s=d[a],"children"===a?"string"==typeof s?i.textContent!==s&&(f=["children",s]):"number"==typeof s&&i.textContent!==""+s&&(f=["children",""+s]):x.hasOwnProperty(a)&&null!=s&&hr(p,a));switch(c){case"input":Ve(i),Et(i,d,!0);break;case"textarea":Ve(i),Zn(i);break;case"select":case"option":break;default:"function"==typeof d.onClick&&(i.onclick=mr)}a=f,l.updateQueue=a,(l=null!==a)&&Gi(t)}else{d=t,i=a,p=l,f=9===c.nodeType?c:c.ownerDocument,s===er&&(s=nr(i)),s===er?"script"===i?((i=f.createElement("div")).innerHTML="<script><\/script>",f=i.removeChild(i.firstChild)):"string"==typeof p.is?f=f.createElement(i,{is:p.is}):(f=f.createElement(i),"select"===i&&p.multiple&&(f.multiple=!0)):f=f.createElementNS(s,i),(i=f)[D]=d,i[A]=l,Ji(i,t),p=i;var h=c,m=pr(f=a,d=l);switch(f){case"iframe":case"object":Cn("load",p),c=d;break;case"video":case"audio":for(c=0;c<re.length;c++)Cn(re[c],p);c=d;break;case"source":Cn("error",p),c=d;break;case"img":case"image":case"link":Cn("error",p),Cn("load",p),c=d;break;case"form":Cn("reset",p),Cn("submit",p),c=d;break;case"details":Cn("toggle",p),c=d;break;case"input":kt(p,d),c=xt(p,d),Cn("invalid",p),hr(h,"onChange");break;case"option":c=Qn(p,d);break;case"select":p._wrapperState={wasMultiple:!!d.multiple},c=o({},d,{value:void 0}),Cn("invalid",p),hr(h,"onChange");break;case"textarea":Gn(p,d),c=Xn(p,d),Cn("invalid",p),hr(h,"onChange");break;default:c=d}dr(f,c),s=void 0;var v=f,y=p,g=c;for(s in g)if(g.hasOwnProperty(s)){var b=g[s];"style"===s?sr(y,b):"dangerouslySetInnerHTML"===s?null!=(b=b?b.__html:void 0)&&ir(y,b):"children"===s?"string"==typeof b?("textarea"!==v||""!==b)&&ar(y,b):"number"==typeof b&&ar(y,""+b):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(x.hasOwnProperty(s)?null!=b&&hr(h,s):null!=b&&bt(y,s,b,m))}switch(f){case"input":Ve(p),Et(p,d,!1);break;case"textarea":Ve(p),Zn(p);break;case"option":null!=d.value&&p.setAttribute("value",""+wt(d.value));break;case"select":(c=p).multiple=!!d.multiple,null!=(p=d.value)?Yn(c,!!d.multiple,p,!1):null!=d.defaultValue&&Yn(c,!!d.multiple,d.defaultValue,!0);break;default:"function"==typeof c.onClick&&(p.onclick=mr)}(l=gr(a,l))&&Gi(t),t.stateNode=i}null!==t.ref&&(t.effectTag|=128)}else null===t.stateNode&&u("166");break;case 6:i&&null!=t.stateNode?ea(0,t,i.memoizedProps,l):("string"!=typeof l&&(null===t.stateNode&&u("166")),i=To(ko.current),To(wo.current),di(t)?(a=(l=t).stateNode,i=l.memoizedProps,a[D]=l,(l=a.nodeValue!==i)&&Gi(t)):(a=t,(l=(9===i.nodeType?i:i.ownerDocument).createTextNode(l))[D]=t,a.stateNode=l));break;case 11:break;case 13:if(l=t.memoizedState,0!=(64&t.effectTag)){t.expirationTime=a,ba=t;break e}l=null!==l,a=null!==i&&null!==i.memoizedState,null!==i&&!l&&a&&(null!==(i=i.child.sibling)&&(null!==(c=t.firstEffect)?(t.firstEffect=i,i.nextEffect=c):(t.firstEffect=t.lastEffect=i,i.nextEffect=null),i.effectTag=8)),(l||a)&&(t.effectTag|=4);break;case 7:case 8:case 12:break;case 4:Eo();break;case 10:Mi(t);break;case 9:case 14:break;case 17:Dr(t.type)&&Ar();break;default:u("156")}ba=null}if(t=e,1===xa||1!==t.childExpirationTime){for(l=0,a=t.child;null!==a;)(i=a.expirationTime)>l&&(l=i),(c=a.childExpirationTime)>l&&(l=c),a=a.sibling;t.childExpirationTime=l}if(null!==ba)return ba;null!==n&&0==(1024&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e))}else{if(null!==(e=pa(e)))return e.effectTag&=1023,e;null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=1024)}if(null!==r)return r;if(null===n)break;e=n}return null}function Ra(e){var t=Ci(e.alternate,e,xa);return e.memoizedProps=e.pendingProps,null===t&&(t=Ma(e)),ma.current=null,t}function Da(e,t){ga&&u("243"),Ia(),ga=!0;var n=ha.current;ha.current=ni;var r=e.nextExpirationTimeToWorkOn;r===xa&&e===wa&&null!==ba||(Na(),xa=r,ba=Qr((wa=e).current,null),e.pendingCommitExpirationTime=0);for(var o=!1;;){try{if(t)for(;null!==ba&&!yu();)ba=Ra(ba);else for(;null!==ba;)ba=Ra(ba)}catch(t){if(ji=Ni=Oi=null,Ho(),null===ba)o=!0,Tu(t);else{null===ba&&u("271");var i=ba,a=i.return;if(null!==a){e:{var l=e,c=a,s=i,f=t;if(a=xa,s.effectTag|=1024,s.firstEffect=s.lastEffect=null,null!==f&&"object"==typeof f&&"function"==typeof f.then){var d=f;f=c;var p=-1,h=-1;do{if(13===f.tag){var m=f.alternate;if(null!==m&&null!==(m=m.memoizedState)){h=10*(1073741822-m.timedOutAt);break}"number"==typeof(m=f.pendingProps.maxDuration)&&(0>=m?p=0:(-1===p||m<p)&&(p=m))}f=f.return}while(null!==f);f=c;do{if((m=13===f.tag)&&(m=void 0!==f.memoizedProps.fallback&&null===f.memoizedState),m){if(null===(c=f.updateQueue)?((c=new Set).add(d),f.updateQueue=c):c.add(d),0==(1&f.mode)){f.effectTag|=64,s.effectTag&=-1957,1===s.tag&&(null===s.alternate?s.tag=17:((a=Wi(1073741823)).tag=Ui,qi(s,a))),s.expirationTime=1073741823;break e}null===(s=l.pingCache)?(s=l.pingCache=new sa,c=new Set,s.set(d,c)):void 0===(c=s.get(d))&&(c=new Set,s.set(d,c)),c.has(a)||(c.add(a),s=Fa.bind(null,l,d,a),d.then(s,s)),-1===p?l=1073741823:(-1===h&&(h=10*(1073741822-no(l,a))-5e3),l=h+p),0<=l&&ka<l&&(ka=l),f.effectTag|=2048,f.expirationTime=a;break e}f=f.return}while(null!==f);f=Error((ct(s.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+st(s))}Ta=!0,f=Xi(f,s),l=c;do{switch(l.tag){case 3:l.effectTag|=2048,l.expirationTime=a,Vi(l,a=fa(l,f,a));break e;case 1:if(d=f,p=l.type,h=l.stateNode,0==(64&l.effectTag)&&("function"==typeof p.getDerivedStateFromError||null!==h&&"function"==typeof h.componentDidCatch&&(null===Oa||!Oa.has(h)))){l.effectTag|=2048,l.expirationTime=a,Vi(l,a=da(l,d,a));break e}}l=l.return}while(null!==l)}ba=Ma(i);continue}o=!0,Tu(t)}}break}if(ga=!1,ha.current=n,ji=Ni=Oi=null,Ho(),o)wa=null,e.finishedWork=null;else if(null!==ba)e.finishedWork=null;else{if(null===(n=e.current.alternate)&&u("281"),wa=null,Ta){if(o=e.latestPendingTime,i=e.latestSuspendedTime,a=e.latestPingedTime,0!==o&&o<r||0!==i&&i<r||0!==a&&a<r)return to(e,r),void fu(e,n,r,e.expirationTime,-1);if(!e.didError&&t)return e.didError=!0,r=e.nextExpirationTimeToWorkOn=r,t=e.expirationTime=1073741823,void fu(e,n,r,t,-1)}t&&-1!==ka?(to(e,r),(t=10*(1073741822-no(e,r)))<ka&&(ka=t),t=10*(1073741822-pu()),t=ka-t,fu(e,n,r,e.expirationTime,0>t?0:t)):(e.pendingCommitExpirationTime=r,e.finishedWork=n)}}function Aa(e,t){for(var n=e.return;null!==n;){switch(n.tag){case 1:var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Oa||!Oa.has(r)))return qi(n,e=da(n,e=Xi(t,e),1073741823)),void Wa(n,1073741823);break;case 3:return qi(n,e=fa(n,e=Xi(t,e),1073741823)),void Wa(n,1073741823)}n=n.return}3===e.tag&&(qi(e,n=fa(e,n=Xi(t,e),1073741823)),Wa(e,1073741823))}function Ua(e,t){return 0!==ya?e=ya:ga?e=Ea?1073741823:xa:1&t.mode?(e=tu?1073741822-10*(1+((1073741822-e+15)/10|0)):1073741822-25*(1+((1073741822-e+500)/25|0)),null!==wa&&e===xa&&--e):e=1073741823,tu&&(0===Xa||e<Xa)&&(Xa=e),e}function Fa(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),null!==wa&&xa===n?wa=null:(t=e.earliestSuspendedTime,r=e.latestSuspendedTime,0!==t&&n<=t&&n>=r&&(e.didError=!1,(0===(t=e.latestPingedTime)||t>n)&&(e.latestPingedTime=n),ro(n,e),0!==(n=e.expirationTime)&&hu(e,n)))}function za(e,t){var n=e.stateNode;null!==n&&n.delete(t),null!==(e=La(e,t=Ua(t=pu(),e)))&&(eo(e,t),0!==(t=e.expirationTime)&&hu(e,t))}function La(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,o=null;if(null===r&&3===e.tag)o=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){o=r.stateNode;break}r=r.return}return o}function Wa(e,t){null!==(e=La(e,t))&&(!ga&&0!==xa&&t>xa&&Na(),eo(e,t),ga&&!Ea&&wa===e||hu(e,e.expirationTime),uu>au&&(uu=0,u("185")))}function Ba(e,t,n,r,o){var i=ya;ya=1073741823;try{return e(t,n,r,o)}finally{ya=i}}var qa=null,Va=null,Ha=0,$a=void 0,Ka=!1,Qa=null,Ya=0,Xa=0,Ga=!1,Ja=null,Za=!1,eu=!1,tu=!1,nu=null,ru=i.unstable_now(),ou=1073741822-(ru/10|0),iu=ou,au=50,uu=0,lu=null;function cu(){ou=1073741822-((i.unstable_now()-ru)/10|0)}function su(e,t){if(0!==Ha){if(t<Ha)return;null!==$a&&i.unstable_cancelCallback($a)}Ha=t,e=i.unstable_now()-ru,$a=i.unstable_scheduleCallback(gu,{timeout:10*(1073741822-t)-e})}function fu(e,t,n,r,o){e.expirationTime=r,0!==o||yu()?0<o&&(e.timeoutHandle=wr(du.bind(null,e,t,n),o)):(e.pendingCommitExpirationTime=n,e.finishedWork=t)}function du(e,t,n){e.pendingCommitExpirationTime=n,e.finishedWork=t,cu(),iu=ou,wu(e,n)}function pu(){return Ka||(mu(),0!==Ya&&1!==Ya||(cu(),iu=ou)),iu}function hu(e,t){null===e.nextScheduledRoot?(e.expirationTime=t,null===Va?(qa=Va=e,e.nextScheduledRoot=e):(Va=Va.nextScheduledRoot=e).nextScheduledRoot=qa):t>e.expirationTime&&(e.expirationTime=t),Ka||(Za?eu&&(Qa=e,Ya=1073741823,xu(e,1073741823,!1)):1073741823===t?bu(1073741823,!1):su(e,t))}function mu(){var e=0,t=null;if(null!==Va)for(var n=Va,r=qa;null!==r;){var o=r.expirationTime;if(0===o){if((null===n||null===Va)&&u("244"),r===r.nextScheduledRoot){qa=Va=r.nextScheduledRoot=null;break}if(r===qa)qa=o=r.nextScheduledRoot,Va.nextScheduledRoot=o,r.nextScheduledRoot=null;else{if(r===Va){(Va=n).nextScheduledRoot=qa,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if(o>e&&(e=o,t=r),r===Va)break;if(1073741823===e)break;n=r,r=r.nextScheduledRoot}}Qa=t,Ya=e}var vu=!1;function yu(){return!!vu||!!i.unstable_shouldYield()&&(vu=!0)}function gu(){try{if(!yu()&&null!==qa){cu();var e=qa;do{var t=e.expirationTime;0!==t&&ou<=t&&(e.nextExpirationTimeToWorkOn=ou),e=e.nextScheduledRoot}while(e!==qa)}bu(0,!0)}finally{vu=!1}}function bu(e,t){if(mu(),t)for(cu(),iu=ou;null!==Qa&&0!==Ya&&e<=Ya&&!(vu&&ou>Ya);)xu(Qa,Ya,ou>Ya),mu(),cu(),iu=ou;else for(;null!==Qa&&0!==Ya&&e<=Ya;)xu(Qa,Ya,!1),mu();if(t&&(Ha=0,$a=null),0!==Ya&&su(Qa,Ya),uu=0,lu=null,null!==nu)for(e=nu,nu=null,t=0;t<e.length;t++){var n=e[t];try{n._onComplete()}catch(e){Ga||(Ga=!0,Ja=e)}}if(Ga)throw e=Ja,Ja=null,Ga=!1,e}function wu(e,t){Ka&&u("253"),Qa=e,Ya=t,xu(e,t,!1),bu(1073741823,!1)}function xu(e,t,n){if(Ka&&u("245"),Ka=!0,n){var r=e.finishedWork;null!==r?ku(e,r,t):(e.finishedWork=null,-1!==(r=e.timeoutHandle)&&(e.timeoutHandle=-1,xr(r)),Da(e,n),null!==(r=e.finishedWork)&&(yu()?e.finishedWork=r:ku(e,r,t)))}else null!==(r=e.finishedWork)?ku(e,r,t):(e.finishedWork=null,-1!==(r=e.timeoutHandle)&&(e.timeoutHandle=-1,xr(r)),Da(e,n),null!==(r=e.finishedWork)&&ku(e,r,t));Ka=!1}function ku(e,t,n){var r=e.firstBatch;if(null!==r&&r._expirationTime>=n&&(null===nu?nu=[r]:nu.push(r),r._defer))return e.finishedWork=t,void(e.expirationTime=0);e.finishedWork=null,e===lu?uu++:(lu=e,uu=0),Ea=ga=!0,e.current===t&&u("177"),0===(n=e.pendingCommitExpirationTime)&&u("261"),e.pendingCommitExpirationTime=0,r=t.expirationTime;var o=t.childExpirationTime;if(r=o>r?o:r,e.didError=!1,0===r?(e.earliestPendingTime=0,e.latestPendingTime=0,e.earliestSuspendedTime=0,e.latestSuspendedTime=0,e.latestPingedTime=0):(r<e.latestPingedTime&&(e.latestPingedTime=0),0!==(o=e.latestPendingTime)&&(o>r?e.earliestPendingTime=e.latestPendingTime=0:e.earliestPendingTime>r&&(e.earliestPendingTime=e.latestPendingTime)),0===(o=e.earliestSuspendedTime)?eo(e,r):r<e.latestSuspendedTime?(e.earliestSuspendedTime=0,e.latestSuspendedTime=0,e.latestPingedTime=0,eo(e,r)):r>o&&eo(e,r)),ro(0,e),ma.current=null,1<t.effectTag?null!==t.lastEffect?(t.lastEffect.nextEffect=t,r=t.firstEffect):r=t:r=t.firstEffect,vr=_n,zn(o=Fn())){if("selectionStart"in o)var i={start:o.selectionStart,end:o.selectionEnd};else e:{var a=(i=(i=o.ownerDocument)&&i.defaultView||window).getSelection&&i.getSelection();if(a&&0!==a.rangeCount){i=a.anchorNode;var l=a.anchorOffset,c=a.focusNode;a=a.focusOffset;try{i.nodeType,c.nodeType}catch(e){i=null;break e}var s=0,f=-1,d=-1,p=0,h=0,m=o,v=null;t:for(;;){for(var y;m!==i||0!==l&&3!==m.nodeType||(f=s+l),m!==c||0!==a&&3!==m.nodeType||(d=s+a),3===m.nodeType&&(s+=m.nodeValue.length),null!==(y=m.firstChild);)v=m,m=y;for(;;){if(m===o)break t;if(v===i&&++p===l&&(f=s),v===c&&++h===a&&(d=s),null!==(y=m.nextSibling))break;v=(m=v).parentNode}m=y}i=-1===f||-1===d?null:{start:f,end:d}}else i=null}i=i||{start:0,end:0}}else i=null;for(yr={focusedElem:o,selectionRange:i},_n=!1,Sa=r;null!==Sa;){o=!1,i=void 0;try{for(;null!==Sa;){if(256&Sa.effectTag)e:{var g=Sa.alternate;switch((l=Sa).tag){case 0:case 11:case 15:oa(2,0,l);break e;case 1:if(256&l.effectTag&&null!==g){var b=g.memoizedProps,w=g.memoizedState,x=l.stateNode,k=x.getSnapshotBeforeUpdate(l.elementType===l.type?b:oo(l.type,b),w);x.__reactInternalSnapshotBeforeUpdate=k}break e;case 3:case 5:case 6:case 4:case 17:break e;default:u("163")}}Sa=Sa.nextEffect}}catch(e){o=!0,i=e}o&&(null===Sa&&u("178"),Aa(Sa,i),null!==Sa&&(Sa=Sa.nextEffect))}for(Sa=r;null!==Sa;){g=!1,b=void 0;try{for(;null!==Sa;){var T=Sa.effectTag;if(16&T&&ar(Sa.stateNode,""),128&T){var S=Sa.alternate;if(null!==S){var E=S.ref;null!==E&&("function"==typeof E?E(null):E.current=null)}}switch(14&T){case 2:ua(Sa),Sa.effectTag&=-3;break;case 6:ua(Sa),Sa.effectTag&=-3,ca(Sa.alternate,Sa);break;case 4:ca(Sa.alternate,Sa);break;case 8:la(w=Sa),w.return=null,w.child=null,w.memoizedState=null,w.updateQueue=null;var _=w.alternate;null!==_&&(_.return=null,_.child=null,_.memoizedState=null,_.updateQueue=null)}Sa=Sa.nextEffect}}catch(e){g=!0,b=e}g&&(null===Sa&&u("178"),Aa(Sa,b),null!==Sa&&(Sa=Sa.nextEffect))}if(E=yr,S=Fn(),T=E.focusedElem,g=E.selectionRange,S!==T&&T&&T.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(T.ownerDocument.documentElement,T)){null!==g&&zn(T)&&(S=g.start,void 0===(E=g.end)&&(E=S),"selectionStart"in T?(T.selectionStart=S,T.selectionEnd=Math.min(E,T.value.length)):(E=(S=T.ownerDocument||document)&&S.defaultView||window).getSelection&&(E=E.getSelection(),b=T.textContent.length,_=Math.min(g.start,b),g=void 0===g.end?_:Math.min(g.end,b),!E.extend&&_>g&&(b=g,g=_,_=b),b=Un(T,_),w=Un(T,g),b&&w&&(1!==E.rangeCount||E.anchorNode!==b.node||E.anchorOffset!==b.offset||E.focusNode!==w.node||E.focusOffset!==w.offset)&&((S=S.createRange()).setStart(b.node,b.offset),E.removeAllRanges(),_>g?(E.addRange(S),E.extend(w.node,w.offset)):(S.setEnd(w.node,w.offset),E.addRange(S))))),S=[];for(E=T;E=E.parentNode;)1===E.nodeType&&S.push({element:E,left:E.scrollLeft,top:E.scrollTop});for("function"==typeof T.focus&&T.focus(),T=0;T<S.length;T++)(E=S[T]).element.scrollLeft=E.left,E.element.scrollTop=E.top}for(yr=null,_n=!!vr,vr=null,e.current=t,Sa=r;null!==Sa;){T=!1,S=void 0;try{for(E=e,_=n;null!==Sa;){var C=Sa.effectTag;if(36&C){var P=Sa.alternate;switch(b=_,(g=Sa).tag){case 0:case 11:case 15:oa(16,32,g);break;case 1:var O=g.stateNode;if(4&g.effectTag)if(null===P)O.componentDidMount();else{var N=g.elementType===g.type?P.memoizedProps:oo(g.type,P.memoizedProps);O.componentDidUpdate(N,P.memoizedState,O.__reactInternalSnapshotBeforeUpdate)}var j=g.updateQueue;null!==j&&Qi(0,j,O);break;case 3:var I=g.updateQueue;if(null!==I){if(w=null,null!==g.child)switch(g.child.tag){case 5:w=g.child.stateNode;break;case 1:w=g.child.stateNode}Qi(0,I,w)}break;case 5:var M=g.stateNode;null===P&&4&g.effectTag&&gr(g.type,g.memoizedProps)&&M.focus();break;case 6:case 4:case 12:case 13:case 17:break;default:u("163")}}if(128&C){var R=Sa.ref;if(null!==R){var D=Sa.stateNode;switch(Sa.tag){case 5:var A=D;break;default:A=D}"function"==typeof R?R(A):R.current=A}}512&C&&(_a=E),Sa=Sa.nextEffect}}catch(e){T=!0,S=e}T&&(null===Sa&&u("178"),Aa(Sa,S),null!==Sa&&(Sa=Sa.nextEffect))}null!==r&&null!==_a&&(C=ja.bind(null,e,r),Ca=kr(C),Pa=C),ga=Ea=!1,"function"==typeof Br&&Br(t.stateNode),C=t.expirationTime,0===(t=(t=t.childExpirationTime)>C?t:C)&&(Oa=null),e.expirationTime=t,e.finishedWork=null}function Tu(e){null===Qa&&u("246"),Qa.expirationTime=0,Ga||(Ga=!0,Ja=e)}function Su(e,t){var n=Za;Za=!0;try{return e(t)}finally{(Za=n)||Ka||bu(1073741823,!1)}}function Eu(e,t){if(Za&&!eu){eu=!0;try{return e(t)}finally{eu=!1}}return e(t)}function _u(e,t,n){if(tu)return e(t,n);Za||Ka||0===Xa||(bu(Xa,!1),Xa=0);var r=tu,o=Za;Za=tu=!0;try{return e(t,n)}finally{tu=r,(Za=o)||Ka||bu(1073741823,!1)}}function Cu(e,t,n,r,o){var i=t.current;e:if(n){t:{2===rn(n=n._reactInternalFiber)&&1===n.tag||u("170");var a=n;do{switch(a.tag){case 3:a=a.stateNode.context;break t;case 1:if(Dr(a.type)){a=a.stateNode.__reactInternalMemoizedMergedChildContext;break t}}a=a.return}while(null!==a);u("171"),a=void 0}if(1===n.tag){var l=n.type;if(Dr(l)){n=zr(n,l,a);break e}}n=a}else n=Nr;return null===t.context?t.context=n:t.pendingContext=n,t=o,(o=Wi(r)).payload={element:e},null!==(t=void 0===t?null:t)&&(o.callback=t),Ia(),qi(i,o),Wa(i,r),r}function Pu(e,t,n,r){var o=t.current;return Cu(e,t,n,o=Ua(pu(),o),r)}function Ou(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Nu(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:Xe,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function ju(e){var t=1073741822-25*(1+((1073741822-pu()+500)/25|0));t>=va&&(t=va-1),this._expirationTime=va=t,this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function Iu(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function Mu(e,t,n){e={current:t=$r(3,null,null,t?3:0),containerInfo:e,pendingChildren:null,pingCache:null,earliestPendingTime:0,latestPendingTime:0,earliestSuspendedTime:0,latestSuspendedTime:0,latestPingedTime:0,didError:!1,pendingCommitExpirationTime:0,finishedWork:null,timeoutHandle:-1,context:null,pendingContext:null,hydrate:n,nextExpirationTimeToWorkOn:0,expirationTime:0,firstBatch:null,nextScheduledRoot:null},this._internalRoot=t.stateNode=e}function Ru(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Du(e,t,n,r,o){var i=n._reactRootContainer;if(i){if("function"==typeof o){var a=o;o=function(){var e=Ou(i._internalRoot);a.call(e)}}null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Mu(e,!1,t)}(n,r),"function"==typeof o){var u=o;o=function(){var e=Ou(i._internalRoot);u.call(e)}}Eu((function(){null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)}))}return Ou(i._internalRoot)}function Au(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return Ru(t)||u("200"),Nu(e,t,null,n)}Pe=function(e,t,n){switch(t){case"input":if(St(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=L(r);o||u("90"),He(r),St(r,o)}}}break;case"textarea":Jn(e,n);break;case"select":null!=(t=n.value)&&Yn(e,!!n.multiple,t,!1)}},ju.prototype.render=function(e){this._defer||u("250"),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new Iu;return Cu(e,t,null,n,r._onCommit),r},ju.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},ju.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||u("251"),this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,o=t;o!==this;)r=o,o=o._next;null===r&&u("251"),r._next=o._next,this._next=t,e.firstBatch=this}this._defer=!1,wu(e,n),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},ju.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},Iu.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},Iu.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];"function"!=typeof n&&u("191",n),n()}}},Mu.prototype.render=function(e,t){var n=this._internalRoot,r=new Iu;return null!==(t=void 0===t?null:t)&&r.then(t),Pu(e,n,null,r._onCommit),r},Mu.prototype.unmount=function(e){var t=this._internalRoot,n=new Iu;return null!==(e=void 0===e?null:e)&&n.then(e),Pu(null,t,null,n._onCommit),n},Mu.prototype.legacy_renderSubtreeIntoContainer=function(e,t,n){var r=this._internalRoot,o=new Iu;return null!==(n=void 0===n?null:n)&&o.then(n),Pu(t,r,e,o._onCommit),o},Mu.prototype.createBatch=function(){var e=new ju(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime>=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e},Re=Su,De=_u,Ae=function(){Ka||0===Xa||(bu(Xa,!1),Xa=0)};var Uu,Fu,zu={createPortal:Au,findDOMNode:function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;return void 0===t&&("function"==typeof e.render?u("188"):u("268",Object.keys(e))),e=null===(e=an(t))?null:e.stateNode},hydrate:function(e,t,n){return Ru(t)||u("200"),Du(null,e,t,!0,n)},render:function(e,t,n){return Ru(t)||u("200"),Du(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){return Ru(n)||u("200"),(null==e||void 0===e._reactInternalFiber)&&u("38"),Du(e,t,n,!1,r)},unmountComponentAtNode:function(e){return Ru(e)||u("40"),!!e._reactRootContainer&&(Eu((function(){Du(null,null,e,!1,(function(){e._reactRootContainer=null}))})),!0)},unstable_createPortal:function(){return Au.apply(void 0,arguments)},unstable_batchedUpdates:Su,unstable_interactiveUpdates:_u,flushSync:function(e,t){Ka&&u("187");var n=Za;Za=!0;try{return Ba(e,t)}finally{Za=n,bu(1073741823,!1)}},unstable_createRoot:function(e,t){return Ru(e)||u("299","unstable_createRoot"),new Mu(e,!0,null!=t&&!0===t.hydrate)},unstable_flushControlled:function(e){var t=Za;Za=!0;try{Ba(e)}finally{(Za=t)||Ka||bu(1073741823,!1)}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{Events:[F,z,L,j.injectEventPluginsByName,w,$,function(e){P(e,H)},Ie,Me,Nn,M]}};Fu=(Uu={findFiberByHostInstance:U,bundleType:0,version:"16.8.0",rendererPackageName:"react-dom"}).findFiberByHostInstance,function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Br=Vr((function(e){return t.onCommitFiberRoot(n,e)})),qr=Vr((function(e){return t.onCommitFiberUnmount(n,e)}))}catch(e){}}(o({},Uu,{overrideProps:null,currentDispatcherRef:$e.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=an(e))?null:e.stateNode},findFiberByHostInstance:function(e){return Fu?Fu(e):null}}));var Lu={default:zu},Wu=Lu&&zu||Lu;e.exports=Wu.default||Wu},function(e,t,n){"use strict";e.exports=n(20)},function(e,t,n){"use strict";(function(e){
/** @license React v0.13.6
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(t,"__esModule",{value:!0});var n=null,r=!1,o=3,i=-1,a=-1,u=!1,l=!1;function c(){if(!u){var e=n.expirationTime;l?T():l=!0,k(d,e)}}function s(){var e=n,t=n.next;if(n===t)n=null;else{var r=n.previous;n=r.next=t,t.previous=r}e.next=e.previous=null,r=e.callback,t=e.expirationTime,e=e.priorityLevel;var i=o,u=a;o=e,a=t;try{var l=r()}finally{o=i,a=u}if("function"==typeof l)if(l={callback:l,priorityLevel:e,expirationTime:t,next:null,previous:null},null===n)n=l.next=l.previous=l;else{r=null,e=n;do{if(e.expirationTime>=t){r=e;break}e=e.next}while(e!==n);null===r?r=n:r===n&&(n=l,c()),(t=r.previous).next=r.previous=l,l.next=r,l.previous=t}}function f(){if(-1===i&&null!==n&&1===n.priorityLevel){u=!0;try{do{s()}while(null!==n&&1===n.priorityLevel)}finally{u=!1,null!==n?c():l=!1}}}function d(e){u=!0;var o=r;r=e;try{if(e)for(;null!==n;){var i=t.unstable_now();if(!(n.expirationTime<=i))break;do{s()}while(null!==n&&n.expirationTime<=i)}else if(null!==n)do{s()}while(null!==n&&!S())}finally{u=!1,r=o,null!==n?c():l=!1,f()}}var p,h,m=Date,v="function"==typeof setTimeout?setTimeout:void 0,y="function"==typeof clearTimeout?clearTimeout:void 0,g="function"==typeof requestAnimationFrame?requestAnimationFrame:void 0,b="function"==typeof cancelAnimationFrame?cancelAnimationFrame:void 0;function w(e){p=g((function(t){y(h),e(t)})),h=v((function(){b(p),e(t.unstable_now())}),100)}if("object"==typeof performance&&"function"==typeof performance.now){var x=performance;t.unstable_now=function(){return x.now()}}else t.unstable_now=function(){return m.now()};var k,T,S,E=null;if("undefined"!=typeof window?E=window:void 0!==e&&(E=e),E&&E._schedMock){var _=E._schedMock;k=_[0],T=_[1],S=_[2],t.unstable_now=_[3]}else if("undefined"==typeof window||"function"!=typeof MessageChannel){var C=null,P=function(e){if(null!==C)try{C(e)}finally{C=null}};k=function(e){null!==C?setTimeout(k,0,e):(C=e,setTimeout(P,0,!1))},T=function(){C=null},S=function(){return!1}}else{"undefined"!=typeof console&&("function"!=typeof g&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof b&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"));var O=null,N=!1,j=-1,I=!1,M=!1,R=0,D=33,A=33;S=function(){return R<=t.unstable_now()};var U=new MessageChannel,F=U.port2;U.port1.onmessage=function(){N=!1;var e=O,n=j;O=null,j=-1;var r=t.unstable_now(),o=!1;if(0>=R-r){if(!(-1!==n&&n<=r))return I||(I=!0,w(z)),O=e,void(j=n);o=!0}if(null!==e){M=!0;try{e(o)}finally{M=!1}}};var z=function(e){if(null!==O){w(z);var t=e-R+A;t<A&&D<A?(8>t&&(t=8),A=t<D?D:t):D=t,R=e+A,N||(N=!0,F.postMessage(void 0))}else I=!1};k=function(e,t){O=e,j=t,M||0>t?F.postMessage(void 0):I||(I=!0,w(z))},T=function(){O=null,N=!1,j=-1}}t.unstable_ImmediatePriority=1,t.unstable_UserBlockingPriority=2,t.unstable_NormalPriority=3,t.unstable_IdlePriority=5,t.unstable_LowPriority=4,t.unstable_runWithPriority=function(e,n){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var r=o,a=i;o=e,i=t.unstable_now();try{return n()}finally{o=r,i=a,f()}},t.unstable_next=function(e){switch(o){case 1:case 2:case 3:var n=3;break;default:n=o}var r=o,a=i;o=n,i=t.unstable_now();try{return e()}finally{o=r,i=a,f()}},t.unstable_scheduleCallback=function(e,r){var a=-1!==i?i:t.unstable_now();if("object"==typeof r&&null!==r&&"number"==typeof r.timeout)r=a+r.timeout;else switch(o){case 1:r=a+-1;break;case 2:r=a+250;break;case 5:r=a+1073741823;break;case 4:r=a+1e4;break;default:r=a+5e3}if(e={callback:e,priorityLevel:o,expirationTime:r,next:null,previous:null},null===n)n=e.next=e.previous=e,c();else{a=null;var u=n;do{if(u.expirationTime>r){a=u;break}u=u.next}while(u!==n);null===a?a=n:a===n&&(n=e,c()),(r=a.previous).next=a.previous=e,e.next=a,e.previous=r}return e},t.unstable_cancelCallback=function(e){var t=e.next;if(null!==t){if(t===e)n=null;else{e===n&&(n=t);var r=e.previous;r.next=t,t.previous=r}e.next=e.previous=null}},t.unstable_wrapCallback=function(e){var n=o;return function(){var r=o,a=i;o=n,i=t.unstable_now();try{return e.apply(this,arguments)}finally{o=r,i=a,f()}}},t.unstable_getCurrentPriorityLevel=function(){return o},t.unstable_shouldYield=function(){return!r&&(null!==n&&n.expirationTime<a||S())},t.unstable_continueExecution=function(){null!==n&&c()},t.unstable_pauseExecution=function(){},t.unstable_getFirstCallbackNode=function(){return n}}).call(this,n(2))},function(e,t,n){var r=n(7),o=n(22);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var i={insert:"head",singleton:!1};r(o,i);e.exports=o.locals||{}},function(e,t,n){(t=n(8)(!1)).push([e.i,'html,\nbody,\ndiv,\nspan,\napplet,\nobject,\niframe,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\np,\nblockquote,\npre,\na,\nabbr,\nacronym,\naddress,\nbig,\ncite,\ncode,\ndel,\ndfn,\nem,\nimg,\nins,\nkbd,\nq,\ns,\nsamp,\nsmall,\nstrike,\nstrong,\nsub,\nsup,\ntt,\nb,\nu,\ni,\ncenter,\ndl,\ndt,\ndd,\nol,\nul,\nli,\nfieldset,\nform,\nlabel,\nlegend,\ntable,\ncaption,\ntbody,\ntfoot,\nthead,\ntr,\nth,\ntd,\narticle,\naside,\ncanvas,\ndetails,\nembed,\nfigure,\nfigcaption,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\noutput,\nruby,\nsection,\nsummary,\ntime,\nmark,\naudio,\nvideo {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n\n/* HTML5 display-role reset for older browsers */\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\nsection {\n  display: block;\n}\n\nbody {\n  line-height: 1;\n}\n\nol,\nul {\n  list-style: none;\n}\n\nblockquote,\nq {\n  quotes: none;\n}\n\nblockquote:before,\nblockquote:after,\nq:before,\nq:after {\n  content: "";\n  content: none;\n}\n\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n',""]),e.exports=t},function(e,t,n){var r=n(7),o=n(24);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var i={insert:"head",singleton:!1};r(o,i);e.exports=o.locals||{}},function(e,t,n){(t=n(8)(!1)).push([e.i,"body {\n  font-family: Roboto Slab;\n  background: linear-gradient(-150deg, #24c7f9, #07b0e3);\n}\n\nh1 {\n  padding: 0;\n  margin-bottom: 20px;\n  font-size: 40px;\n  font-weight: bold;\n  line-height: 1;\n}\n\n.wrap {\n  font-size: 200%;\n  padding: 50px;\n  margin: 50px auto;\n  border-radius: 5px;\n  background: #fefefe;\n  width: 80%;\n  text-align: center;\n  box-shadow: 0 0 10px rgba(6, 157, 203, 0.5);\n}\n\n.input {\n  padding: 0 10px 0 36px;\n  height: 45px;\n  margin-right: 20px;\n  width: 25%;\n  font-size: 16px;\n  color: #737373;\n  background-color: #fff;\n  background-clip: padding-box;\n  border: 1px solid #3883fa;\n  border-radius: 5px;\n  transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n}\n\n.button {\n  color: #fff7f7;\n  font-size: 16px;\n  border-radius: 8px;\n  cursor: pointer;\n  background: #3dbd4f;\n  padding: 9px 5px;\n  transition: transform 60ms ease-out;\n  margin: 0 10px;\n  width: 140px;\n  border: 2px solid transparent;\n  font-size: 20px;\n}\n\ninput:focus {\n  outline: #fff;\n}\n\n.deleteBtn {\n  background-color: #e15555;\n}\n\n.editBtn {\n  background-color: #3883fa;\n}\n\n.toDolist {\n  margin-top: 30px;\n}\n\n.toDolistItem {\n  display: flex;\n  align-items: center;\n  color: #fff;\n  background-color: #24c7f9;\n  border-color: #b8daff;\n  text-align: left;\n  padding: 12px 20px;\n  margin-bottom: 16px;\n  border: 1px solid transparent;\n  border-radius: 4px;\n}\n\n.toDolistText {\n  flex-grow: 1;\n}\n",""]),e.exports=t},function(e,t,n){"use strict";var r=n(26),o=n(27),i=n(28);e.exports=function(){function e(e,t,n,r,a,u){u!==i&&o(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return n.checkPropTypes=r,n.PropTypes=n,n}},function(e,t,n){"use strict";function r(e){return function(){return e}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},e.exports=o},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o,i,a,u){if(!e){var l;if(void 0===t)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,r,o,i,a,u],s=0;(l=new Error(t.replace(/%s/g,(function(){return c[s++]})))).name="Invariant Violation"}throw l.framesToPop=1,l}}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){"use strict";(function(e,r,o){Object.defineProperty(t,"__esModule",{value:!0});var i=n(1),a=n(10),u=n(9),l=s(n(33)),c=s(n(34));function s(e){return e&&e.__esModule?e:{default:e}}var f=function(t){var n=t.todos,o=t.addItem,a=t.editItem,u=t.setEdit,s=t.deleteItem,f=(0,i.useRef)();return e.createElement("div",{className:"wrap"},e.createElement("h1",null,"React-Redux TODO App"),e.createElement(c.default,{addItem:function(e){return o(e)}}),e.createElement("ul",{className:"toDolist"},n.length?r.map(n,(function(t,n){return e.createElement("li",{className:"toDolistItem",key:n},t.isEdit?e.createElement("div",{className:"toDolistText"},e.createElement(l.default,{refs:f,value:t.text}),e.createElement("button",{className:"button",onClick:function(){return a({key:n,text:f.current.value})}},"submit")):e.createElement("span",{className:"toDolistText"},n+1,")",t.text),e.createElement("button",{onClick:function(){return u(n)},className:"button editBtn"},"Edit"),e.createElement("button",{onClick:function(){return s(n)},className:"button deleteBtn"},"Delete"))})):e.createElement("p",null,"no items added.")))};f.defaultProps={todos:[],addItem:function(){},editItem:function(){},deleteItem:function(){},setEdit:function(){}},f.propTypes={addItem:o.func,editItem:o.func,deleteItem:o.func,setEdit:o.func,todos:o.arrayOf(o.object)};t.default=(0,a.connect)((function(e){return{todos:e.ToDoItem}}),(function(e){return{addItem:function(t){e((0,u.addTodo)(t))},editItem:function(t){e((0,u.editItem)(t)),e((0,u.setEdit)())},deleteItem:function(t){e((0,u.deleteItem)(t))},setEdit:function(t){e((0,u.setEdit)(t))}}}))(f)}).call(this,n(1),n(31),n(0))},function(e,t,n){(function(e,n){var r;!function(){var o="object"==typeof self&&self.self===self&&self||"object"==typeof e&&e.global===e&&e||this||{},i=o._,a=Array.prototype,u=Object.prototype,l="undefined"!=typeof Symbol?Symbol.prototype:null,c=a.push,s=a.slice,f=u.toString,d=u.hasOwnProperty,p=Array.isArray,h=Object.keys,m=Object.create,v=function(){},y=function(e){return e instanceof y?e:this instanceof y?void(this._wrapped=e):new y(e)};t.nodeType?o._=y:(!n.nodeType&&n.exports&&(t=n.exports=y),t._=y),y.VERSION="1.9.0";var g,b=function(e,t,n){if(void 0===t)return e;switch(null==n?3:n){case 1:return function(n){return e.call(t,n)};case 3:return function(n,r,o){return e.call(t,n,r,o)};case 4:return function(n,r,o,i){return e.call(t,n,r,o,i)}}return function(){return e.apply(t,arguments)}},w=function(e,t,n){return y.iteratee!==g?y.iteratee(e,t):null==e?y.identity:y.isFunction(e)?b(e,t,n):y.isObject(e)&&!y.isArray(e)?y.matcher(e):y.property(e)};y.iteratee=g=function(e,t){return w(e,t,1/0)};var x=function(e,t){return t=null==t?e.length-1:+t,function(){for(var n=Math.max(arguments.length-t,0),r=Array(n),o=0;o<n;o++)r[o]=arguments[o+t];switch(t){case 0:return e.call(this,r);case 1:return e.call(this,arguments[0],r);case 2:return e.call(this,arguments[0],arguments[1],r)}var i=Array(t+1);for(o=0;o<t;o++)i[o]=arguments[o];return i[t]=r,e.apply(this,i)}},k=function(e){if(!y.isObject(e))return{};if(m)return m(e);v.prototype=e;var t=new v;return v.prototype=null,t},T=function(e){return function(t){return null==t?void 0:t[e]}},S=function(e,t){for(var n=t.length,r=0;r<n;r++){if(null==e)return;e=e[t[r]]}return n?e:void 0},E=Math.pow(2,53)-1,_=T("length"),C=function(e){var t=_(e);return"number"==typeof t&&t>=0&&t<=E};y.each=y.forEach=function(e,t,n){var r,o;if(t=b(t,n),C(e))for(r=0,o=e.length;r<o;r++)t(e[r],r,e);else{var i=y.keys(e);for(r=0,o=i.length;r<o;r++)t(e[i[r]],i[r],e)}return e},y.map=y.collect=function(e,t,n){t=w(t,n);for(var r=!C(e)&&y.keys(e),o=(r||e).length,i=Array(o),a=0;a<o;a++){var u=r?r[a]:a;i[a]=t(e[u],u,e)}return i};var P=function(e){var t=function(t,n,r,o){var i=!C(t)&&y.keys(t),a=(i||t).length,u=e>0?0:a-1;for(o||(r=t[i?i[u]:u],u+=e);u>=0&&u<a;u+=e){var l=i?i[u]:u;r=n(r,t[l],l,t)}return r};return function(e,n,r,o){var i=arguments.length>=3;return t(e,b(n,o,4),r,i)}};y.reduce=y.foldl=y.inject=P(1),y.reduceRight=y.foldr=P(-1),y.find=y.detect=function(e,t,n){var r=(C(e)?y.findIndex:y.findKey)(e,t,n);if(void 0!==r&&-1!==r)return e[r]},y.filter=y.select=function(e,t,n){var r=[];return t=w(t,n),y.each(e,(function(e,n,o){t(e,n,o)&&r.push(e)})),r},y.reject=function(e,t,n){return y.filter(e,y.negate(w(t)),n)},y.every=y.all=function(e,t,n){t=w(t,n);for(var r=!C(e)&&y.keys(e),o=(r||e).length,i=0;i<o;i++){var a=r?r[i]:i;if(!t(e[a],a,e))return!1}return!0},y.some=y.any=function(e,t,n){t=w(t,n);for(var r=!C(e)&&y.keys(e),o=(r||e).length,i=0;i<o;i++){var a=r?r[i]:i;if(t(e[a],a,e))return!0}return!1},y.contains=y.includes=y.include=function(e,t,n,r){return C(e)||(e=y.values(e)),("number"!=typeof n||r)&&(n=0),y.indexOf(e,t,n)>=0},y.invoke=x((function(e,t,n){var r,o;return y.isFunction(t)?o=t:y.isArray(t)&&(r=t.slice(0,-1),t=t[t.length-1]),y.map(e,(function(e){var i=o;if(!i){if(r&&r.length&&(e=S(e,r)),null==e)return;i=e[t]}return null==i?i:i.apply(e,n)}))})),y.pluck=function(e,t){return y.map(e,y.property(t))},y.where=function(e,t){return y.filter(e,y.matcher(t))},y.findWhere=function(e,t){return y.find(e,y.matcher(t))},y.max=function(e,t,n){var r,o,i=-1/0,a=-1/0;if(null==t||"number"==typeof t&&"object"!=typeof e[0]&&null!=e)for(var u=0,l=(e=C(e)?e:y.values(e)).length;u<l;u++)null!=(r=e[u])&&r>i&&(i=r);else t=w(t,n),y.each(e,(function(e,n,r){((o=t(e,n,r))>a||o===-1/0&&i===-1/0)&&(i=e,a=o)}));return i},y.min=function(e,t,n){var r,o,i=1/0,a=1/0;if(null==t||"number"==typeof t&&"object"!=typeof e[0]&&null!=e)for(var u=0,l=(e=C(e)?e:y.values(e)).length;u<l;u++)null!=(r=e[u])&&r<i&&(i=r);else t=w(t,n),y.each(e,(function(e,n,r){((o=t(e,n,r))<a||o===1/0&&i===1/0)&&(i=e,a=o)}));return i},y.shuffle=function(e){return y.sample(e,1/0)},y.sample=function(e,t,n){if(null==t||n)return C(e)||(e=y.values(e)),e[y.random(e.length-1)];var r=C(e)?y.clone(e):y.values(e),o=_(r);t=Math.max(Math.min(t,o),0);for(var i=o-1,a=0;a<t;a++){var u=y.random(a,i),l=r[a];r[a]=r[u],r[u]=l}return r.slice(0,t)},y.sortBy=function(e,t,n){var r=0;return t=w(t,n),y.pluck(y.map(e,(function(e,n,o){return{value:e,index:r++,criteria:t(e,n,o)}})).sort((function(e,t){var n=e.criteria,r=t.criteria;if(n!==r){if(n>r||void 0===n)return 1;if(n<r||void 0===r)return-1}return e.index-t.index})),"value")};var O=function(e,t){return function(n,r,o){var i=t?[[],[]]:{};return r=w(r,o),y.each(n,(function(t,o){var a=r(t,o,n);e(i,t,a)})),i}};y.groupBy=O((function(e,t,n){y.has(e,n)?e[n].push(t):e[n]=[t]})),y.indexBy=O((function(e,t,n){e[n]=t})),y.countBy=O((function(e,t,n){y.has(e,n)?e[n]++:e[n]=1}));var N=/[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;y.toArray=function(e){return e?y.isArray(e)?s.call(e):y.isString(e)?e.match(N):C(e)?y.map(e,y.identity):y.values(e):[]},y.size=function(e){return null==e?0:C(e)?e.length:y.keys(e).length},y.partition=O((function(e,t,n){e[n?0:1].push(t)}),!0),y.first=y.head=y.take=function(e,t,n){if(!(null==e||e.length<1))return null==t||n?e[0]:y.initial(e,e.length-t)},y.initial=function(e,t,n){return s.call(e,0,Math.max(0,e.length-(null==t||n?1:t)))},y.last=function(e,t,n){if(!(null==e||e.length<1))return null==t||n?e[e.length-1]:y.rest(e,Math.max(0,e.length-t))},y.rest=y.tail=y.drop=function(e,t,n){return s.call(e,null==t||n?1:t)},y.compact=function(e){return y.filter(e,Boolean)};var j=function(e,t,n,r){for(var o=(r=r||[]).length,i=0,a=_(e);i<a;i++){var u=e[i];if(C(u)&&(y.isArray(u)||y.isArguments(u)))if(t)for(var l=0,c=u.length;l<c;)r[o++]=u[l++];else j(u,t,n,r),o=r.length;else n||(r[o++]=u)}return r};y.flatten=function(e,t){return j(e,t,!1)},y.without=x((function(e,t){return y.difference(e,t)})),y.uniq=y.unique=function(e,t,n,r){y.isBoolean(t)||(r=n,n=t,t=!1),null!=n&&(n=w(n,r));for(var o=[],i=[],a=0,u=_(e);a<u;a++){var l=e[a],c=n?n(l,a,e):l;t&&!n?(a&&i===c||o.push(l),i=c):n?y.contains(i,c)||(i.push(c),o.push(l)):y.contains(o,l)||o.push(l)}return o},y.union=x((function(e){return y.uniq(j(e,!0,!0))})),y.intersection=function(e){for(var t=[],n=arguments.length,r=0,o=_(e);r<o;r++){var i=e[r];if(!y.contains(t,i)){var a;for(a=1;a<n&&y.contains(arguments[a],i);a++);a===n&&t.push(i)}}return t},y.difference=x((function(e,t){return t=j(t,!0,!0),y.filter(e,(function(e){return!y.contains(t,e)}))})),y.unzip=function(e){for(var t=e&&y.max(e,_).length||0,n=Array(t),r=0;r<t;r++)n[r]=y.pluck(e,r);return n},y.zip=x(y.unzip),y.object=function(e,t){for(var n={},r=0,o=_(e);r<o;r++)t?n[e[r]]=t[r]:n[e[r][0]]=e[r][1];return n};var I=function(e){return function(t,n,r){n=w(n,r);for(var o=_(t),i=e>0?0:o-1;i>=0&&i<o;i+=e)if(n(t[i],i,t))return i;return-1}};y.findIndex=I(1),y.findLastIndex=I(-1),y.sortedIndex=function(e,t,n,r){for(var o=(n=w(n,r,1))(t),i=0,a=_(e);i<a;){var u=Math.floor((i+a)/2);n(e[u])<o?i=u+1:a=u}return i};var M=function(e,t,n){return function(r,o,i){var a=0,u=_(r);if("number"==typeof i)e>0?a=i>=0?i:Math.max(i+u,a):u=i>=0?Math.min(i+1,u):i+u+1;else if(n&&i&&u)return r[i=n(r,o)]===o?i:-1;if(o!=o)return(i=t(s.call(r,a,u),y.isNaN))>=0?i+a:-1;for(i=e>0?a:u-1;i>=0&&i<u;i+=e)if(r[i]===o)return i;return-1}};y.indexOf=M(1,y.findIndex,y.sortedIndex),y.lastIndexOf=M(-1,y.findLastIndex),y.range=function(e,t,n){null==t&&(t=e||0,e=0),n||(n=t<e?-1:1);for(var r=Math.max(Math.ceil((t-e)/n),0),o=Array(r),i=0;i<r;i++,e+=n)o[i]=e;return o},y.chunk=function(e,t){if(null==t||t<1)return[];for(var n=[],r=0,o=e.length;r<o;)n.push(s.call(e,r,r+=t));return n};var R=function(e,t,n,r,o){if(!(r instanceof t))return e.apply(n,o);var i=k(e.prototype),a=e.apply(i,o);return y.isObject(a)?a:i};y.bind=x((function(e,t,n){if(!y.isFunction(e))throw new TypeError("Bind must be called on a function");var r=x((function(o){return R(e,r,t,this,n.concat(o))}));return r})),y.partial=x((function(e,t){var n=y.partial.placeholder,r=function(){for(var o=0,i=t.length,a=Array(i),u=0;u<i;u++)a[u]=t[u]===n?arguments[o++]:t[u];for(;o<arguments.length;)a.push(arguments[o++]);return R(e,r,this,this,a)};return r})),y.partial.placeholder=y,y.bindAll=x((function(e,t){var n=(t=j(t,!1,!1)).length;if(n<1)throw new Error("bindAll must be passed function names");for(;n--;){var r=t[n];e[r]=y.bind(e[r],e)}})),y.memoize=function(e,t){var n=function(r){var o=n.cache,i=""+(t?t.apply(this,arguments):r);return y.has(o,i)||(o[i]=e.apply(this,arguments)),o[i]};return n.cache={},n},y.delay=x((function(e,t,n){return setTimeout((function(){return e.apply(null,n)}),t)})),y.defer=y.partial(y.delay,y,1),y.throttle=function(e,t,n){var r,o,i,a,u=0;n||(n={});var l=function(){u=!1===n.leading?0:y.now(),r=null,a=e.apply(o,i),r||(o=i=null)},c=function(){var c=y.now();u||!1!==n.leading||(u=c);var s=t-(c-u);return o=this,i=arguments,s<=0||s>t?(r&&(clearTimeout(r),r=null),u=c,a=e.apply(o,i),r||(o=i=null)):r||!1===n.trailing||(r=setTimeout(l,s)),a};return c.cancel=function(){clearTimeout(r),u=0,r=o=i=null},c},y.debounce=function(e,t,n){var r,o,i=function(t,n){r=null,n&&(o=e.apply(t,n))},a=x((function(a){if(r&&clearTimeout(r),n){var u=!r;r=setTimeout(i,t),u&&(o=e.apply(this,a))}else r=y.delay(i,t,this,a);return o}));return a.cancel=function(){clearTimeout(r),r=null},a},y.wrap=function(e,t){return y.partial(t,e)},y.negate=function(e){return function(){return!e.apply(this,arguments)}},y.compose=function(){var e=arguments,t=e.length-1;return function(){for(var n=t,r=e[t].apply(this,arguments);n--;)r=e[n].call(this,r);return r}},y.after=function(e,t){return function(){if(--e<1)return t.apply(this,arguments)}},y.before=function(e,t){var n;return function(){return--e>0&&(n=t.apply(this,arguments)),e<=1&&(t=null),n}},y.once=y.partial(y.before,2),y.restArguments=x;var D=!{toString:null}.propertyIsEnumerable("toString"),A=["valueOf","isPrototypeOf","toString","propertyIsEnumerable","hasOwnProperty","toLocaleString"],U=function(e,t){var n=A.length,r=e.constructor,o=y.isFunction(r)&&r.prototype||u,i="constructor";for(y.has(e,i)&&!y.contains(t,i)&&t.push(i);n--;)(i=A[n])in e&&e[i]!==o[i]&&!y.contains(t,i)&&t.push(i)};y.keys=function(e){if(!y.isObject(e))return[];if(h)return h(e);var t=[];for(var n in e)y.has(e,n)&&t.push(n);return D&&U(e,t),t},y.allKeys=function(e){if(!y.isObject(e))return[];var t=[];for(var n in e)t.push(n);return D&&U(e,t),t},y.values=function(e){for(var t=y.keys(e),n=t.length,r=Array(n),o=0;o<n;o++)r[o]=e[t[o]];return r},y.mapObject=function(e,t,n){t=w(t,n);for(var r=y.keys(e),o=r.length,i={},a=0;a<o;a++){var u=r[a];i[u]=t(e[u],u,e)}return i},y.pairs=function(e){for(var t=y.keys(e),n=t.length,r=Array(n),o=0;o<n;o++)r[o]=[t[o],e[t[o]]];return r},y.invert=function(e){for(var t={},n=y.keys(e),r=0,o=n.length;r<o;r++)t[e[n[r]]]=n[r];return t},y.functions=y.methods=function(e){var t=[];for(var n in e)y.isFunction(e[n])&&t.push(n);return t.sort()};var F=function(e,t){return function(n){var r=arguments.length;if(t&&(n=Object(n)),r<2||null==n)return n;for(var o=1;o<r;o++)for(var i=arguments[o],a=e(i),u=a.length,l=0;l<u;l++){var c=a[l];t&&void 0!==n[c]||(n[c]=i[c])}return n}};y.extend=F(y.allKeys),y.extendOwn=y.assign=F(y.keys),y.findKey=function(e,t,n){t=w(t,n);for(var r,o=y.keys(e),i=0,a=o.length;i<a;i++)if(t(e[r=o[i]],r,e))return r};var z,L,W=function(e,t,n){return t in n};y.pick=x((function(e,t){var n={},r=t[0];if(null==e)return n;y.isFunction(r)?(t.length>1&&(r=b(r,t[1])),t=y.allKeys(e)):(r=W,t=j(t,!1,!1),e=Object(e));for(var o=0,i=t.length;o<i;o++){var a=t[o],u=e[a];r(u,a,e)&&(n[a]=u)}return n})),y.omit=x((function(e,t){var n,r=t[0];return y.isFunction(r)?(r=y.negate(r),t.length>1&&(n=t[1])):(t=y.map(j(t,!1,!1),String),r=function(e,n){return!y.contains(t,n)}),y.pick(e,r,n)})),y.defaults=F(y.allKeys,!0),y.create=function(e,t){var n=k(e);return t&&y.extendOwn(n,t),n},y.clone=function(e){return y.isObject(e)?y.isArray(e)?e.slice():y.extend({},e):e},y.tap=function(e,t){return t(e),e},y.isMatch=function(e,t){var n=y.keys(t),r=n.length;if(null==e)return!r;for(var o=Object(e),i=0;i<r;i++){var a=n[i];if(t[a]!==o[a]||!(a in o))return!1}return!0},z=function(e,t,n,r){if(e===t)return 0!==e||1/e==1/t;if(null==e||null==t)return!1;if(e!=e)return t!=t;var o=typeof e;return("function"===o||"object"===o||"object"==typeof t)&&L(e,t,n,r)},L=function(e,t,n,r){e instanceof y&&(e=e._wrapped),t instanceof y&&(t=t._wrapped);var o=f.call(e);if(o!==f.call(t))return!1;switch(o){case"[object RegExp]":case"[object String]":return""+e==""+t;case"[object Number]":return+e!=+e?+t!=+t:0==+e?1/+e==1/t:+e==+t;case"[object Date]":case"[object Boolean]":return+e==+t;case"[object Symbol]":return l.valueOf.call(e)===l.valueOf.call(t)}var i="[object Array]"===o;if(!i){if("object"!=typeof e||"object"!=typeof t)return!1;var a=e.constructor,u=t.constructor;if(a!==u&&!(y.isFunction(a)&&a instanceof a&&y.isFunction(u)&&u instanceof u)&&"constructor"in e&&"constructor"in t)return!1}r=r||[];for(var c=(n=n||[]).length;c--;)if(n[c]===e)return r[c]===t;if(n.push(e),r.push(t),i){if((c=e.length)!==t.length)return!1;for(;c--;)if(!z(e[c],t[c],n,r))return!1}else{var s,d=y.keys(e);if(c=d.length,y.keys(t).length!==c)return!1;for(;c--;)if(s=d[c],!y.has(t,s)||!z(e[s],t[s],n,r))return!1}return n.pop(),r.pop(),!0},y.isEqual=function(e,t){return z(e,t)},y.isEmpty=function(e){return null==e||(C(e)&&(y.isArray(e)||y.isString(e)||y.isArguments(e))?0===e.length:0===y.keys(e).length)},y.isElement=function(e){return!(!e||1!==e.nodeType)},y.isArray=p||function(e){return"[object Array]"===f.call(e)},y.isObject=function(e){var t=typeof e;return"function"===t||"object"===t&&!!e},y.each(["Arguments","Function","String","Number","Date","RegExp","Error","Symbol","Map","WeakMap","Set","WeakSet"],(function(e){y["is"+e]=function(t){return f.call(t)==="[object "+e+"]"}})),y.isArguments(arguments)||(y.isArguments=function(e){return y.has(e,"callee")});var B=o.document&&o.document.childNodes;"object"!=typeof Int8Array&&"function"!=typeof B&&(y.isFunction=function(e){return"function"==typeof e||!1}),y.isFinite=function(e){return!y.isSymbol(e)&&isFinite(e)&&!isNaN(parseFloat(e))},y.isNaN=function(e){return y.isNumber(e)&&isNaN(e)},y.isBoolean=function(e){return!0===e||!1===e||"[object Boolean]"===f.call(e)},y.isNull=function(e){return null===e},y.isUndefined=function(e){return void 0===e},y.has=function(e,t){if(!y.isArray(t))return null!=e&&d.call(e,t);for(var n=t.length,r=0;r<n;r++){var o=t[r];if(null==e||!d.call(e,o))return!1;e=e[o]}return!!n},y.noConflict=function(){return o._=i,this},y.identity=function(e){return e},y.constant=function(e){return function(){return e}},y.noop=function(){},y.property=function(e){return y.isArray(e)?function(t){return S(t,e)}:T(e)},y.propertyOf=function(e){return null==e?function(){}:function(t){return y.isArray(t)?S(e,t):e[t]}},y.matcher=y.matches=function(e){return e=y.extendOwn({},e),function(t){return y.isMatch(t,e)}},y.times=function(e,t,n){var r=Array(Math.max(0,e));t=b(t,n,1);for(var o=0;o<e;o++)r[o]=t(o);return r},y.random=function(e,t){return null==t&&(t=e,e=0),e+Math.floor(Math.random()*(t-e+1))},y.now=Date.now||function(){return(new Date).getTime()};var q={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},V=y.invert(q),H=function(e){var t=function(t){return e[t]},n="(?:"+y.keys(e).join("|")+")",r=RegExp(n),o=RegExp(n,"g");return function(e){return e=null==e?"":""+e,r.test(e)?e.replace(o,t):e}};y.escape=H(q),y.unescape=H(V),y.result=function(e,t,n){y.isArray(t)||(t=[t]);var r=t.length;if(!r)return y.isFunction(n)?n.call(e):n;for(var o=0;o<r;o++){var i=null==e?void 0:e[t[o]];void 0===i&&(i=n,o=r),e=y.isFunction(i)?i.call(e):i}return e};var $=0;y.uniqueId=function(e){var t=++$+"";return e?e+t:t},y.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g};var K=/(.)^/,Q={"'":"'","\\":"\\","\r":"r","\n":"n","\u2028":"u2028","\u2029":"u2029"},Y=/\\|'|\r|\n|\u2028|\u2029/g,X=function(e){return"\\"+Q[e]};y.template=function(e,t,n){!t&&n&&(t=n),t=y.defaults({},t,y.templateSettings);var r,o=RegExp([(t.escape||K).source,(t.interpolate||K).source,(t.evaluate||K).source].join("|")+"|$","g"),i=0,a="__p+='";e.replace(o,(function(t,n,r,o,u){return a+=e.slice(i,u).replace(Y,X),i=u+t.length,n?a+="'+\n((__t=("+n+"))==null?'':_.escape(__t))+\n'":r?a+="'+\n((__t=("+r+"))==null?'':__t)+\n'":o&&(a+="';\n"+o+"\n__p+='"),t})),a+="';\n",t.variable||(a="with(obj||{}){\n"+a+"}\n"),a="var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n"+a+"return __p;\n";try{r=new Function(t.variable||"obj","_",a)}catch(e){throw e.source=a,e}var u=function(e){return r.call(this,e,y)},l=t.variable||"obj";return u.source="function("+l+"){\n"+a+"}",u},y.chain=function(e){var t=y(e);return t._chain=!0,t};var G=function(e,t){return e._chain?y(t).chain():t};y.mixin=function(e){return y.each(y.functions(e),(function(t){var n=y[t]=e[t];y.prototype[t]=function(){var e=[this._wrapped];return c.apply(e,arguments),G(this,n.apply(y,e))}})),y},y.mixin(y),y.each(["pop","push","reverse","shift","sort","splice","unshift"],(function(e){var t=a[e];y.prototype[e]=function(){var n=this._wrapped;return t.apply(n,arguments),"shift"!==e&&"splice"!==e||0!==n.length||delete n[0],G(this,n)}})),y.each(["concat","join","slice"],(function(e){var t=a[e];y.prototype[e]=function(){return G(this,t.apply(this._wrapped,arguments))}})),y.prototype.value=function(){return this._wrapped},y.prototype.valueOf=y.prototype.toJSON=y.prototype.value,y.prototype.toString=function(){return String(this._wrapped)},void 0===(r=function(){return y}.apply(t,[]))||(n.exports=r)}()}).call(this,n(2),n(32)(e))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},i=n(1),a=(r=i)&&r.__esModule?r:{default:r};t.default=function(e){var t=e.refs,n=e.value,r=(0,i.useState)(n),u=o(r,2),l=u[0],c=u[1];return a.default.createElement("input",{className:"input",ref:t,value:l,onChange:function(e){return c(e.target.value)}})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},i=n(1),a=(r=i)&&r.__esModule?r:{default:r};t.default=function(e){var t=e.addItem,n=(0,i.useState)(""),r=o(n,2),u=r[0],l=r[1];return a.default.createElement("form",{onSubmit:function(e){return function(e){e.preventDefault(),""!==u&&(t(u),l(""))}(e)}},a.default.createElement("input",{className:"input",placeholder:"Enter your task",onChange:function(e){return l(e.target.value)},value:u}),a.default.createElement("button",{className:"button",type:"submit"},"Add Item"))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(3),i=n(36),a=(r=i)&&r.__esModule?r:{default:r};t.default=(0,o.combineReducers)({ToDoItem:a.default})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(9);function o(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}var i=[{text:"ss"}];t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:i,t=arguments[1];switch(t.type){case r.ADD_TODO:return[].concat(o(e),[{text:t.text}]);case r.SET_EDIT:return[].concat(o(e)).map((function(e,n){return e.isEdit=n===t.editKey,e}));case r.EDIT_ITEM:return[].concat(o(e)).map((function(e,n){return n===t.updatedItem.key&&(e.text=t.updatedItem.text,e.isEdit=!1),e}));case r.DELETE_ITEM:return[].concat(o(e.filter((function(e,n){return n!==t.deleteKey}))));default:return e}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4L2VzL3JlZHV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbnZhcmlhbnQvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3ltYm9sLW9ic2VydmFibGUvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FjdGlvbnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL1Byb3BUeXBlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29tcG9uZW50cy9Qcm92aWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvU3Vic2NyaXB0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb21wb25lbnRzL2Nvbm5lY3RBZHZhbmNlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvc2hhbGxvd0VxdWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3Jvb3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fU3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2dldFJhd1RhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19vYmplY3RUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlR2V0VGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX292ZXJBcmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZ2V0UHJvdG90eXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNPYmplY3RMaWtlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNQbGFpbk9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC93cmFwTWFwVG9Qcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9tYXBEaXNwYXRjaFRvUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvbWFwU3RhdGVUb1Byb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L21lcmdlUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3Qvc2VsZWN0b3JGYWN0b3J5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L2Nvbm5lY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2ZyZWVHbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL3BvbnlmaWxsLmpzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL3NyYy9zdHlsZXNoZWV0L3Jlc2V0LmNzcz84NTdlIiwid2VicGFjazovLy8uL3NyYy9zdHlsZXNoZWV0L3Jlc2V0LmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3R5bGVzaGVldC9zdHlsZS5jc3M/NDc2NCIsIndlYnBhY2s6Ly8vLi9zcmMvc3R5bGVzaGVldC9zdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9lbXB0eUZ1bmN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9pbnZhcmlhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9oYXJtb255LW1vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9BZGRUb2RvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL3VuZGVyc2NvcmUuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL21vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9JbnB1dC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9BZGRGb3JtLmpzIiwid2VicGFjazovLy8uL3NyYy9yZWR1Y2Vycy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcmVkdWNlcnMvdG9kb1JlZHVjZXIuanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJnIiwidGhpcyIsIkZ1bmN0aW9uIiwiZSIsIndpbmRvdyIsIkFjdGlvblR5cGVzIiwiSU5JVCIsIk1hdGgiLCJyYW5kb20iLCJ0b1N0cmluZyIsInN1YnN0cmluZyIsInNwbGl0Iiwiam9pbiIsIlJFUExBQ0UiLCJfdHlwZW9mIiwiaXRlcmF0b3IiLCJvYmoiLCJjb25zdHJ1Y3RvciIsIl9leHRlbmRzIiwiYXNzaWduIiwidGFyZ2V0IiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwiaXNQbGFpbk9iamVjdCIsInByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJjcmVhdGVTdG9yZSIsInJlZHVjZXIiLCJwcmVsb2FkZWRTdGF0ZSIsImVuaGFuY2VyIiwiX3JlZjIiLCJ1bmRlZmluZWQiLCJFcnJvciIsImN1cnJlbnRSZWR1Y2VyIiwiY3VycmVudFN0YXRlIiwiY3VycmVudExpc3RlbmVycyIsIm5leHRMaXN0ZW5lcnMiLCJpc0Rpc3BhdGNoaW5nIiwiZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycyIsInNsaWNlIiwiZ2V0U3RhdGUiLCJzdWJzY3JpYmUiLCJsaXN0ZW5lciIsImlzU3Vic2NyaWJlZCIsInB1c2giLCJpbmRleCIsImluZGV4T2YiLCJzcGxpY2UiLCJkaXNwYXRjaCIsImFjdGlvbiIsInR5cGUiLCJsaXN0ZW5lcnMiLCJyZXBsYWNlUmVkdWNlciIsIm5leHRSZWR1Y2VyIiwiX3JlZiIsIm91dGVyU3Vic2NyaWJlIiwib2JzZXJ2ZXIiLCJUeXBlRXJyb3IiLCJvYnNlcnZlU3RhdGUiLCJuZXh0IiwidW5zdWJzY3JpYmUiLCJnZXRVbmRlZmluZWRTdGF0ZUVycm9yTWVzc2FnZSIsImFjdGlvblR5cGUiLCJTdHJpbmciLCJjb21iaW5lUmVkdWNlcnMiLCJyZWR1Y2VycyIsInJlZHVjZXJLZXlzIiwia2V5cyIsImZpbmFsUmVkdWNlcnMiLCJmaW5hbFJlZHVjZXJLZXlzIiwic2hhcGVBc3NlcnRpb25FcnJvciIsImZvckVhY2giLCJhc3NlcnRSZWR1Y2VyU2hhcGUiLCJzdGF0ZSIsImhhc0NoYW5nZWQiLCJuZXh0U3RhdGUiLCJfaSIsIl9rZXkiLCJwcmV2aW91c1N0YXRlRm9yS2V5IiwibmV4dFN0YXRlRm9yS2V5IiwiZXJyb3JNZXNzYWdlIiwiYmluZEFjdGlvbkNyZWF0b3IiLCJhY3Rpb25DcmVhdG9yIiwiYXBwbHkiLCJiaW5kQWN0aW9uQ3JlYXRvcnMiLCJhY3Rpb25DcmVhdG9ycyIsImJvdW5kQWN0aW9uQ3JlYXRvcnMiLCJjb21wb3NlIiwiX2xlbiIsImZ1bmNzIiwiQXJyYXkiLCJhcmciLCJyZWR1Y2UiLCJhIiwiYiIsImFwcGx5TWlkZGxld2FyZSIsIm1pZGRsZXdhcmVzIiwiX2xlbjIiLCJhcmdzIiwiX2tleTIiLCJzdG9yZSIsIl9kaXNwYXRjaCIsIm1pZGRsZXdhcmVBUEkiLCJjaGFpbiIsIm1hcCIsIm1pZGRsZXdhcmUiLCJjb25kaXRpb24iLCJmb3JtYXQiLCJmIiwiZXJyb3IiLCJhcmdJbmRleCIsInJlcGxhY2UiLCJmcmFtZXNUb1BvcCIsInJvb3QiLCJzZWxmIiwiZ2xvYmFsIiwicmVzdWx0IiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwicHJvcElzRW51bWVyYWJsZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwidG9PYmplY3QiLCJ2YWwiLCJ0ZXN0MSIsImdldE93blByb3BlcnR5TmFtZXMiLCJ0ZXN0MiIsImZyb21DaGFyQ29kZSIsInRlc3QzIiwibGV0dGVyIiwiZXJyIiwic2hvdWxkVXNlTmF0aXZlIiwiZnJvbSIsInN5bWJvbHMiLCJ0byIsIm1lbW8iLCJpc09sZElFIiwiQm9vbGVhbiIsImRvY3VtZW50IiwiYWxsIiwiYXRvYiIsImdldFRhcmdldCIsInN0eWxlVGFyZ2V0IiwicXVlcnlTZWxlY3RvciIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsInN0eWxlc0luRG9tIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwibW9kdWxlc1RvRG9tIiwibGlzdCIsIm9wdGlvbnMiLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJpdGVtIiwiaWQiLCJiYXNlIiwiY291bnQiLCJjb25jYXQiLCJjc3MiLCJtZWRpYSIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkU3R5bGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZSIsImNyZWF0ZUVsZW1lbnQiLCJhdHRyaWJ1dGVzIiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnQiLCJhcHBlbmRDaGlsZCIsInRleHRTdG9yZSIsInJlcGxhY2VUZXh0IiwicmVwbGFjZW1lbnQiLCJmaWx0ZXIiLCJhcHBseVRvU2luZ2xldG9uVGFnIiwicmVtb3ZlIiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJjc3NOb2RlIiwiY3JlYXRlVGV4dE5vZGUiLCJjaGlsZE5vZGVzIiwicmVtb3ZlQ2hpbGQiLCJpbnNlcnRCZWZvcmUiLCJhcHBseVRvVGFnIiwicmVtb3ZlQXR0cmlidXRlIiwiYnRvYSIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImZpcnN0Q2hpbGQiLCJzaW5nbGV0b24iLCJzaW5nbGV0b25Db3VudGVyIiwidXBkYXRlIiwic3R5bGVJbmRleCIsInBhcmVudE5vZGUiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJuZXdPYmoiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2luZGV4IiwidXNlU291cmNlTWFwIiwiY29udGVudCIsImNzc01hcHBpbmciLCJzb3VyY2VNYXBwaW5nIiwiYmFzZTY0IiwiZGF0YSIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlUm9vdCIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJtZWRpYVF1ZXJ5IiwiZGVkdXBlIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsIkFERF9UT0RPIiwiRURJVF9JVEVNIiwiREVMRVRFX0lURU0iLCJTRVRfRURJVCIsImFkZFRvZG8iLCJ0ZXh0IiwiZWRpdEl0ZW0iLCJ1cGRhdGVkSXRlbSIsImRlbGV0ZUl0ZW0iLCJkZWxldGVLZXkiLCJzZXRFZGl0IiwiZWRpdEtleSIsInN1YnNjcmlwdGlvblNoYXBlIiwic2hhcGUiLCJ0cnlTdWJzY3JpYmUiLCJmdW5jIiwiaXNSZXF1aXJlZCIsInRyeVVuc3Vic2NyaWJlIiwibm90aWZ5TmVzdGVkU3VicyIsInN0b3JlU2hhcGUiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJSZWZlcmVuY2VFcnJvciIsIl9pbmhlcml0cyIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJjcmVhdGVQcm92aWRlciIsIl9Qcm92aWRlciRjaGlsZENvbnRleCIsInN0b3JlS2V5Iiwic3ViS2V5Iiwic3Vic2NyaXB0aW9uS2V5IiwiUHJvdmlkZXIiLCJfQ29tcG9uZW50IiwicHJvcHMiLCJjb250ZXh0IiwiX3RoaXMiLCJnZXRDaGlsZENvbnRleHQiLCJyZW5kZXIiLCJvbmx5IiwiY2hpbGRyZW4iLCJwcm9wVHlwZXMiLCJlbGVtZW50IiwiY2hpbGRDb250ZXh0VHlwZXMiLCJudWxsTGlzdGVuZXJzIiwibm90aWZ5IiwiU3Vic2NyaXB0aW9uIiwicGFyZW50U3ViIiwib25TdGF0ZUNoYW5nZSIsImFkZE5lc3RlZFN1YiIsImN1cnJlbnQiLCJjbGVhciIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsImhvdFJlbG9hZGluZ1ZlcnNpb24iLCJkdW1teVN0YXRlIiwibm9vcCIsIm1ha2VTZWxlY3RvclN0YXRlZnVsIiwic291cmNlU2VsZWN0b3IiLCJzZWxlY3RvciIsInJ1biIsIm5leHRQcm9wcyIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsImNvbm5lY3RBZHZhbmNlZCIsInNlbGVjdG9yRmFjdG9yeSIsIl9jb250ZXh0VHlwZXMiLCJfY2hpbGRDb250ZXh0VHlwZXMiLCJfcmVmJGdldERpc3BsYXlOYW1lIiwiZ2V0RGlzcGxheU5hbWUiLCJfcmVmJG1ldGhvZE5hbWUiLCJtZXRob2ROYW1lIiwiX3JlZiRyZW5kZXJDb3VudFByb3AiLCJyZW5kZXJDb3VudFByb3AiLCJfcmVmJHNob3VsZEhhbmRsZVN0YXQiLCJzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMiLCJfcmVmJHN0b3JlS2V5IiwiX3JlZiR3aXRoUmVmIiwid2l0aFJlZiIsImNvbm5lY3RPcHRpb25zIiwidmVyc2lvbiIsImNvbnRleHRUeXBlcyIsIldyYXBwZWRDb21wb25lbnQiLCJ3cmFwcGVkQ29tcG9uZW50TmFtZSIsImRpc3BsYXlOYW1lIiwic2VsZWN0b3JGYWN0b3J5T3B0aW9ucyIsIkNvbm5lY3QiLCJyZW5kZXJDb3VudCIsInByb3BzTW9kZSIsInNldFdyYXBwZWRJbnN0YW5jZSIsImluaXRTZWxlY3RvciIsImluaXRTdWJzY3JpcHRpb24iLCJzdWJzY3JpcHRpb24iLCJjb21wb25lbnREaWRNb3VudCIsImZvcmNlVXBkYXRlIiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiZ2V0V3JhcHBlZEluc3RhbmNlIiwid3JhcHBlZEluc3RhbmNlIiwicmVmIiwiY29tcG9uZW50RGlkVXBkYXRlIiwibm90aWZ5TmVzdGVkU3Vic09uQ29tcG9uZW50RGlkVXBkYXRlIiwic2V0U3RhdGUiLCJhZGRFeHRyYVByb3BzIiwid2l0aEV4dHJhcyIsImhhc093biIsImlzIiwieCIsInkiLCJzaGFsbG93RXF1YWwiLCJvYmpBIiwib2JqQiIsImtleXNBIiwia2V5c0IiLCJmcmVlU2VsZiIsIm9iamVjdFByb3RvIiwidHJhbnNmb3JtIiwiZnVuY1Byb3RvIiwiZnVuY1RvU3RyaW5nIiwid3JhcE1hcFRvUHJvcHNDb25zdGFudCIsImdldENvbnN0YW50IiwiY29uc3RhbnQiLCJjb25zdGFudFNlbGVjdG9yIiwiZGVwZW5kc09uT3duUHJvcHMiLCJnZXREZXBlbmRzT25Pd25Qcm9wcyIsIm1hcFRvUHJvcHMiLCJ3cmFwTWFwVG9Qcm9wc0Z1bmMiLCJwcm94eSIsInN0YXRlT3JEaXNwYXRjaCIsIm93blByb3BzIiwibWFwRGlzcGF0Y2hUb1Byb3BzIiwibWFwU3RhdGVUb1Byb3BzIiwiZGVmYXVsdE1lcmdlUHJvcHMiLCJzdGF0ZVByb3BzIiwiZGlzcGF0Y2hQcm9wcyIsIm1lcmdlUHJvcHMiLCJwdXJlIiwiYXJlTWVyZ2VkUHJvcHNFcXVhbCIsImhhc1J1bk9uY2UiLCJtZXJnZWRQcm9wcyIsIm5leHRNZXJnZWRQcm9wcyIsIndyYXBNZXJnZVByb3BzRnVuYyIsImltcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkiLCJwdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSIsImFyZVN0YXRlc0VxdWFsIiwiYXJlT3duUHJvcHNFcXVhbCIsImFyZVN0YXRlUHJvcHNFcXVhbCIsImhhc1J1bkF0TGVhc3RPbmNlIiwiaGFuZGxlU3Vic2VxdWVudENhbGxzIiwibmV4dE93blByb3BzIiwibmV4dFN0YXRlUHJvcHMiLCJzdGF0ZVByb3BzQ2hhbmdlZCIsInByb3BzQ2hhbmdlZCIsInN0YXRlQ2hhbmdlZCIsImZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkiLCJpbml0TWFwU3RhdGVUb1Byb3BzIiwiaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyIsImluaXRNZXJnZVByb3BzIiwibWF0Y2giLCJmYWN0b3JpZXMiLCJzdHJpY3RFcXVhbCIsIl9yZWYkY29ubmVjdEhPQyIsImNvbm5lY3RIT0MiLCJfcmVmJG1hcFN0YXRlVG9Qcm9wc0YiLCJtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMiLCJfcmVmJG1hcERpc3BhdGNoVG9Qcm8iLCJtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMiLCJfcmVmJG1lcmdlUHJvcHNGYWN0b3IiLCJtZXJnZVByb3BzRmFjdG9yaWVzIiwiX3JlZiRzZWxlY3RvckZhY3RvcnkiLCJfcmVmMiRwdXJlIiwiX3JlZjIkYXJlU3RhdGVzRXF1YWwiLCJfcmVmMiRhcmVPd25Qcm9wc0VxdWEiLCJfcmVmMiRhcmVTdGF0ZVByb3BzRXEiLCJfcmVmMiRhcmVNZXJnZWRQcm9wc0UiLCJleHRyYU9wdGlvbnMiLCJSRUFDVF9TVEFUSUNTIiwiZGVmYXVsdFByb3BzIiwiZ2V0RGVmYXVsdFByb3BzIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwibWl4aW5zIiwiS05PV05fU1RBVElDUyIsImNhbGxlciIsImNhbGxlZSIsImFyaXR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwib2JqZWN0UHJvdG90eXBlIiwiaG9pc3ROb25SZWFjdFN0YXRpY3MiLCJ0YXJnZXRDb21wb25lbnQiLCJzb3VyY2VDb21wb25lbnQiLCJibGFja2xpc3QiLCJpbmhlcml0ZWRDb21wb25lbnQiLCJkZXNjcmlwdG9yIiwiZmFjdG9yeSIsImZyZWVHbG9iYWwiLCJzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwiLCJvYnNlcnZhYmxlIiwiY3JlYXRlU3RvcmVXaXRoTWlkZGxld2FyZSIsIlJlYWN0RE9NIiwiayIsImZvciIsInEiLCJ1IiwidiIsInciLCJ6IiwiYWEiLCJiYSIsIkEiLCJjYSIsImgiLCJCIiwiQyIsImlzTW91bnRlZCIsImVucXVldWVGb3JjZVVwZGF0ZSIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlU2V0U3RhdGUiLCJEIiwiRSIsInJlZnMiLCJGIiwiRyIsImlzUmVhY3RDb21wb25lbnQiLCJIIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJJIiwiSiIsIksiLCJMIiwiX19zZWxmIiwiX19zb3VyY2UiLCJNIiwiJCR0eXBlb2YiLCJfb3duZXIiLCJOIiwiTyIsIlAiLCJRIiwicG9wIiwia2V5UHJlZml4IiwiUiIsIlUiLCJTIiwiVCIsImlzQXJyYXkiLCJkb25lIiwiZXNjYXBlIiwiZWEiLCJmYSIsIlYiLCJkYSIsIlciLCJYIiwiQ2hpbGRyZW4iLCJ0b0FycmF5IiwiY3JlYXRlUmVmIiwiQ29tcG9uZW50IiwiUHVyZUNvbXBvbmVudCIsImNyZWF0ZUNvbnRleHQiLCJfY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJfY3VycmVudFZhbHVlIiwiX2N1cnJlbnRWYWx1ZTIiLCJfdGhyZWFkQ291bnQiLCJDb25zdW1lciIsIl9jb250ZXh0IiwiZm9yd2FyZFJlZiIsImxhenkiLCJfY3RvciIsIl9zdGF0dXMiLCJfcmVzdWx0IiwiY29tcGFyZSIsInVzZUNhbGxiYWNrIiwidXNlQ29udGV4dCIsInVzZUVmZmVjdCIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJ1c2VEZWJ1Z1ZhbHVlIiwidXNlTGF5b3V0RWZmZWN0IiwidXNlTWVtbyIsInVzZVJlZHVjZXIiLCJ1c2VSZWYiLCJ1c2VTdGF0ZSIsIkZyYWdtZW50IiwiU3RyaWN0TW9kZSIsIlN1c3BlbnNlIiwiY2xvbmVFbGVtZW50IiwiY3JlYXRlRmFjdG9yeSIsImlzVmFsaWRFbGVtZW50IiwidW5zdGFibGVfQ29uY3VycmVudE1vZGUiLCJ1bnN0YWJsZV9Qcm9maWxlciIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlciIsIlJlYWN0Q3VycmVudE93bmVyIiwiWSIsImRlZmF1bHQiLCJaIiwiY2hlY2tEQ0UiLCJfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJjb25zb2xlIiwib25FcnJvciIsImhhIiwiaWEiLCJqYSIsImthIiwibWEiLCJuYSIsIm9hIiwicGEiLCJleHRyYWN0RXZlbnRzIiwiZXZlbnRUeXBlcyIsInJhIiwicGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMiLCJzYSIsInJlZ2lzdHJhdGlvbk5hbWUiLCJ0YSIsInVhIiwiZGVwZW5kZW5jaWVzIiwidmEiLCJ3YSIsInhhIiwieWEiLCJjdXJyZW50VGFyZ2V0IiwibGEiLCJ6YSIsIkFhIiwiQmEiLCJDYSIsIl9kaXNwYXRjaExpc3RlbmVycyIsIl9kaXNwYXRjaEluc3RhbmNlcyIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiaXNQZXJzaXN0ZW50IiwicmVsZWFzZSIsIkRhIiwiaW5qZWN0RXZlbnRQbHVnaW5PcmRlciIsImluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSIsIkVhIiwic3RhdGVOb2RlIiwiZGlzYWJsZWQiLCJGYSIsIkdhIiwiSGEiLCJJYSIsIkphIiwidGFnIiwiS2EiLCJMYSIsIk1hIiwiTmEiLCJyZXR1cm4iLCJPYSIsImRpc3BhdGNoQ29uZmlnIiwiUGEiLCJfdGFyZ2V0SW5zdCIsIlFhIiwiUmEiLCJTYSIsIlRhIiwiVWEiLCJ0b0xvd2VyQ2FzZSIsIlZhIiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uZW5kIiwiV2EiLCJYYSIsIllhIiwiYW5pbWF0aW9uIiwidHJhbnNpdGlvbiIsIlphIiwiJGEiLCJhYiIsImJiIiwiY2IiLCJkYiIsImViIiwiZmIiLCJnYiIsInRleHRDb250ZW50IiwiaGIiLCJpYiIsIm5hdGl2ZUV2ZW50IiwiSW50ZXJmYWNlIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJldHVyblZhbHVlIiwia2IiLCJldmVudFBvb2wiLCJsYiIsImRlc3RydWN0b3IiLCJqYiIsImdldFBvb2xlZCIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwiY2FuY2VsQnViYmxlIiwicGVyc2lzdCIsImV2ZW50UGhhc2UiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsInRpbWVTdGFtcCIsIkRhdGUiLCJub3ciLCJpc1RydXN0ZWQiLCJleHRlbmQiLCJtYiIsIm5iIiwib2IiLCJwYiIsInFiIiwiZG9jdW1lbnRNb2RlIiwicmIiLCJzYiIsInRiIiwidmIiLCJiZWZvcmVJbnB1dCIsImJ1YmJsZWQiLCJjYXB0dXJlZCIsImNvbXBvc2l0aW9uRW5kIiwiY29tcG9zaXRpb25TdGFydCIsImNvbXBvc2l0aW9uVXBkYXRlIiwid2IiLCJ4YiIsImtleUNvZGUiLCJ5YiIsImRldGFpbCIsInpiIiwiQ2IiLCJsb2NhbGUiLCJ3aGljaCIsIkFiIiwiY3RybEtleSIsImFsdEtleSIsIm1ldGFLZXkiLCJjaGFyIiwiQmIiLCJEYiIsIkViIiwiRmIiLCJHYiIsIkhiIiwiSWIiLCJKYiIsIktiIiwiTGIiLCJNYiIsIk5iIiwiT2IiLCJjb2xvciIsImRhdGUiLCJkYXRldGltZSIsImVtYWlsIiwibW9udGgiLCJudW1iZXIiLCJwYXNzd29yZCIsInJhbmdlIiwic2VhcmNoIiwidGVsIiwidGltZSIsInVybCIsIndlZWsiLCJQYiIsIm5vZGVOYW1lIiwiUWIiLCJzcmNFbGVtZW50IiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJub2RlVHlwZSIsIlNiIiwiVGIiLCJWYiIsIl92YWx1ZVRyYWNrZXIiLCJzZXQiLCJnZXRWYWx1ZSIsInNldFZhbHVlIiwic3RvcFRyYWNraW5nIiwiVWIiLCJXYiIsImNoZWNrZWQiLCJYYiIsIlliIiwiWmIiLCIkYiIsImFjIiwiYmMiLCJjYyIsImRjIiwiZWMiLCJmYyIsImdjIiwiaGMiLCJpYyIsImpjIiwia2MiLCJsYyIsIm1jIiwibmMiLCJfZGVidWdPd25lciIsIl9kZWJ1Z1NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsIm9jIiwicGMiLCJxYyIsInJjIiwiYWNjZXB0c0Jvb2xlYW5zIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsIm11c3RVc2VQcm9wZXJ0eSIsInByb3BlcnR5TmFtZSIsInZjIiwid2MiLCJ0b1VwcGVyQ2FzZSIsInhjIiwidGMiLCJpc05hTiIsInVjIiwidGVzdCIsInNjIiwic2V0QXR0cmlidXRlTlMiLCJ5YyIsInpjIiwiZGVmYXVsdENoZWNrZWQiLCJkZWZhdWx0VmFsdWUiLCJfd3JhcHBlclN0YXRlIiwiaW5pdGlhbENoZWNrZWQiLCJBYyIsImluaXRpYWxWYWx1ZSIsImNvbnRyb2xsZWQiLCJCYyIsIkNjIiwiRGMiLCJFYyIsIm93bmVyRG9jdW1lbnQiLCJhY3RpdmVFbGVtZW50IiwidGFiSW5kZXgiLCJGYyIsImNoYW5nZSIsIkdjIiwiSGMiLCJJYyIsIkpjIiwiS2MiLCJMYyIsIk1jIiwiTmMiLCJkZXRhY2hFdmVudCIsIk9jIiwiUGMiLCJhdHRhY2hFdmVudCIsIlFjIiwiUmMiLCJTYyIsIlRjIiwiX2lzSW5wdXRFdmVudFN1cHBvcnRlZCIsIlVjIiwidmlldyIsIlZjIiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsIldjIiwiZ2V0TW9kaWZpZXJTdGF0ZSIsIlhjIiwiWWMiLCJaYyIsIiRjIiwiYWQiLCJiZCIsInNjcmVlblgiLCJzY3JlZW5ZIiwiY2xpZW50WCIsImNsaWVudFkiLCJwYWdlWCIsInBhZ2VZIiwic2hpZnRLZXkiLCJidXR0b24iLCJidXR0b25zIiwicmVsYXRlZFRhcmdldCIsImZyb21FbGVtZW50IiwidG9FbGVtZW50IiwibW92ZW1lbnRYIiwibW92ZW1lbnRZIiwiY2QiLCJwb2ludGVySWQiLCJ3aWR0aCIsImhlaWdodCIsInByZXNzdXJlIiwidGFuZ2VudGlhbFByZXNzdXJlIiwidGlsdFgiLCJ0aWx0WSIsInR3aXN0IiwicG9pbnRlclR5cGUiLCJpc1ByaW1hcnkiLCJkZCIsIm1vdXNlRW50ZXIiLCJtb3VzZUxlYXZlIiwicG9pbnRlckVudGVyIiwicG9pbnRlckxlYXZlIiwiZWQiLCJkZWZhdWx0VmlldyIsInBhcmVudFdpbmRvdyIsImFsdGVybmF0ZSIsImZkIiwiZ2QiLCJoZCIsImtkIiwiZWZmZWN0VGFnIiwibGQiLCJuZCIsImNoaWxkIiwic2libGluZyIsIm1kIiwib2QiLCJhbmltYXRpb25OYW1lIiwiZWxhcHNlZFRpbWUiLCJwc2V1ZG9FbGVtZW50IiwicGQiLCJjbGlwYm9hcmREYXRhIiwicWQiLCJyZCIsImNoYXJDb2RlIiwic2QiLCJFc2MiLCJTcGFjZWJhciIsIkxlZnQiLCJVcCIsIlJpZ2h0IiwiRG93biIsIkRlbCIsIldpbiIsIk1lbnUiLCJBcHBzIiwiU2Nyb2xsIiwiTW96UHJpbnRhYmxlS2V5IiwidGQiLCI4IiwiOSIsIjEyIiwiMTMiLCIxNiIsIjE3IiwiMTgiLCIxOSIsIjIwIiwiMjciLCIzMiIsIjMzIiwiMzQiLCIzNSIsIjM2IiwiMzciLCIzOCIsIjM5IiwiNDAiLCI0NSIsIjQ2IiwiMTEyIiwiMTEzIiwiMTE0IiwiMTE1IiwiMTE2IiwiMTE3IiwiMTE4IiwiMTE5IiwiMTIwIiwiMTIxIiwiMTIyIiwiMTIzIiwiMTQ0IiwiMTQ1IiwiMjI0IiwidWQiLCJsb2NhdGlvbiIsInJlcGVhdCIsInZkIiwiZGF0YVRyYW5zZmVyIiwid2QiLCJ0b3VjaGVzIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwieGQiLCJ5ZCIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwiemQiLCJBZCIsIkJkIiwiQ2QiLCJpc0ludGVyYWN0aXZlIiwiRGQiLCJpc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGUiLCJFZCIsIkZkIiwiR2QiLCJ0YXJnZXRJbnN0IiwiYW5jZXN0b3JzIiwiY29udGFpbmVySW5mbyIsInRvcExldmVsVHlwZSIsIkhkIiwiSWQiLCJKZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJLZCIsIkxkIiwiTWQiLCJOZCIsIk9kIiwiUGQiLCJib2R5IiwiUWQiLCJSZCIsIm5vZGUiLCJvZmZzZXQiLCJuZXh0U2libGluZyIsIlRkIiwiVWQiLCJjb250ZW50RWRpdGFibGUiLCJWZCIsIldkIiwic2VsZWN0IiwiWGQiLCJZZCIsIlpkIiwiJGQiLCJhZSIsInN0YXJ0Iiwic2VsZWN0aW9uU3RhcnQiLCJlbmQiLCJzZWxlY3Rpb25FbmQiLCJhbmNob3JOb2RlIiwiZ2V0U2VsZWN0aW9uIiwiYW5jaG9yT2Zmc2V0IiwiZm9jdXNOb2RlIiwiZm9jdXNPZmZzZXQiLCJiZSIsIm9uU2VsZWN0IiwiZGUiLCJjZSIsImVlIiwic2VsZWN0ZWQiLCJkZWZhdWx0U2VsZWN0ZWQiLCJmZSIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiZ2UiLCJoZSIsImllIiwiU2ltcGxlRXZlbnRQbHVnaW4iLCJFbnRlckxlYXZlRXZlbnRQbHVnaW4iLCJDaGFuZ2VFdmVudFBsdWdpbiIsIlNlbGVjdEV2ZW50UGx1Z2luIiwiQmVmb3JlSW5wdXRFdmVudFBsdWdpbiIsImplIiwia2UiLCJsZSIsIm1lIiwibmUiLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwibmFtZXNwYWNlVVJJIiwiaW5uZXJIVE1MIiwib2UiLCJsYXN0Q2hpbGQiLCJub2RlVmFsdWUiLCJwZSIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5Db3VudCIsImNvbHVtbnMiLCJmbGV4IiwiZmxleEdyb3ciLCJmbGV4UG9zaXRpdmUiLCJmbGV4U2hyaW5rIiwiZmxleE5lZ2F0aXZlIiwiZmxleE9yZGVyIiwiZ3JpZEFyZWEiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTcGFuIiwiZ3JpZFJvd1N0YXJ0IiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3BhbiIsImdyaWRDb2x1bW5TdGFydCIsImZvbnRXZWlnaHQiLCJsaW5lQ2xhbXAiLCJsaW5lSGVpZ2h0Iiwib3BhY2l0eSIsIm9yZGVyIiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwicWUiLCJyZSIsInRyaW0iLCJzZSIsInNldFByb3BlcnR5IiwiY2hhckF0IiwidGUiLCJtZW51aXRlbSIsImFyZWEiLCJiciIsImNvbCIsImVtYmVkIiwiaHIiLCJpbWciLCJpbnB1dCIsImtleWdlbiIsImxpbmsiLCJtZXRhIiwicGFyYW0iLCJ0cmFjayIsIndiciIsInVlIiwidmUiLCJ3ZSIsImJsdXIiLCJmb2N1cyIsInhlIiwieWUiLCJ6ZSIsIkFlIiwiYXV0b0ZvY3VzIiwiQmUiLCJfX2h0bWwiLCJDZSIsInNldFRpbWVvdXQiLCJEZSIsImNsZWFyVGltZW91dCIsIkVlIiwidW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayIsIkZlIiwidW5zdGFibGVfY2FuY2VsQ2FsbGJhY2siLCJIZSIsIkllIiwiU2V0IiwiSmUiLCJLZSIsIkxlIiwiTWUiLCJPZSIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dCIsIlBlIiwiUWUiLCJSZSIsIlNlIiwiVGUiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCIsIlVlIiwiVmUiLCJXZSIsIlhlIiwiWmUiLCJlbGVtZW50VHlwZSIsInBlbmRpbmdQcm9wcyIsImNvbnRleHREZXBlbmRlbmNpZXMiLCJtZW1vaXplZFN0YXRlIiwidXBkYXRlUXVldWUiLCJtZW1vaXplZFByb3BzIiwibGFzdEVmZmVjdCIsImZpcnN0RWZmZWN0IiwibmV4dEVmZmVjdCIsImNoaWxkRXhwaXJhdGlvblRpbWUiLCJleHBpcmF0aW9uVGltZSIsIiRlIiwiYmYiLCJjZiIsImRmIiwiZWYiLCJmZiIsImdmIiwicGVuZGluZ0NoaWxkcmVuIiwiaW1wbGVtZW50YXRpb24iLCJoZiIsImRpZEVycm9yIiwiZWFybGllc3RQZW5kaW5nVGltZSIsImxhdGVzdFBlbmRpbmdUaW1lIiwiamYiLCJrZiIsImxhdGVzdFBpbmdlZFRpbWUiLCJlYXJsaWVzdFN1c3BlbmRlZFRpbWUiLCJsYXRlc3RTdXNwZW5kZWRUaW1lIiwibGYiLCJuZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbiIsIm5mIiwib2YiLCJiYXNlU3RhdGUiLCJ4ZiIsIl9yZWFjdEludGVybmFsRmliZXIiLCJwZiIsInJmIiwicWYiLCJwYXlsb2FkIiwiY2FsbGJhY2siLCJzZiIsInRmIiwidWYiLCJ2ZiIsIndmIiwieWYiLCJ6ZiIsImNvbnRleHRUeXBlIiwiQWYiLCJCZiIsIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiQ2YiLCJEZiIsImdldFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudFdpbGxNb3VudCIsIkVmIiwiRmYiLCJfc3RyaW5nUmVmIiwiR2YiLCJIZiIsIk1hcCIsImRlbGV0ZSIsIklmIiwiSmYiLCJLZiIsIkxmIiwiTWYiLCJOZiIsIk9mIiwiUGYiLCJkb2N1bWVudEVsZW1lbnQiLCJ0YWdOYW1lIiwiUWYiLCJSZiIsIlNmIiwiYWciLCJiZyIsImNnIiwiZGciLCJlZyIsImZnIiwiZ2ciLCJoZyIsImlnIiwiamciLCJrZyIsImxnIiwibWciLCJuZyIsIm9nIiwicGciLCJxZyIsInJnIiwic2ciLCJ0ZyIsInF1ZXVlIiwiYmFzZVVwZGF0ZSIsInVnIiwidmciLCJ3ZyIsInhnIiwibGFzdCIsImVhZ2VyUmVkdWNlciIsImVhZ2VyU3RhdGUiLCJ5ZyIsImRlc3Ryb3kiLCJkZXBzIiwiemciLCJCZyIsIkNnIiwiRGciLCJFZyIsInJlYWRDb250ZXh0IiwiJGYiLCJWZiIsIkZnIiwiR2ciLCJIZyIsIklnIiwiSmciLCJLZyIsIkxnIiwiTWciLCJOZyIsIk9nIiwiUGciLCJRZyIsIlJnIiwiU2ciLCJUZyIsIlVnIiwiVmciLCJXZyIsIlhnIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiWWciLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJaZyIsInBlbmRpbmdDb250ZXh0IiwiJGciLCJ0aW1lZE91dEF0IiwiZmFsbGJhY2siLCJhaCIsImJoIiwidGhlbiIsIm1mIiwiYWYiLCJoeWRyYXRlIiwiaGlkZGVuIiwiZmlyc3QiLCJvYnNlcnZlZEJpdHMiLCJ1bnN0YWJsZV9vYnNlcnZlZEJpdHMiLCJjaCIsImRoIiwiZWgiLCJmaCIsImdoIiwiamgiLCJmaXJzdFVwZGF0ZSIsImxhc3RVcGRhdGUiLCJmaXJzdENhcHR1cmVkVXBkYXRlIiwibGFzdENhcHR1cmVkVXBkYXRlIiwiZmlyc3RDYXB0dXJlZEVmZmVjdCIsImxhc3RDYXB0dXJlZEVmZmVjdCIsImtoIiwibGgiLCJtaCIsIm5oIiwib2giLCJwaCIsInFoIiwicmgiLCJzdGFjayIsInNoIiwid2giLCJ5aCIsInpoIiwib25DbGljayIsIm9uY2xpY2siLCJBaCIsIldlYWtTZXQiLCJCaCIsIkNoIiwiRGgiLCJFaCIsIkdoIiwiSGgiLCJJaCIsIkpoIiwiX3JlYWN0Um9vdENvbnRhaW5lciIsIktoIiwid2FzTXVsdGlwbGUiLCJtdWx0aXBsZSIsIkdlIiwiZGlzcGxheSIsIkZoIiwiTGgiLCJoYXMiLCJhZGQiLCJNaCIsIldlYWtNYXAiLCJOaCIsIk9oIiwiUGgiLCJjb21wb25lbnREaWRDYXRjaCIsIlFoIiwiY29tcG9uZW50U3RhY2siLCJSaCIsIlNoIiwiVGgiLCJVaCIsIlZoIiwiV2giLCJYaCIsIlloIiwiWmgiLCIkaCIsImFpIiwiYmkiLCJjaSIsImRpIiwiZWkiLCJmaSIsImdpIiwiY3JlYXRlRWxlbWVudE5TIiwiaGkiLCJpaSIsInBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZSIsImppIiwibWF4RHVyYXRpb24iLCJwaW5nQ2FjaGUiLCJraSIsImZpbmlzaGVkV29yayIsImxpIiwibWkiLCJuaSIsIm9pIiwicGkiLCJxaSIsInJpIiwic2kiLCJ0aSIsInVpIiwidmkiLCJ3aSIsInhpIiwieWkiLCJ6aSIsIkFpIiwidW5zdGFibGVfbm93IiwiQmkiLCJDaSIsIkRpIiwiRWkiLCJGaSIsIkdpIiwidGltZW91dCIsInRpbWVvdXRIYW5kbGUiLCJIaSIsIklpIiwiSmkiLCJuZXh0U2NoZWR1bGVkUm9vdCIsIktpIiwiTGkiLCJNaSIsInVuc3RhYmxlX3Nob3VsZFlpZWxkIiwiX29uQ29tcGxldGUiLCJPaSIsImZpcnN0QmF0Y2giLCJfZXhwaXJhdGlvblRpbWUiLCJfZGVmZXIiLCJyYW5nZUNvdW50IiwidWIiLCJmb2N1c2VkRWxlbSIsInNlbGVjdGlvblJhbmdlIiwiQWciLCJOaSIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiU2QiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwibWluIiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwibGVmdCIsInNjcm9sbExlZnQiLCJ0b3AiLCJzY3JvbGxUb3AiLCJxYSIsIlJiIiwiZGoiLCJ0aCIsInVoIiwiZWoiLCJqZCIsInZoIiwiTmUiLCJQaSIsIlFpIiwiUmkiLCJTaSIsIlRpIiwiVWkiLCJWaSIsIldpIiwiX3Jvb3QiLCJfY2FsbGJhY2tzIiwiX25leHQiLCJfaGFzQ2hpbGRyZW4iLCJfZGlkQ29tcGxldGUiLCJfY2hpbGRyZW4iLCJYaSIsIl9kaWRDb21taXQiLCJfb25Db21taXQiLCJZaSIsIl9pbnRlcm5hbFJvb3QiLCJaaSIsImFqIiwibGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwiaGFzQXR0cmlidXRlIiwiJGkiLCJiaiIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JtIiwiY29tbWl0IiwidW5tb3VudCIsImNyZWF0ZUJhdGNoIiwiZmoiLCJjcmVhdGVQb3J0YWwiLCJmaW5kRE9NTm9kZSIsInVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInVuc3RhYmxlX2NyZWF0ZVBvcnRhbCIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwidW5zdGFibGVfaW50ZXJhY3RpdmVVcGRhdGVzIiwiZmx1c2hTeW5jIiwidW5zdGFibGVfY3JlYXRlUm9vdCIsInVuc3RhYmxlX2ZsdXNoQ29udHJvbGxlZCIsIkV2ZW50cyIsImZpbmRGaWJlckJ5SG9zdEluc3RhbmNlIiwiYnVuZGxlVHlwZSIsInJlbmRlcmVyUGFja2FnZU5hbWUiLCJpc0Rpc2FibGVkIiwic3VwcG9ydHNGaWJlciIsImluamVjdCIsIm9uQ29tbWl0RmliZXJSb290Iiwib25Db21taXRGaWJlclVubW91bnQiLCJZZSIsIm92ZXJyaWRlUHJvcHMiLCJjdXJyZW50RGlzcGF0Y2hlclJlZiIsImZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyIiwiZ2oiLCJoaiIsInByZXZpb3VzIiwicHJpb3JpdHlMZXZlbCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwicGVyZm9ybWFuY2UiLCJfc2NoZWRNb2NrIiwiTWVzc2FnZUNoYW5uZWwiLCJwb3J0MiIsInBvcnQxIiwib25tZXNzYWdlIiwicG9zdE1lc3NhZ2UiLCJ1bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSIsInVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5IiwidW5zdGFibGVfTm9ybWFsUHJpb3JpdHkiLCJ1bnN0YWJsZV9JZGxlUHJpb3JpdHkiLCJ1bnN0YWJsZV9Mb3dQcmlvcml0eSIsInVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSIsInVuc3RhYmxlX25leHQiLCJ1bnN0YWJsZV93cmFwQ2FsbGJhY2siLCJ1bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCIsInVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uIiwidW5zdGFibGVfcGF1c2VFeGVjdXRpb24iLCJ1bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZSIsImFwaSIsImxvY2FscyIsIl9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyIsImVtcHR5RnVuY3Rpb24iLCJpbnZhcmlhbnQiLCJSZWFjdFByb3BUeXBlc1NlY3JldCIsInNoaW0iLCJwcm9wTmFtZSIsImNvbXBvbmVudE5hbWUiLCJwcm9wRnVsbE5hbWUiLCJzZWNyZXQiLCJnZXRTaGltIiwiUmVhY3RQcm9wVHlwZXMiLCJhcnJheSIsImJvb2wiLCJzdHJpbmciLCJzeW1ib2wiLCJhbnkiLCJhcnJheU9mIiwiaW5zdGFuY2VPZiIsIm9iamVjdE9mIiwib25lT2YiLCJvbmVPZlR5cGUiLCJleGFjdCIsImNoZWNrUHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwibWFrZUVtcHR5RnVuY3Rpb24iLCJ0aGF0UmV0dXJucyIsInRoYXRSZXR1cm5zRmFsc2UiLCJ0aGF0UmV0dXJuc1RydWUiLCJ0aGF0UmV0dXJuc051bGwiLCJ0aGF0UmV0dXJuc1RoaXMiLCJ0aGF0UmV0dXJuc0FyZ3VtZW50Iiwib3JpZ2luYWxNb2R1bGUiLCJ3ZWJwYWNrUG9seWZpbGwiLCJBZGRUb2RvIiwidG9kb3MiLCJhZGRJdGVtIiwidXBkYXRlZElucHV0IiwiY2xhc3NOYW1lIiwiXyIsInRvZG8iLCJpc0VkaXQiLCJjb25uZWN0IiwiVG9Eb0l0ZW0iLCJwcmV2aW91c1VuZGVyc2NvcmUiLCJBcnJheVByb3RvIiwiT2JqUHJvdG8iLCJTeW1ib2xQcm90byIsIm5hdGl2ZUlzQXJyYXkiLCJuYXRpdmVLZXlzIiwibmF0aXZlQ3JlYXRlIiwiQ3RvciIsIl93cmFwcGVkIiwiVkVSU0lPTiIsImJ1aWx0aW5JdGVyYXRlZSIsIm9wdGltaXplQ2IiLCJhcmdDb3VudCIsImNvbGxlY3Rpb24iLCJhY2N1bXVsYXRvciIsIml0ZXJhdGVlIiwiaWRlbnRpdHkiLCJpc0Z1bmN0aW9uIiwiaXNPYmplY3QiLCJtYXRjaGVyIiwiSW5maW5pdHkiLCJyZXN0QXJndW1lbnRzIiwic3RhcnRJbmRleCIsIm1heCIsInJlc3QiLCJiYXNlQ3JlYXRlIiwic2hhbGxvd1Byb3BlcnR5IiwiZGVlcEdldCIsInBhdGgiLCJNQVhfQVJSQVlfSU5ERVgiLCJwb3ciLCJnZXRMZW5ndGgiLCJpc0FycmF5TGlrZSIsImVhY2giLCJjb2xsZWN0IiwicmVzdWx0cyIsImN1cnJlbnRLZXkiLCJjcmVhdGVSZWR1Y2UiLCJkaXIiLCJpbml0aWFsIiwiZm9sZGwiLCJyZWR1Y2VSaWdodCIsImZvbGRyIiwiZmluZCIsImRldGVjdCIsInByZWRpY2F0ZSIsImZpbmRJbmRleCIsImZpbmRLZXkiLCJyZWplY3QiLCJuZWdhdGUiLCJldmVyeSIsInNvbWUiLCJpbmNsdWRlcyIsImluY2x1ZGUiLCJmcm9tSW5kZXgiLCJndWFyZCIsInZhbHVlcyIsImludm9rZSIsImNvbnRleHRQYXRoIiwibWV0aG9kIiwicGx1Y2siLCJ3aGVyZSIsImF0dHJzIiwiZmluZFdoZXJlIiwiY29tcHV0ZWQiLCJsYXN0Q29tcHV0ZWQiLCJzaHVmZmxlIiwic2FtcGxlIiwiY2xvbmUiLCJyYW5kIiwidGVtcCIsInNvcnRCeSIsImNyaXRlcmlhIiwic29ydCIsInJpZ2h0IiwiZ3JvdXAiLCJiZWhhdmlvciIsInBhcnRpdGlvbiIsImdyb3VwQnkiLCJpbmRleEJ5IiwiY291bnRCeSIsInJlU3RyU3ltYm9sIiwiaXNTdHJpbmciLCJzaXplIiwicGFzcyIsInRha2UiLCJ0YWlsIiwiZHJvcCIsImNvbXBhY3QiLCJmbGF0dGVuIiwic2hhbGxvdyIsInN0cmljdCIsIm91dHB1dCIsImlkeCIsImlzQXJndW1lbnRzIiwiaiIsImxlbiIsIndpdGhvdXQiLCJvdGhlckFycmF5cyIsImRpZmZlcmVuY2UiLCJ1bmlxIiwidW5pcXVlIiwiaXNTb3J0ZWQiLCJpc0Jvb2xlYW4iLCJzZWVuIiwidW5pb24iLCJhcnJheXMiLCJpbnRlcnNlY3Rpb24iLCJhcmdzTGVuZ3RoIiwidW56aXAiLCJ6aXAiLCJjcmVhdGVQcmVkaWNhdGVJbmRleEZpbmRlciIsImZpbmRMYXN0SW5kZXgiLCJzb3J0ZWRJbmRleCIsImxvdyIsImhpZ2giLCJtaWQiLCJmbG9vciIsImNyZWF0ZUluZGV4RmluZGVyIiwicHJlZGljYXRlRmluZCIsImxhc3RJbmRleE9mIiwic3RvcCIsInN0ZXAiLCJjZWlsIiwiY2h1bmsiLCJleGVjdXRlQm91bmQiLCJzb3VyY2VGdW5jIiwiYm91bmRGdW5jIiwiY2FsbGluZ0NvbnRleHQiLCJib3VuZCIsImNhbGxBcmdzIiwicGFydGlhbCIsImJvdW5kQXJncyIsInBsYWNlaG9sZGVyIiwicG9zaXRpb24iLCJiaW5kQWxsIiwibWVtb2l6ZSIsImhhc2hlciIsImNhY2hlIiwiYWRkcmVzcyIsImRlbGF5Iiwid2FpdCIsImRlZmVyIiwidGhyb3R0bGUiLCJsYXRlciIsImxlYWRpbmciLCJ0aHJvdHRsZWQiLCJyZW1haW5pbmciLCJ0cmFpbGluZyIsImNhbmNlbCIsImRlYm91bmNlIiwiaW1tZWRpYXRlIiwiZGVib3VuY2VkIiwiY2FsbE5vdyIsIndyYXAiLCJ3cmFwcGVyIiwiYWZ0ZXIiLCJ0aW1lcyIsImJlZm9yZSIsIm9uY2UiLCJoYXNFbnVtQnVnIiwibm9uRW51bWVyYWJsZVByb3BzIiwiY29sbGVjdE5vbkVudW1Qcm9wcyIsIm5vbkVudW1JZHgiLCJwcm9wIiwiYWxsS2V5cyIsIm1hcE9iamVjdCIsInBhaXJzIiwiaW52ZXJ0IiwiZnVuY3Rpb25zIiwibWV0aG9kcyIsIm5hbWVzIiwiY3JlYXRlQXNzaWduZXIiLCJrZXlzRnVuYyIsImRlZmF1bHRzIiwiZXh0ZW5kT3duIiwiZXEiLCJkZWVwRXEiLCJrZXlJbk9iaiIsInBpY2siLCJvbWl0IiwidGFwIiwiaW50ZXJjZXB0b3IiLCJpc01hdGNoIiwiYVN0YWNrIiwiYlN0YWNrIiwidmFsdWVPZiIsImFyZUFycmF5cyIsImFDdG9yIiwiYkN0b3IiLCJpc0VxdWFsIiwiaXNFbXB0eSIsImlzRWxlbWVudCIsIm5vZGVsaXN0IiwiSW50OEFycmF5IiwiaXNGaW5pdGUiLCJpc1N5bWJvbCIsInBhcnNlRmxvYXQiLCJpc051bWJlciIsImlzTnVsbCIsImlzVW5kZWZpbmVkIiwibm9Db25mbGljdCIsInByb3BlcnR5T2YiLCJtYXRjaGVzIiwiYWNjdW0iLCJnZXRUaW1lIiwiZXNjYXBlTWFwIiwidW5lc2NhcGVNYXAiLCJjcmVhdGVFc2NhcGVyIiwiZXNjYXBlciIsInRlc3RSZWdleHAiLCJSZWdFeHAiLCJyZXBsYWNlUmVnZXhwIiwiaWRDb3VudGVyIiwidW5pcXVlSWQiLCJwcmVmaXgiLCJ0ZW1wbGF0ZVNldHRpbmdzIiwiZXZhbHVhdGUiLCJpbnRlcnBvbGF0ZSIsIm5vTWF0Y2giLCJlc2NhcGVzIiwiZXNjYXBlUmVnRXhwIiwiZXNjYXBlQ2hhciIsInRlbXBsYXRlIiwic2V0dGluZ3MiLCJvbGRTZXR0aW5ncyIsInZhcmlhYmxlIiwiYXJndW1lbnQiLCJfY2hhaW4iLCJjaGFpblJlc3VsdCIsIm1peGluIiwidG9KU09OIiwiZGVwcmVjYXRlIiwicGF0aHMiLCJpbnB1dFZhbHVlIiwic2V0SW5wdXRWYWx1ZSIsIm9uQ2hhbmdlIiwib25TdWJtaXQiLCJoYW5kbGVTdWJtaXQiLCJpbml0aWFsU3RhdGUiXSwibWFwcGluZ3Mi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LEdBQVAsT0FBZUEsSUFBUTJELEVBQU9pTCxlQUN4RCxRQUNFLE9BQU96SiIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIi9cIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDE0KTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJFQUNUX0VMRU1FTlRfVFlQRSA9ICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmXG4gICAgU3ltYm9sLmZvciAmJlxuICAgIFN5bWJvbC5mb3IoJ3JlYWN0LmVsZW1lbnQnKSkgfHxcbiAgICAweGVhYzc7XG5cbiAgdmFyIGlzVmFsaWRFbGVtZW50ID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmXG4gICAgICBvYmplY3QgIT09IG51bGwgJiZcbiAgICAgIG9iamVjdC4kJHR5cGVvZiA9PT0gUkVBQ1RfRUxFTUVOVF9UWVBFO1xuICB9O1xuXG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IGRldmVsb3BtZW50IGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzJykoaXNWYWxpZEVsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpO1xufSBlbHNlIHtcbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgcHJvZHVjdGlvbiBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zJykoKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwiaW1wb3J0ICQkb2JzZXJ2YWJsZSBmcm9tICdzeW1ib2wtb2JzZXJ2YWJsZSc7XG5cbi8qKlxuICogVGhlc2UgYXJlIHByaXZhdGUgYWN0aW9uIHR5cGVzIHJlc2VydmVkIGJ5IFJlZHV4LlxuICogRm9yIGFueSB1bmtub3duIGFjdGlvbnMsIHlvdSBtdXN0IHJldHVybiB0aGUgY3VycmVudCBzdGF0ZS5cbiAqIElmIHRoZSBjdXJyZW50IHN0YXRlIGlzIHVuZGVmaW5lZCwgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLlxuICogRG8gbm90IHJlZmVyZW5jZSB0aGVzZSBhY3Rpb24gdHlwZXMgZGlyZWN0bHkgaW4geW91ciBjb2RlLlxuICovXG52YXIgQWN0aW9uVHlwZXMgPSB7XG4gIElOSVQ6ICdAQHJlZHV4L0lOSVQnICsgTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDcpLnNwbGl0KCcnKS5qb2luKCcuJyksXG4gIFJFUExBQ0U6ICdAQHJlZHV4L1JFUExBQ0UnICsgTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDcpLnNwbGl0KCcnKS5qb2luKCcuJylcbn07XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqO1xufSA6IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG59O1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gb2JqIFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBhcmd1bWVudCBhcHBlYXJzIHRvIGJlIGEgcGxhaW4gb2JqZWN0LlxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KG9iaikge1xuICBpZiAoKHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKG9iaikpICE9PSAnb2JqZWN0JyB8fCBvYmogPT09IG51bGwpIHJldHVybiBmYWxzZTtcblxuICB2YXIgcHJvdG8gPSBvYmo7XG4gIHdoaWxlIChPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pICE9PSBudWxsKSB7XG4gICAgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pO1xuICB9XG5cbiAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopID09PSBwcm90bztcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgUmVkdXggc3RvcmUgdGhhdCBob2xkcyB0aGUgc3RhdGUgdHJlZS5cbiAqIFRoZSBvbmx5IHdheSB0byBjaGFuZ2UgdGhlIGRhdGEgaW4gdGhlIHN0b3JlIGlzIHRvIGNhbGwgYGRpc3BhdGNoKClgIG9uIGl0LlxuICpcbiAqIFRoZXJlIHNob3VsZCBvbmx5IGJlIGEgc2luZ2xlIHN0b3JlIGluIHlvdXIgYXBwLiBUbyBzcGVjaWZ5IGhvdyBkaWZmZXJlbnRcbiAqIHBhcnRzIG9mIHRoZSBzdGF0ZSB0cmVlIHJlc3BvbmQgdG8gYWN0aW9ucywgeW91IG1heSBjb21iaW5lIHNldmVyYWwgcmVkdWNlcnNcbiAqIGludG8gYSBzaW5nbGUgcmVkdWNlciBmdW5jdGlvbiBieSB1c2luZyBgY29tYmluZVJlZHVjZXJzYC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWR1Y2VyIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBuZXh0IHN0YXRlIHRyZWUsIGdpdmVuXG4gKiB0aGUgY3VycmVudCBzdGF0ZSB0cmVlIGFuZCB0aGUgYWN0aW9uIHRvIGhhbmRsZS5cbiAqXG4gKiBAcGFyYW0ge2FueX0gW3ByZWxvYWRlZFN0YXRlXSBUaGUgaW5pdGlhbCBzdGF0ZS4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGh5ZHJhdGUgdGhlIHN0YXRlIGZyb20gdGhlIHNlcnZlciBpbiB1bml2ZXJzYWwgYXBwcywgb3IgdG8gcmVzdG9yZSBhXG4gKiBwcmV2aW91c2x5IHNlcmlhbGl6ZWQgdXNlciBzZXNzaW9uLlxuICogSWYgeW91IHVzZSBgY29tYmluZVJlZHVjZXJzYCB0byBwcm9kdWNlIHRoZSByb290IHJlZHVjZXIgZnVuY3Rpb24sIHRoaXMgbXVzdCBiZVxuICogYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUgYXMgYGNvbWJpbmVSZWR1Y2Vyc2Aga2V5cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbZW5oYW5jZXJdIFRoZSBzdG9yZSBlbmhhbmNlci4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGVuaGFuY2UgdGhlIHN0b3JlIHdpdGggdGhpcmQtcGFydHkgY2FwYWJpbGl0aWVzIHN1Y2ggYXMgbWlkZGxld2FyZSxcbiAqIHRpbWUgdHJhdmVsLCBwZXJzaXN0ZW5jZSwgZXRjLiBUaGUgb25seSBzdG9yZSBlbmhhbmNlciB0aGF0IHNoaXBzIHdpdGggUmVkdXhcbiAqIGlzIGBhcHBseU1pZGRsZXdhcmUoKWAuXG4gKlxuICogQHJldHVybnMge1N0b3JlfSBBIFJlZHV4IHN0b3JlIHRoYXQgbGV0cyB5b3UgcmVhZCB0aGUgc3RhdGUsIGRpc3BhdGNoIGFjdGlvbnNcbiAqIGFuZCBzdWJzY3JpYmUgdG8gY2hhbmdlcy5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlU3RvcmUocmVkdWNlciwgcHJlbG9hZGVkU3RhdGUsIGVuaGFuY2VyKSB7XG4gIHZhciBfcmVmMjtcblxuICBpZiAodHlwZW9mIHByZWxvYWRlZFN0YXRlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBlbmhhbmNlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBlbmhhbmNlciA9IHByZWxvYWRlZFN0YXRlO1xuICAgIHByZWxvYWRlZFN0YXRlID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBlbmhhbmNlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAodHlwZW9mIGVuaGFuY2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSBlbmhhbmNlciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIHJldHVybiBlbmhhbmNlcihjcmVhdGVTdG9yZSkocmVkdWNlciwgcHJlbG9hZGVkU3RhdGUpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiByZWR1Y2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgcmVkdWNlciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIGN1cnJlbnRSZWR1Y2VyID0gcmVkdWNlcjtcbiAgdmFyIGN1cnJlbnRTdGF0ZSA9IHByZWxvYWRlZFN0YXRlO1xuICB2YXIgY3VycmVudExpc3RlbmVycyA9IFtdO1xuICB2YXIgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnM7XG4gIHZhciBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpIHtcbiAgICBpZiAobmV4dExpc3RlbmVycyA9PT0gY3VycmVudExpc3RlbmVycykge1xuICAgICAgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMuc2xpY2UoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVhZHMgdGhlIHN0YXRlIHRyZWUgbWFuYWdlZCBieSB0aGUgc3RvcmUuXG4gICAqXG4gICAqIEByZXR1cm5zIHthbnl9IFRoZSBjdXJyZW50IHN0YXRlIHRyZWUgb2YgeW91ciBhcHBsaWNhdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGdldFN0YXRlKCkge1xuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtYXkgbm90IGNhbGwgc3RvcmUuZ2V0U3RhdGUoKSB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnVGhlIHJlZHVjZXIgaGFzIGFscmVhZHkgcmVjZWl2ZWQgdGhlIHN0YXRlIGFzIGFuIGFyZ3VtZW50LiAnICsgJ1Bhc3MgaXQgZG93biBmcm9tIHRoZSB0b3AgcmVkdWNlciBpbnN0ZWFkIG9mIHJlYWRpbmcgaXQgZnJvbSB0aGUgc3RvcmUuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGN1cnJlbnRTdGF0ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGEgY2hhbmdlIGxpc3RlbmVyLiBJdCB3aWxsIGJlIGNhbGxlZCBhbnkgdGltZSBhbiBhY3Rpb24gaXMgZGlzcGF0Y2hlZCxcbiAgICogYW5kIHNvbWUgcGFydCBvZiB0aGUgc3RhdGUgdHJlZSBtYXkgcG90ZW50aWFsbHkgaGF2ZSBjaGFuZ2VkLiBZb3UgbWF5IHRoZW5cbiAgICogY2FsbCBgZ2V0U3RhdGUoKWAgdG8gcmVhZCB0aGUgY3VycmVudCBzdGF0ZSB0cmVlIGluc2lkZSB0aGUgY2FsbGJhY2suXG4gICAqXG4gICAqIFlvdSBtYXkgY2FsbCBgZGlzcGF0Y2goKWAgZnJvbSBhIGNoYW5nZSBsaXN0ZW5lciwgd2l0aCB0aGUgZm9sbG93aW5nXG4gICAqIGNhdmVhdHM6XG4gICAqXG4gICAqIDEuIFRoZSBzdWJzY3JpcHRpb25zIGFyZSBzbmFwc2hvdHRlZCBqdXN0IGJlZm9yZSBldmVyeSBgZGlzcGF0Y2goKWAgY2FsbC5cbiAgICogSWYgeW91IHN1YnNjcmliZSBvciB1bnN1YnNjcmliZSB3aGlsZSB0aGUgbGlzdGVuZXJzIGFyZSBiZWluZyBpbnZva2VkLCB0aGlzXG4gICAqIHdpbGwgbm90IGhhdmUgYW55IGVmZmVjdCBvbiB0aGUgYGRpc3BhdGNoKClgIHRoYXQgaXMgY3VycmVudGx5IGluIHByb2dyZXNzLlxuICAgKiBIb3dldmVyLCB0aGUgbmV4dCBgZGlzcGF0Y2goKWAgY2FsbCwgd2hldGhlciBuZXN0ZWQgb3Igbm90LCB3aWxsIHVzZSBhIG1vcmVcbiAgICogcmVjZW50IHNuYXBzaG90IG9mIHRoZSBzdWJzY3JpcHRpb24gbGlzdC5cbiAgICpcbiAgICogMi4gVGhlIGxpc3RlbmVyIHNob3VsZCBub3QgZXhwZWN0IHRvIHNlZSBhbGwgc3RhdGUgY2hhbmdlcywgYXMgdGhlIHN0YXRlXG4gICAqIG1pZ2h0IGhhdmUgYmVlbiB1cGRhdGVkIG11bHRpcGxlIHRpbWVzIGR1cmluZyBhIG5lc3RlZCBgZGlzcGF0Y2goKWAgYmVmb3JlXG4gICAqIHRoZSBsaXN0ZW5lciBpcyBjYWxsZWQuIEl0IGlzLCBob3dldmVyLCBndWFyYW50ZWVkIHRoYXQgYWxsIHN1YnNjcmliZXJzXG4gICAqIHJlZ2lzdGVyZWQgYmVmb3JlIHRoZSBgZGlzcGF0Y2goKWAgc3RhcnRlZCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZSBsYXRlc3RcbiAgICogc3RhdGUgYnkgdGhlIHRpbWUgaXQgZXhpdHMuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIEEgY2FsbGJhY2sgdG8gYmUgaW52b2tlZCBvbiBldmVyeSBkaXNwYXRjaC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIHRvIHJlbW92ZSB0aGlzIGNoYW5nZSBsaXN0ZW5lci5cbiAgICovXG4gIGZ1bmN0aW9uIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIGxpc3RlbmVyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBub3QgY2FsbCBzdG9yZS5zdWJzY3JpYmUoKSB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnSWYgeW91IHdvdWxkIGxpa2UgdG8gYmUgbm90aWZpZWQgYWZ0ZXIgdGhlIHN0b3JlIGhhcyBiZWVuIHVwZGF0ZWQsIHN1YnNjcmliZSBmcm9tIGEgJyArICdjb21wb25lbnQgYW5kIGludm9rZSBzdG9yZS5nZXRTdGF0ZSgpIGluIHRoZSBjYWxsYmFjayB0byBhY2Nlc3MgdGhlIGxhdGVzdCBzdGF0ZS4gJyArICdTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvYXBpLXJlZmVyZW5jZS9zdG9yZSNzdWJzY3JpYmUobGlzdGVuZXIpIGZvciBtb3JlIGRldGFpbHMuJyk7XG4gICAgfVxuXG4gICAgdmFyIGlzU3Vic2NyaWJlZCA9IHRydWU7XG5cbiAgICBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCk7XG4gICAgbmV4dExpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgIGlmICghaXNTdWJzY3JpYmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbWF5IG5vdCB1bnN1YnNjcmliZSBmcm9tIGEgc3RvcmUgbGlzdGVuZXIgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ1NlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGktcmVmZXJlbmNlL3N0b3JlI3N1YnNjcmliZShsaXN0ZW5lcikgZm9yIG1vcmUgZGV0YWlscy4nKTtcbiAgICAgIH1cblxuICAgICAgaXNTdWJzY3JpYmVkID0gZmFsc2U7XG5cbiAgICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICAgIHZhciBpbmRleCA9IG5leHRMaXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcik7XG4gICAgICBuZXh0TGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNwYXRjaGVzIGFuIGFjdGlvbi4gSXQgaXMgdGhlIG9ubHkgd2F5IHRvIHRyaWdnZXIgYSBzdGF0ZSBjaGFuZ2UuXG4gICAqXG4gICAqIFRoZSBgcmVkdWNlcmAgZnVuY3Rpb24sIHVzZWQgdG8gY3JlYXRlIHRoZSBzdG9yZSwgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGVcbiAgICogY3VycmVudCBzdGF0ZSB0cmVlIGFuZCB0aGUgZ2l2ZW4gYGFjdGlvbmAuIEl0cyByZXR1cm4gdmFsdWUgd2lsbFxuICAgKiBiZSBjb25zaWRlcmVkIHRoZSAqKm5leHQqKiBzdGF0ZSBvZiB0aGUgdHJlZSwgYW5kIHRoZSBjaGFuZ2UgbGlzdGVuZXJzXG4gICAqIHdpbGwgYmUgbm90aWZpZWQuXG4gICAqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9ubHkgc3VwcG9ydHMgcGxhaW4gb2JqZWN0IGFjdGlvbnMuIElmIHlvdSB3YW50IHRvXG4gICAqIGRpc3BhdGNoIGEgUHJvbWlzZSwgYW4gT2JzZXJ2YWJsZSwgYSB0aHVuaywgb3Igc29tZXRoaW5nIGVsc2UsIHlvdSBuZWVkIHRvXG4gICAqIHdyYXAgeW91ciBzdG9yZSBjcmVhdGluZyBmdW5jdGlvbiBpbnRvIHRoZSBjb3JyZXNwb25kaW5nIG1pZGRsZXdhcmUuIEZvclxuICAgKiBleGFtcGxlLCBzZWUgdGhlIGRvY3VtZW50YXRpb24gZm9yIHRoZSBgcmVkdXgtdGh1bmtgIHBhY2thZ2UuIEV2ZW4gdGhlXG4gICAqIG1pZGRsZXdhcmUgd2lsbCBldmVudHVhbGx5IGRpc3BhdGNoIHBsYWluIG9iamVjdCBhY3Rpb25zIHVzaW5nIHRoaXMgbWV0aG9kLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gYWN0aW9uIEEgcGxhaW4gb2JqZWN0IHJlcHJlc2VudGluZyDigJx3aGF0IGNoYW5nZWTigJ0uIEl0IGlzXG4gICAqIGEgZ29vZCBpZGVhIHRvIGtlZXAgYWN0aW9ucyBzZXJpYWxpemFibGUgc28geW91IGNhbiByZWNvcmQgYW5kIHJlcGxheSB1c2VyXG4gICAqIHNlc3Npb25zLCBvciB1c2UgdGhlIHRpbWUgdHJhdmVsbGluZyBgcmVkdXgtZGV2dG9vbHNgLiBBbiBhY3Rpb24gbXVzdCBoYXZlXG4gICAqIGEgYHR5cGVgIHByb3BlcnR5IHdoaWNoIG1heSBub3QgYmUgYHVuZGVmaW5lZGAuIEl0IGlzIGEgZ29vZCBpZGVhIHRvIHVzZVxuICAgKiBzdHJpbmcgY29uc3RhbnRzIGZvciBhY3Rpb24gdHlwZXMuXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IEZvciBjb252ZW5pZW5jZSwgdGhlIHNhbWUgYWN0aW9uIG9iamVjdCB5b3UgZGlzcGF0Y2hlZC5cbiAgICpcbiAgICogTm90ZSB0aGF0LCBpZiB5b3UgdXNlIGEgY3VzdG9tIG1pZGRsZXdhcmUsIGl0IG1heSB3cmFwIGBkaXNwYXRjaCgpYCB0b1xuICAgKiByZXR1cm4gc29tZXRoaW5nIGVsc2UgKGZvciBleGFtcGxlLCBhIFByb21pc2UgeW91IGNhbiBhd2FpdCkuXG4gICAqL1xuICBmdW5jdGlvbiBkaXNwYXRjaChhY3Rpb24pIHtcbiAgICBpZiAoIWlzUGxhaW5PYmplY3QoYWN0aW9uKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBY3Rpb25zIG11c3QgYmUgcGxhaW4gb2JqZWN0cy4gJyArICdVc2UgY3VzdG9tIG1pZGRsZXdhcmUgZm9yIGFzeW5jIGFjdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBhY3Rpb24udHlwZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQWN0aW9ucyBtYXkgbm90IGhhdmUgYW4gdW5kZWZpbmVkIFwidHlwZVwiIHByb3BlcnR5LiAnICsgJ0hhdmUgeW91IG1pc3NwZWxsZWQgYSBjb25zdGFudD8nKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWR1Y2VycyBtYXkgbm90IGRpc3BhdGNoIGFjdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGlzRGlzcGF0Y2hpbmcgPSB0cnVlO1xuICAgICAgY3VycmVudFN0YXRlID0gY3VycmVudFJlZHVjZXIoY3VycmVudFN0YXRlLCBhY3Rpb24pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGxpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMgPSBuZXh0TGlzdGVuZXJzO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgbGlzdGVuZXIgPSBsaXN0ZW5lcnNbaV07XG4gICAgICBsaXN0ZW5lcigpO1xuICAgIH1cblxuICAgIHJldHVybiBhY3Rpb247XG4gIH1cblxuICAvKipcbiAgICogUmVwbGFjZXMgdGhlIHJlZHVjZXIgY3VycmVudGx5IHVzZWQgYnkgdGhlIHN0b3JlIHRvIGNhbGN1bGF0ZSB0aGUgc3RhdGUuXG4gICAqXG4gICAqIFlvdSBtaWdodCBuZWVkIHRoaXMgaWYgeW91ciBhcHAgaW1wbGVtZW50cyBjb2RlIHNwbGl0dGluZyBhbmQgeW91IHdhbnQgdG9cbiAgICogbG9hZCBzb21lIG9mIHRoZSByZWR1Y2VycyBkeW5hbWljYWxseS4gWW91IG1pZ2h0IGFsc28gbmVlZCB0aGlzIGlmIHlvdVxuICAgKiBpbXBsZW1lbnQgYSBob3QgcmVsb2FkaW5nIG1lY2hhbmlzbSBmb3IgUmVkdXguXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG5leHRSZWR1Y2VyIFRoZSByZWR1Y2VyIGZvciB0aGUgc3RvcmUgdG8gdXNlIGluc3RlYWQuXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgZnVuY3Rpb24gcmVwbGFjZVJlZHVjZXIobmV4dFJlZHVjZXIpIHtcbiAgICBpZiAodHlwZW9mIG5leHRSZWR1Y2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSBuZXh0UmVkdWNlciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIGN1cnJlbnRSZWR1Y2VyID0gbmV4dFJlZHVjZXI7XG4gICAgZGlzcGF0Y2goeyB0eXBlOiBBY3Rpb25UeXBlcy5SRVBMQUNFIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEludGVyb3BlcmFiaWxpdHkgcG9pbnQgZm9yIG9ic2VydmFibGUvcmVhY3RpdmUgbGlicmFyaWVzLlxuICAgKiBAcmV0dXJucyB7b2JzZXJ2YWJsZX0gQSBtaW5pbWFsIG9ic2VydmFibGUgb2Ygc3RhdGUgY2hhbmdlcy5cbiAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgb2JzZXJ2YWJsZSBwcm9wb3NhbDpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JzZXJ2YWJsZVxuICAgKi9cbiAgZnVuY3Rpb24gb2JzZXJ2YWJsZSgpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBvdXRlclN1YnNjcmliZSA9IHN1YnNjcmliZTtcbiAgICByZXR1cm4gX3JlZiA9IHtcbiAgICAgIC8qKlxuICAgICAgICogVGhlIG1pbmltYWwgb2JzZXJ2YWJsZSBzdWJzY3JpcHRpb24gbWV0aG9kLlxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9ic2VydmVyIEFueSBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCBhcyBhbiBvYnNlcnZlci5cbiAgICAgICAqIFRoZSBvYnNlcnZlciBvYmplY3Qgc2hvdWxkIGhhdmUgYSBgbmV4dGAgbWV0aG9kLlxuICAgICAgICogQHJldHVybnMge3N1YnNjcmlwdGlvbn0gQW4gb2JqZWN0IHdpdGggYW4gYHVuc3Vic2NyaWJlYCBtZXRob2QgdGhhdCBjYW5cbiAgICAgICAqIGJlIHVzZWQgdG8gdW5zdWJzY3JpYmUgdGhlIG9ic2VydmFibGUgZnJvbSB0aGUgc3RvcmUsIGFuZCBwcmV2ZW50IGZ1cnRoZXJcbiAgICAgICAqIGVtaXNzaW9uIG9mIHZhbHVlcyBmcm9tIHRoZSBvYnNlcnZhYmxlLlxuICAgICAgICovXG4gICAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShvYnNlcnZlcikge1xuICAgICAgICBpZiAoKHR5cGVvZiBvYnNlcnZlciA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2Yob2JzZXJ2ZXIpKSAhPT0gJ29iamVjdCcgfHwgb2JzZXJ2ZXIgPT09IG51bGwpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCB0aGUgb2JzZXJ2ZXIgdG8gYmUgYW4gb2JqZWN0LicpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gb2JzZXJ2ZVN0YXRlKCkge1xuICAgICAgICAgIGlmIChvYnNlcnZlci5uZXh0KSB7XG4gICAgICAgICAgICBvYnNlcnZlci5uZXh0KGdldFN0YXRlKCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG9ic2VydmVTdGF0ZSgpO1xuICAgICAgICB2YXIgdW5zdWJzY3JpYmUgPSBvdXRlclN1YnNjcmliZShvYnNlcnZlU3RhdGUpO1xuICAgICAgICByZXR1cm4geyB1bnN1YnNjcmliZTogdW5zdWJzY3JpYmUgfTtcbiAgICAgIH1cbiAgICB9LCBfcmVmWyQkb2JzZXJ2YWJsZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LCBfcmVmO1xuICB9XG5cbiAgLy8gV2hlbiBhIHN0b3JlIGlzIGNyZWF0ZWQsIGFuIFwiSU5JVFwiIGFjdGlvbiBpcyBkaXNwYXRjaGVkIHNvIHRoYXQgZXZlcnlcbiAgLy8gcmVkdWNlciByZXR1cm5zIHRoZWlyIGluaXRpYWwgc3RhdGUuIFRoaXMgZWZmZWN0aXZlbHkgcG9wdWxhdGVzXG4gIC8vIHRoZSBpbml0aWFsIHN0YXRlIHRyZWUuXG4gIGRpc3BhdGNoKHsgdHlwZTogQWN0aW9uVHlwZXMuSU5JVCB9KTtcblxuICByZXR1cm4gX3JlZjIgPSB7XG4gICAgZGlzcGF0Y2g6IGRpc3BhdGNoLFxuICAgIHN1YnNjcmliZTogc3Vic2NyaWJlLFxuICAgIGdldFN0YXRlOiBnZXRTdGF0ZSxcbiAgICByZXBsYWNlUmVkdWNlcjogcmVwbGFjZVJlZHVjZXJcbiAgfSwgX3JlZjJbJCRvYnNlcnZhYmxlXSA9IG9ic2VydmFibGUsIF9yZWYyO1xufVxuXG4vKipcbiAqIFByaW50cyBhIHdhcm5pbmcgaW4gdGhlIGNvbnNvbGUgaWYgaXQgZXhpc3RzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIFRoZSB3YXJuaW5nIG1lc3NhZ2UuXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gd2FybmluZyhtZXNzYWdlKSB7XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbiAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgY29uc29sZS5lcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gIH1cbiAgLyogZXNsaW50LWVuYWJsZSBuby1jb25zb2xlICovXG4gIHRyeSB7XG4gICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCBpZiB5b3UgZW5hYmxlXG4gICAgLy8gXCJicmVhayBvbiBhbGwgZXhjZXB0aW9uc1wiIGluIHlvdXIgY29uc29sZSxcbiAgICAvLyBpdCB3b3VsZCBwYXVzZSB0aGUgZXhlY3V0aW9uIGF0IHRoaXMgbGluZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIH0gY2F0Y2ggKGUpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcbn1cblxuZnVuY3Rpb24gZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2Uoa2V5LCBhY3Rpb24pIHtcbiAgdmFyIGFjdGlvblR5cGUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGU7XG4gIHZhciBhY3Rpb25EZXNjcmlwdGlvbiA9IGFjdGlvblR5cGUgJiYgJ2FjdGlvbiBcIicgKyBTdHJpbmcoYWN0aW9uVHlwZSkgKyAnXCInIHx8ICdhbiBhY3Rpb24nO1xuXG4gIHJldHVybiAnR2l2ZW4gJyArIGFjdGlvbkRlc2NyaXB0aW9uICsgJywgcmVkdWNlciBcIicgKyBrZXkgKyAnXCIgcmV0dXJuZWQgdW5kZWZpbmVkLiAnICsgJ1RvIGlnbm9yZSBhbiBhY3Rpb24sIHlvdSBtdXN0IGV4cGxpY2l0bHkgcmV0dXJuIHRoZSBwcmV2aW91cyBzdGF0ZS4gJyArICdJZiB5b3Ugd2FudCB0aGlzIHJlZHVjZXIgdG8gaG9sZCBubyB2YWx1ZSwgeW91IGNhbiByZXR1cm4gbnVsbCBpbnN0ZWFkIG9mIHVuZGVmaW5lZC4nO1xufVxuXG5mdW5jdGlvbiBnZXRVbmV4cGVjdGVkU3RhdGVTaGFwZVdhcm5pbmdNZXNzYWdlKGlucHV0U3RhdGUsIHJlZHVjZXJzLCBhY3Rpb24sIHVuZXhwZWN0ZWRLZXlDYWNoZSkge1xuICB2YXIgcmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhyZWR1Y2Vycyk7XG4gIHZhciBhcmd1bWVudE5hbWUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGUgPT09IEFjdGlvblR5cGVzLklOSVQgPyAncHJlbG9hZGVkU3RhdGUgYXJndW1lbnQgcGFzc2VkIHRvIGNyZWF0ZVN0b3JlJyA6ICdwcmV2aW91cyBzdGF0ZSByZWNlaXZlZCBieSB0aGUgcmVkdWNlcic7XG5cbiAgaWYgKHJlZHVjZXJLZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiAnU3RvcmUgZG9lcyBub3QgaGF2ZSBhIHZhbGlkIHJlZHVjZXIuIE1ha2Ugc3VyZSB0aGUgYXJndW1lbnQgcGFzc2VkICcgKyAndG8gY29tYmluZVJlZHVjZXJzIGlzIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIHJlZHVjZXJzLic7XG4gIH1cblxuICBpZiAoIWlzUGxhaW5PYmplY3QoaW5wdXRTdGF0ZSkpIHtcbiAgICByZXR1cm4gJ1RoZSAnICsgYXJndW1lbnROYW1lICsgJyBoYXMgdW5leHBlY3RlZCB0eXBlIG9mIFwiJyArIHt9LnRvU3RyaW5nLmNhbGwoaW5wdXRTdGF0ZSkubWF0Y2goL1xccyhbYS16fEEtWl0rKS8pWzFdICsgJ1wiLiBFeHBlY3RlZCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nICcgKyAoJ2tleXM6IFwiJyArIHJlZHVjZXJLZXlzLmpvaW4oJ1wiLCBcIicpICsgJ1wiJyk7XG4gIH1cblxuICB2YXIgdW5leHBlY3RlZEtleXMgPSBPYmplY3Qua2V5cyhpbnB1dFN0YXRlKS5maWx0ZXIoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiAhcmVkdWNlcnMuaGFzT3duUHJvcGVydHkoa2V5KSAmJiAhdW5leHBlY3RlZEtleUNhY2hlW2tleV07XG4gIH0pO1xuXG4gIHVuZXhwZWN0ZWRLZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZVtrZXldID0gdHJ1ZTtcbiAgfSk7XG5cbiAgaWYgKGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuUkVQTEFDRSkgcmV0dXJuO1xuXG4gIGlmICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuICdVbmV4cGVjdGVkICcgKyAodW5leHBlY3RlZEtleXMubGVuZ3RoID4gMSA/ICdrZXlzJyA6ICdrZXknKSArICcgJyArICgnXCInICsgdW5leHBlY3RlZEtleXMuam9pbignXCIsIFwiJykgKyAnXCIgZm91bmQgaW4gJyArIGFyZ3VtZW50TmFtZSArICcuICcpICsgJ0V4cGVjdGVkIHRvIGZpbmQgb25lIG9mIHRoZSBrbm93biByZWR1Y2VyIGtleXMgaW5zdGVhZDogJyArICgnXCInICsgcmVkdWNlcktleXMuam9pbignXCIsIFwiJykgKyAnXCIuIFVuZXhwZWN0ZWQga2V5cyB3aWxsIGJlIGlnbm9yZWQuJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0UmVkdWNlclNoYXBlKHJlZHVjZXJzKSB7XG4gIE9iamVjdC5rZXlzKHJlZHVjZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgcmVkdWNlciA9IHJlZHVjZXJzW2tleV07XG4gICAgdmFyIGluaXRpYWxTdGF0ZSA9IHJlZHVjZXIodW5kZWZpbmVkLCB7IHR5cGU6IEFjdGlvblR5cGVzLklOSVQgfSk7XG5cbiAgICBpZiAodHlwZW9mIGluaXRpYWxTdGF0ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUmVkdWNlciBcIicgKyBrZXkgKyAnXCIgcmV0dXJuZWQgdW5kZWZpbmVkIGR1cmluZyBpbml0aWFsaXphdGlvbi4gJyArICdJZiB0aGUgc3RhdGUgcGFzc2VkIHRvIHRoZSByZWR1Y2VyIGlzIHVuZGVmaW5lZCwgeW91IG11c3QgJyArICdleHBsaWNpdGx5IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZS4gVGhlIGluaXRpYWwgc3RhdGUgbWF5ICcgKyAnbm90IGJlIHVuZGVmaW5lZC4gSWYgeW91IGRvblxcJ3Qgd2FudCB0byBzZXQgYSB2YWx1ZSBmb3IgdGhpcyByZWR1Y2VyLCAnICsgJ3lvdSBjYW4gdXNlIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuJyk7XG4gICAgfVxuXG4gICAgdmFyIHR5cGUgPSAnQEByZWR1eC9QUk9CRV9VTktOT1dOX0FDVElPTl8nICsgTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDcpLnNwbGl0KCcnKS5qb2luKCcuJyk7XG4gICAgaWYgKHR5cGVvZiByZWR1Y2VyKHVuZGVmaW5lZCwgeyB0eXBlOiB0eXBlIH0pID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWR1Y2VyIFwiJyArIGtleSArICdcIiByZXR1cm5lZCB1bmRlZmluZWQgd2hlbiBwcm9iZWQgd2l0aCBhIHJhbmRvbSB0eXBlLiAnICsgKCdEb25cXCd0IHRyeSB0byBoYW5kbGUgJyArIEFjdGlvblR5cGVzLklOSVQgKyAnIG9yIG90aGVyIGFjdGlvbnMgaW4gXCJyZWR1eC8qXCIgJykgKyAnbmFtZXNwYWNlLiBUaGV5IGFyZSBjb25zaWRlcmVkIHByaXZhdGUuIEluc3RlYWQsIHlvdSBtdXN0IHJldHVybiB0aGUgJyArICdjdXJyZW50IHN0YXRlIGZvciBhbnkgdW5rbm93biBhY3Rpb25zLCB1bmxlc3MgaXQgaXMgdW5kZWZpbmVkLCAnICsgJ2luIHdoaWNoIGNhc2UgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLCByZWdhcmRsZXNzIG9mIHRoZSAnICsgJ2FjdGlvbiB0eXBlLiBUaGUgaW5pdGlhbCBzdGF0ZSBtYXkgbm90IGJlIHVuZGVmaW5lZCwgYnV0IGNhbiBiZSBudWxsLicpO1xuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICogVHVybnMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgZGlmZmVyZW50IHJlZHVjZXIgZnVuY3Rpb25zLCBpbnRvIGEgc2luZ2xlXG4gKiByZWR1Y2VyIGZ1bmN0aW9uLiBJdCB3aWxsIGNhbGwgZXZlcnkgY2hpbGQgcmVkdWNlciwgYW5kIGdhdGhlciB0aGVpciByZXN1bHRzXG4gKiBpbnRvIGEgc2luZ2xlIHN0YXRlIG9iamVjdCwgd2hvc2Uga2V5cyBjb3JyZXNwb25kIHRvIHRoZSBrZXlzIG9mIHRoZSBwYXNzZWRcbiAqIHJlZHVjZXIgZnVuY3Rpb25zLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWR1Y2VycyBBbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGNvcnJlc3BvbmQgdG8gZGlmZmVyZW50XG4gKiByZWR1Y2VyIGZ1bmN0aW9ucyB0aGF0IG5lZWQgdG8gYmUgY29tYmluZWQgaW50byBvbmUuIE9uZSBoYW5keSB3YXkgdG8gb2J0YWluXG4gKiBpdCBpcyB0byB1c2UgRVM2IGBpbXBvcnQgKiBhcyByZWR1Y2Vyc2Agc3ludGF4LiBUaGUgcmVkdWNlcnMgbWF5IG5ldmVyIHJldHVyblxuICogdW5kZWZpbmVkIGZvciBhbnkgYWN0aW9uLiBJbnN0ZWFkLCB0aGV5IHNob3VsZCByZXR1cm4gdGhlaXIgaW5pdGlhbCBzdGF0ZVxuICogaWYgdGhlIHN0YXRlIHBhc3NlZCB0byB0aGVtIHdhcyB1bmRlZmluZWQsIGFuZCB0aGUgY3VycmVudCBzdGF0ZSBmb3IgYW55XG4gKiB1bnJlY29nbml6ZWQgYWN0aW9uLlxuICpcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSByZWR1Y2VyIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBldmVyeSByZWR1Y2VyIGluc2lkZSB0aGVcbiAqIHBhc3NlZCBvYmplY3QsIGFuZCBidWlsZHMgYSBzdGF0ZSBvYmplY3Qgd2l0aCB0aGUgc2FtZSBzaGFwZS5cbiAqL1xuZnVuY3Rpb24gY29tYmluZVJlZHVjZXJzKHJlZHVjZXJzKSB7XG4gIHZhciByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgdmFyIGZpbmFsUmVkdWNlcnMgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByZWR1Y2VyS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSByZWR1Y2VyS2V5c1tpXTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAodHlwZW9mIHJlZHVjZXJzW2tleV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHdhcm5pbmcoJ05vIHJlZHVjZXIgcHJvdmlkZWQgZm9yIGtleSBcIicgKyBrZXkgKyAnXCInKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJlZHVjZXJzW2tleV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGZpbmFsUmVkdWNlcnNba2V5XSA9IHJlZHVjZXJzW2tleV07XG4gICAgfVxuICB9XG4gIHZhciBmaW5hbFJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMoZmluYWxSZWR1Y2Vycyk7XG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlDYWNoZSA9IHZvaWQgMDtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB1bmV4cGVjdGVkS2V5Q2FjaGUgPSB7fTtcbiAgfVxuXG4gIHZhciBzaGFwZUFzc2VydGlvbkVycm9yID0gdm9pZCAwO1xuICB0cnkge1xuICAgIGFzc2VydFJlZHVjZXJTaGFwZShmaW5hbFJlZHVjZXJzKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHNoYXBlQXNzZXJ0aW9uRXJyb3IgPSBlO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbWJpbmF0aW9uKCkge1xuICAgIHZhciBzdGF0ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgdmFyIGFjdGlvbiA9IGFyZ3VtZW50c1sxXTtcblxuICAgIGlmIChzaGFwZUFzc2VydGlvbkVycm9yKSB7XG4gICAgICB0aHJvdyBzaGFwZUFzc2VydGlvbkVycm9yO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgd2FybmluZ01lc3NhZ2UgPSBnZXRVbmV4cGVjdGVkU3RhdGVTaGFwZVdhcm5pbmdNZXNzYWdlKHN0YXRlLCBmaW5hbFJlZHVjZXJzLCBhY3Rpb24sIHVuZXhwZWN0ZWRLZXlDYWNoZSk7XG4gICAgICBpZiAod2FybmluZ01lc3NhZ2UpIHtcbiAgICAgICAgd2FybmluZyh3YXJuaW5nTWVzc2FnZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGhhc0NoYW5nZWQgPSBmYWxzZTtcbiAgICB2YXIgbmV4dFN0YXRlID0ge307XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGZpbmFsUmVkdWNlcktleXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2tleSA9IGZpbmFsUmVkdWNlcktleXNbX2ldO1xuICAgICAgdmFyIHJlZHVjZXIgPSBmaW5hbFJlZHVjZXJzW19rZXldO1xuICAgICAgdmFyIHByZXZpb3VzU3RhdGVGb3JLZXkgPSBzdGF0ZVtfa2V5XTtcbiAgICAgIHZhciBuZXh0U3RhdGVGb3JLZXkgPSByZWR1Y2VyKHByZXZpb3VzU3RhdGVGb3JLZXksIGFjdGlvbik7XG4gICAgICBpZiAodHlwZW9mIG5leHRTdGF0ZUZvcktleSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdmFyIGVycm9yTWVzc2FnZSA9IGdldFVuZGVmaW5lZFN0YXRlRXJyb3JNZXNzYWdlKF9rZXksIGFjdGlvbik7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvck1lc3NhZ2UpO1xuICAgICAgfVxuICAgICAgbmV4dFN0YXRlW19rZXldID0gbmV4dFN0YXRlRm9yS2V5O1xuICAgICAgaGFzQ2hhbmdlZCA9IGhhc0NoYW5nZWQgfHwgbmV4dFN0YXRlRm9yS2V5ICE9PSBwcmV2aW91c1N0YXRlRm9yS2V5O1xuICAgIH1cbiAgICByZXR1cm4gaGFzQ2hhbmdlZCA/IG5leHRTdGF0ZSA6IHN0YXRlO1xuICB9O1xufVxuXG5mdW5jdGlvbiBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9yLCBkaXNwYXRjaCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkaXNwYXRjaChhY3Rpb25DcmVhdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9O1xufVxuXG4vKipcbiAqIFR1cm5zIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGFjdGlvbiBjcmVhdG9ycywgaW50byBhbiBvYmplY3Qgd2l0aCB0aGVcbiAqIHNhbWUga2V5cywgYnV0IHdpdGggZXZlcnkgZnVuY3Rpb24gd3JhcHBlZCBpbnRvIGEgYGRpc3BhdGNoYCBjYWxsIHNvIHRoZXlcbiAqIG1heSBiZSBpbnZva2VkIGRpcmVjdGx5LiBUaGlzIGlzIGp1c3QgYSBjb252ZW5pZW5jZSBtZXRob2QsIGFzIHlvdSBjYW4gY2FsbFxuICogYHN0b3JlLmRpc3BhdGNoKE15QWN0aW9uQ3JlYXRvcnMuZG9Tb21ldGhpbmcoKSlgIHlvdXJzZWxmIGp1c3QgZmluZS5cbiAqXG4gKiBGb3IgY29udmVuaWVuY2UsIHlvdSBjYW4gYWxzbyBwYXNzIGEgc2luZ2xlIGZ1bmN0aW9uIGFzIHRoZSBmaXJzdCBhcmd1bWVudCxcbiAqIGFuZCBnZXQgYSBmdW5jdGlvbiBpbiByZXR1cm4uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R9IGFjdGlvbkNyZWF0b3JzIEFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGFjdGlvblxuICogY3JlYXRvciBmdW5jdGlvbnMuIE9uZSBoYW5keSB3YXkgdG8gb2J0YWluIGl0IGlzIHRvIHVzZSBFUzYgYGltcG9ydCAqIGFzYFxuICogc3ludGF4LiBZb3UgbWF5IGFsc28gcGFzcyBhIHNpbmdsZSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBkaXNwYXRjaCBUaGUgYGRpc3BhdGNoYCBmdW5jdGlvbiBhdmFpbGFibGUgb24geW91ciBSZWR1eFxuICogc3RvcmUuXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufE9iamVjdH0gVGhlIG9iamVjdCBtaW1pY2tpbmcgdGhlIG9yaWdpbmFsIG9iamVjdCwgYnV0IHdpdGhcbiAqIGV2ZXJ5IGFjdGlvbiBjcmVhdG9yIHdyYXBwZWQgaW50byB0aGUgYGRpc3BhdGNoYCBjYWxsLiBJZiB5b3UgcGFzc2VkIGFcbiAqIGZ1bmN0aW9uIGFzIGBhY3Rpb25DcmVhdG9yc2AsIHRoZSByZXR1cm4gdmFsdWUgd2lsbCBhbHNvIGJlIGEgc2luZ2xlXG4gKiBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3JzKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCkge1xuICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3JzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCk7XG4gIH1cblxuICBpZiAoKHR5cGVvZiBhY3Rpb25DcmVhdG9ycyA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoYWN0aW9uQ3JlYXRvcnMpKSAhPT0gJ29iamVjdCcgfHwgYWN0aW9uQ3JlYXRvcnMgPT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2JpbmRBY3Rpb25DcmVhdG9ycyBleHBlY3RlZCBhbiBvYmplY3Qgb3IgYSBmdW5jdGlvbiwgaW5zdGVhZCByZWNlaXZlZCAnICsgKGFjdGlvbkNyZWF0b3JzID09PSBudWxsID8gJ251bGwnIDogdHlwZW9mIGFjdGlvbkNyZWF0b3JzID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihhY3Rpb25DcmVhdG9ycykpICsgJy4gJyArICdEaWQgeW91IHdyaXRlIFwiaW1wb3J0IEFjdGlvbkNyZWF0b3JzIGZyb21cIiBpbnN0ZWFkIG9mIFwiaW1wb3J0ICogYXMgQWN0aW9uQ3JlYXRvcnMgZnJvbVwiPycpO1xuICB9XG5cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhhY3Rpb25DcmVhdG9ycyk7XG4gIHZhciBib3VuZEFjdGlvbkNyZWF0b3JzID0ge307XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIHZhciBhY3Rpb25DcmVhdG9yID0gYWN0aW9uQ3JlYXRvcnNba2V5XTtcbiAgICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGJvdW5kQWN0aW9uQ3JlYXRvcnNba2V5XSA9IGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IsIGRpc3BhdGNoKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGJvdW5kQWN0aW9uQ3JlYXRvcnM7XG59XG5cbi8qKlxuICogQ29tcG9zZXMgc2luZ2xlLWFyZ3VtZW50IGZ1bmN0aW9ucyBmcm9tIHJpZ2h0IHRvIGxlZnQuIFRoZSByaWdodG1vc3RcbiAqIGZ1bmN0aW9uIGNhbiB0YWtlIG11bHRpcGxlIGFyZ3VtZW50cyBhcyBpdCBwcm92aWRlcyB0aGUgc2lnbmF0dXJlIGZvclxuICogdGhlIHJlc3VsdGluZyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gZnVuY3MgVGhlIGZ1bmN0aW9ucyB0byBjb21wb3NlLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIG9idGFpbmVkIGJ5IGNvbXBvc2luZyB0aGUgYXJndW1lbnQgZnVuY3Rpb25zXG4gKiBmcm9tIHJpZ2h0IHRvIGxlZnQuIEZvciBleGFtcGxlLCBjb21wb3NlKGYsIGcsIGgpIGlzIGlkZW50aWNhbCB0byBkb2luZ1xuICogKC4uLmFyZ3MpID0+IGYoZyhoKC4uLmFyZ3MpKSkuXG4gKi9cblxuZnVuY3Rpb24gY29tcG9zZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGZ1bmNzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgZnVuY3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBpZiAoZnVuY3MubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgIHJldHVybiBhcmc7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gZnVuY3NbMF07XG4gIH1cblxuICByZXR1cm4gZnVuY3MucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBhKGIuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpKTtcbiAgICB9O1xuICB9KTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RvcmUgZW5oYW5jZXIgdGhhdCBhcHBsaWVzIG1pZGRsZXdhcmUgdG8gdGhlIGRpc3BhdGNoIG1ldGhvZFxuICogb2YgdGhlIFJlZHV4IHN0b3JlLiBUaGlzIGlzIGhhbmR5IGZvciBhIHZhcmlldHkgb2YgdGFza3MsIHN1Y2ggYXMgZXhwcmVzc2luZ1xuICogYXN5bmNocm9ub3VzIGFjdGlvbnMgaW4gYSBjb25jaXNlIG1hbm5lciwgb3IgbG9nZ2luZyBldmVyeSBhY3Rpb24gcGF5bG9hZC5cbiAqXG4gKiBTZWUgYHJlZHV4LXRodW5rYCBwYWNrYWdlIGFzIGFuIGV4YW1wbGUgb2YgdGhlIFJlZHV4IG1pZGRsZXdhcmUuXG4gKlxuICogQmVjYXVzZSBtaWRkbGV3YXJlIGlzIHBvdGVudGlhbGx5IGFzeW5jaHJvbm91cywgdGhpcyBzaG91bGQgYmUgdGhlIGZpcnN0XG4gKiBzdG9yZSBlbmhhbmNlciBpbiB0aGUgY29tcG9zaXRpb24gY2hhaW4uXG4gKlxuICogTm90ZSB0aGF0IGVhY2ggbWlkZGxld2FyZSB3aWxsIGJlIGdpdmVuIHRoZSBgZGlzcGF0Y2hgIGFuZCBgZ2V0U3RhdGVgIGZ1bmN0aW9uc1xuICogYXMgbmFtZWQgYXJndW1lbnRzLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IG1pZGRsZXdhcmVzIFRoZSBtaWRkbGV3YXJlIGNoYWluIHRvIGJlIGFwcGxpZWQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgc3RvcmUgZW5oYW5jZXIgYXBwbHlpbmcgdGhlIG1pZGRsZXdhcmUuXG4gKi9cbmZ1bmN0aW9uIGFwcGx5TWlkZGxld2FyZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIG1pZGRsZXdhcmVzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgbWlkZGxld2FyZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGNyZWF0ZVN0b3JlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cblxuICAgICAgdmFyIHN0b3JlID0gY3JlYXRlU3RvcmUuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICAgIHZhciBfZGlzcGF0Y2ggPSBmdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdEaXNwYXRjaGluZyB3aGlsZSBjb25zdHJ1Y3RpbmcgeW91ciBtaWRkbGV3YXJlIGlzIG5vdCBhbGxvd2VkLiAnICsgJ090aGVyIG1pZGRsZXdhcmUgd291bGQgbm90IGJlIGFwcGxpZWQgdG8gdGhpcyBkaXNwYXRjaC4nKTtcbiAgICAgIH07XG5cbiAgICAgIHZhciBtaWRkbGV3YXJlQVBJID0ge1xuICAgICAgICBnZXRTdGF0ZTogc3RvcmUuZ2V0U3RhdGUsXG4gICAgICAgIGRpc3BhdGNoOiBmdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgICAgICAgICByZXR1cm4gX2Rpc3BhdGNoLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHZhciBjaGFpbiA9IG1pZGRsZXdhcmVzLm1hcChmdW5jdGlvbiAobWlkZGxld2FyZSkge1xuICAgICAgICByZXR1cm4gbWlkZGxld2FyZShtaWRkbGV3YXJlQVBJKTtcbiAgICAgIH0pO1xuICAgICAgX2Rpc3BhdGNoID0gY29tcG9zZS5hcHBseSh1bmRlZmluZWQsIGNoYWluKShzdG9yZS5kaXNwYXRjaCk7XG5cbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgc3RvcmUsIHtcbiAgICAgICAgZGlzcGF0Y2g6IF9kaXNwYXRjaFxuICAgICAgfSk7XG4gICAgfTtcbiAgfTtcbn1cblxuLypcbiAqIFRoaXMgaXMgYSBkdW1teSBmdW5jdGlvbiB0byBjaGVjayBpZiB0aGUgZnVuY3Rpb24gbmFtZSBoYXMgYmVlbiBhbHRlcmVkIGJ5IG1pbmlmaWNhdGlvbi5cbiAqIElmIHRoZSBmdW5jdGlvbiBoYXMgYmVlbiBtaW5pZmllZCBhbmQgTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJywgd2FybiB0aGUgdXNlci5cbiAqL1xuZnVuY3Rpb24gaXNDcnVzaGVkKCkge31cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZW9mIGlzQ3J1c2hlZC5uYW1lID09PSAnc3RyaW5nJyAmJiBpc0NydXNoZWQubmFtZSAhPT0gJ2lzQ3J1c2hlZCcpIHtcbiAgd2FybmluZyhcIllvdSBhcmUgY3VycmVudGx5IHVzaW5nIG1pbmlmaWVkIGNvZGUgb3V0c2lkZSBvZiBOT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nLiBcIiArICdUaGlzIG1lYW5zIHRoYXQgeW91IGFyZSBydW5uaW5nIGEgc2xvd2VyIGRldmVsb3BtZW50IGJ1aWxkIG9mIFJlZHV4LiAnICsgJ1lvdSBjYW4gdXNlIGxvb3NlLWVudmlmeSAoaHR0cHM6Ly9naXRodWIuY29tL3plcnRvc2gvbG9vc2UtZW52aWZ5KSBmb3IgYnJvd3NlcmlmeSAnICsgJ29yIERlZmluZVBsdWdpbiBmb3Igd2VicGFjayAoaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zMDAzMDAzMSkgJyArICd0byBlbnN1cmUgeW91IGhhdmUgdGhlIGNvcnJlY3QgY29kZSBmb3IgeW91ciBwcm9kdWN0aW9uIGJ1aWxkLicpO1xufVxuXG5leHBvcnQgeyBjcmVhdGVTdG9yZSwgY29tYmluZVJlZHVjZXJzLCBiaW5kQWN0aW9uQ3JlYXRvcnMsIGFwcGx5TWlkZGxld2FyZSwgY29tcG9zZSwgQWN0aW9uVHlwZXMgYXMgX19ET19OT1RfVVNFX19BY3Rpb25UeXBlcyB9O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXNlIGludmFyaWFudCgpIHRvIGFzc2VydCBzdGF0ZSB3aGljaCB5b3VyIHByb2dyYW0gYXNzdW1lcyB0byBiZSB0cnVlLlxuICpcbiAqIFByb3ZpZGUgc3ByaW50Zi1zdHlsZSBmb3JtYXQgKG9ubHkgJXMgaXMgc3VwcG9ydGVkKSBhbmQgYXJndW1lbnRzXG4gKiB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgYnJva2UgYW5kIHdoYXQgeW91IHdlcmVcbiAqIGV4cGVjdGluZy5cbiAqXG4gKiBUaGUgaW52YXJpYW50IG1lc3NhZ2Ugd2lsbCBiZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGludmFyaWFudFxuICogd2lsbCByZW1haW4gdG8gZW5zdXJlIGxvZ2ljIGRvZXMgbm90IGRpZmZlciBpbiBwcm9kdWN0aW9uLlxuICovXG5cbnZhciBpbnZhcmlhbnQgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYSwgYiwgYywgZCwgZSwgZikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhcmlhbnQgcmVxdWlyZXMgYW4gZXJyb3IgbWVzc2FnZSBhcmd1bWVudCcpO1xuICAgIH1cbiAgfVxuXG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgdmFyIGVycm9yO1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgICdNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCAnICtcbiAgICAgICAgJ2ZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuJ1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFyZ3MgPSBbYSwgYiwgYywgZCwgZSwgZl07XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107IH0pXG4gICAgICApO1xuICAgICAgZXJyb3IubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB9XG5cbiAgICBlcnJvci5mcmFtZXNUb1BvcCA9IDE7IC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgaW52YXJpYW50J3Mgb3duIGZyYW1lXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaW52YXJpYW50O1xuIiwiLyogZ2xvYmFsIHdpbmRvdyAqL1xuaW1wb3J0IHBvbnlmaWxsIGZyb20gJy4vcG9ueWZpbGwuanMnO1xuXG52YXIgcm9vdDtcblxuaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gc2VsZjtcbn0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IHdpbmRvdztcbn0gZWxzZSBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IGdsb2JhbDtcbn0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IG1vZHVsZTtcbn0gZWxzZSB7XG4gIHJvb3QgPSBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xufVxuXG52YXIgcmVzdWx0ID0gcG9ueWZpbGwocm9vdCk7XG5leHBvcnQgZGVmYXVsdCByZXN1bHQ7XG4iLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBpc09sZElFID0gZnVuY3Rpb24gaXNPbGRJRSgpIHtcbiAgdmFyIG1lbW87XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSgpIHtcbiAgICBpZiAodHlwZW9mIG1lbW8gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuICAgICAgLy8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuICAgICAgLy8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuICAgICAgLy8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG4gICAgICAvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcbiAgICAgIG1lbW8gPSBCb29sZWFuKHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtbztcbiAgfTtcbn0oKTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uIGdldFRhcmdldCgpIHtcbiAgdmFyIG1lbW8gPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKHRhcmdldCkge1xuICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtb1t0YXJnZXRdO1xuICB9O1xufSgpO1xuXG52YXIgc3R5bGVzSW5Eb20gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRvbS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRvbVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdXG4gICAgfTtcblxuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZXNJbkRvbS5wdXNoKHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogYWRkU3R5bGUob2JqLCBvcHRpb25zKSxcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgdmFyIGF0dHJpYnV0ZXMgPSBvcHRpb25zLmF0dHJpYnV0ZXMgfHwge307XG5cbiAgaWYgKHR5cGVvZiBhdHRyaWJ1dGVzLm5vbmNlID09PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gJ3VuZGVmaW5lZCcgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgICBpZiAobm9uY2UpIHtcbiAgICAgIGF0dHJpYnV0ZXMubm9uY2UgPSBub25jZTtcbiAgICB9XG4gIH1cblxuICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyaWJ1dGVzW2tleV0pO1xuICB9KTtcblxuICBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb3B0aW9ucy5pbnNlcnQoc3R5bGUpO1xuICB9IGVsc2Uge1xuICAgIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQob3B0aW9ucy5pbnNlcnQgfHwgJ2hlYWQnKTtcblxuICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICAgIH1cblxuICAgIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gIH1cblxuICByZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbnZhciByZXBsYWNlVGV4dCA9IGZ1bmN0aW9uIHJlcGxhY2VUZXh0KCkge1xuICB2YXIgdGV4dFN0b3JlID0gW107XG4gIHJldHVybiBmdW5jdGlvbiByZXBsYWNlKGluZGV4LCByZXBsYWNlbWVudCkge1xuICAgIHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcbiAgICByZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKTtcbiAgfTtcbn0oKTtcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyhzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG4gIHZhciBjc3MgPSByZW1vdmUgPyAnJyA6IG9iai5tZWRpYSA/IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIikuY29uY2F0KG9iai5jc3MsIFwifVwiKSA6IG9iai5jc3M7IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcyk7XG4gICAgdmFyIGNoaWxkTm9kZXMgPSBzdHlsZS5jaGlsZE5vZGVzO1xuXG4gICAgaWYgKGNoaWxkTm9kZXNbaW5kZXhdKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfVxuXG4gICAgaWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgICBzdHlsZS5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZS5hcHBlbmRDaGlsZChjc3NOb2RlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyhzdHlsZSwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBvYmouY3NzO1xuICB2YXIgbWVkaWEgPSBvYmoubWVkaWE7XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChtZWRpYSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZSgnbWVkaWEnLCBtZWRpYSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUucmVtb3ZlQXR0cmlidXRlKCdtZWRpYScpO1xuICB9XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiBidG9hKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZS5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG52YXIgc2luZ2xldG9uID0gbnVsbDtcbnZhciBzaW5nbGV0b25Db3VudGVyID0gMDtcblxuZnVuY3Rpb24gYWRkU3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBzdHlsZTtcbiAgdmFyIHVwZGF0ZTtcbiAgdmFyIHJlbW92ZTtcblxuICBpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcbiAgICB2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrKztcbiAgICBzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIGZhbHNlKTtcbiAgICByZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cbiAgICByZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuICAgIH07XG4gIH1cblxuICB1cGRhdGUob2JqKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB1cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlKCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OyAvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cbiAgLy8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXG4gIGlmICghb3B0aW9ucy5zaW5nbGV0b24gJiYgdHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uICE9PSAnYm9vbGVhbicpIHtcbiAgICBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcbiAgfVxuXG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobmV3TGlzdCkgIT09ICdbb2JqZWN0IEFycmF5XScpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5Eb21bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRG9tW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRG9tLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVzZVNvdXJjZU1hcCkge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIHJldHVybiBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoY29udGVudCwgXCJ9XCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKCcnKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIChtb2R1bGVzLCBtZWRpYVF1ZXJ5LCBkZWR1cGUpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsICcnXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICAgICAgdmFyIGlkID0gdGhpc1tpXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBtb2R1bGVzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfaV0pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRpbnVlXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWFRdWVyeSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzJdID0gXCJcIi5jb25jYXQobWVkaWFRdWVyeSwgXCIgYW5kIFwiKS5jb25jYXQoaXRlbVsyXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07XG5cbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCAnJzsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG5cbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG5cbiAgaWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QgfHwgJycpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oJ1xcbicpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKCdcXG4nKTtcbn0gLy8gQWRhcHRlZCBmcm9tIGNvbnZlcnQtc291cmNlLW1hcCAoTUlUKVxuXG5cbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xuICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gIHJldHVybiBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG59IiwiZXhwb3J0IGNvbnN0IEFERF9UT0RPID0gXCJBRERfVE9ET1wiO1xuZXhwb3J0IGNvbnN0IEVESVRfSVRFTSA9IFwiRURJVF9JVEVNXCI7XG5leHBvcnQgY29uc3QgREVMRVRFX0lURU0gPSBcIkRFTEVURV9JVEVNXCI7XG5leHBvcnQgY29uc3QgU0VUX0VESVQgPSBcIlNFVF9FRElUXCI7XG5cbmNvbnN0IGFkZFRvZG8gPSB0ZXh0ID0+IHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBBRERfVE9ETyxcbiAgICB0ZXh0XG4gIH07XG59O1xuXG5jb25zdCBlZGl0SXRlbSA9IHVwZGF0ZWRJdGVtID0+IHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBFRElUX0lURU0sXG4gICAgdXBkYXRlZEl0ZW1cbiAgfTtcbn07XG5cbmNvbnN0IGRlbGV0ZUl0ZW0gPSBkZWxldGVLZXkgPT4ge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IERFTEVURV9JVEVNLFxuICAgIGRlbGV0ZUtleVxuICB9O1xufTtcblxuY29uc3Qgc2V0RWRpdCA9IGVkaXRLZXkgPT4ge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IFNFVF9FRElULFxuICAgIGVkaXRLZXlcbiAgfTtcbn07XG5cbmV4cG9ydCB7IGFkZFRvZG8sIGVkaXRJdGVtLCBkZWxldGVJdGVtLCBzZXRFZGl0IH07XG4iLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5leHBvcnQgdmFyIHN1YnNjcmlwdGlvblNoYXBlID0gUHJvcFR5cGVzLnNoYXBlKHtcbiAgdHJ5U3Vic2NyaWJlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICB0cnlVbnN1YnNjcmliZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgbm90aWZ5TmVzdGVkU3ViczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgaXNTdWJzY3JpYmVkOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG59KTtcblxuZXhwb3J0IHZhciBzdG9yZVNoYXBlID0gUHJvcFR5cGVzLnNoYXBlKHtcbiAgc3Vic2NyaWJlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBkaXNwYXRjaDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgZ2V0U3RhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbn0pOyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBDaGlsZHJlbiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBzdG9yZVNoYXBlLCBzdWJzY3JpcHRpb25TaGFwZSB9IGZyb20gJy4uL3V0aWxzL1Byb3BUeXBlcyc7XG5pbXBvcnQgd2FybmluZyBmcm9tICcuLi91dGlscy93YXJuaW5nJztcblxudmFyIGRpZFdhcm5BYm91dFJlY2VpdmluZ1N0b3JlID0gZmFsc2U7XG5mdW5jdGlvbiB3YXJuQWJvdXRSZWNlaXZpbmdTdG9yZSgpIHtcbiAgaWYgKGRpZFdhcm5BYm91dFJlY2VpdmluZ1N0b3JlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGRpZFdhcm5BYm91dFJlY2VpdmluZ1N0b3JlID0gdHJ1ZTtcblxuICB3YXJuaW5nKCc8UHJvdmlkZXI+IGRvZXMgbm90IHN1cHBvcnQgY2hhbmdpbmcgYHN0b3JlYCBvbiB0aGUgZmx5LiAnICsgJ0l0IGlzIG1vc3QgbGlrZWx5IHRoYXQgeW91IHNlZSB0aGlzIGVycm9yIGJlY2F1c2UgeW91IHVwZGF0ZWQgdG8gJyArICdSZWR1eCAyLnggYW5kIFJlYWN0IFJlZHV4IDIueCB3aGljaCBubyBsb25nZXIgaG90IHJlbG9hZCByZWR1Y2VycyAnICsgJ2F1dG9tYXRpY2FsbHkuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC1yZWR1eC9yZWxlYXNlcy8nICsgJ3RhZy92Mi4wLjAgZm9yIHRoZSBtaWdyYXRpb24gaW5zdHJ1Y3Rpb25zLicpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUHJvdmlkZXIoKSB7XG4gIHZhciBfUHJvdmlkZXIkY2hpbGRDb250ZXg7XG5cbiAgdmFyIHN0b3JlS2V5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAnc3RvcmUnO1xuICB2YXIgc3ViS2V5ID0gYXJndW1lbnRzWzFdO1xuXG4gIHZhciBzdWJzY3JpcHRpb25LZXkgPSBzdWJLZXkgfHwgc3RvcmVLZXkgKyAnU3Vic2NyaXB0aW9uJztcblxuICB2YXIgUHJvdmlkZXIgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhQcm92aWRlciwgX0NvbXBvbmVudCk7XG5cbiAgICBQcm92aWRlci5wcm90b3R5cGUuZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIHJldHVybiBfcmVmID0ge30sIF9yZWZbc3RvcmVLZXldID0gdGhpc1tzdG9yZUtleV0sIF9yZWZbc3Vic2NyaXB0aW9uS2V5XSA9IG51bGwsIF9yZWY7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIFByb3ZpZGVyKHByb3BzLCBjb250ZXh0KSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUHJvdmlkZXIpO1xuXG4gICAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpKTtcblxuICAgICAgX3RoaXNbc3RvcmVLZXldID0gcHJvcHMuc3RvcmU7XG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgUHJvdmlkZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBDaGlsZHJlbi5vbmx5KHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuICAgIH07XG5cbiAgICByZXR1cm4gUHJvdmlkZXI7XG4gIH0oQ29tcG9uZW50KTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIFByb3ZpZGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gKG5leHRQcm9wcykge1xuICAgICAgaWYgKHRoaXNbc3RvcmVLZXldICE9PSBuZXh0UHJvcHMuc3RvcmUpIHtcbiAgICAgICAgd2FybkFib3V0UmVjZWl2aW5nU3RvcmUoKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgUHJvdmlkZXIucHJvcFR5cGVzID0ge1xuICAgIHN0b3JlOiBzdG9yZVNoYXBlLmlzUmVxdWlyZWQsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5lbGVtZW50LmlzUmVxdWlyZWRcbiAgfTtcbiAgUHJvdmlkZXIuY2hpbGRDb250ZXh0VHlwZXMgPSAoX1Byb3ZpZGVyJGNoaWxkQ29udGV4ID0ge30sIF9Qcm92aWRlciRjaGlsZENvbnRleFtzdG9yZUtleV0gPSBzdG9yZVNoYXBlLmlzUmVxdWlyZWQsIF9Qcm92aWRlciRjaGlsZENvbnRleFtzdWJzY3JpcHRpb25LZXldID0gc3Vic2NyaXB0aW9uU2hhcGUsIF9Qcm92aWRlciRjaGlsZENvbnRleCk7XG5cbiAgcmV0dXJuIFByb3ZpZGVyO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVQcm92aWRlcigpOyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbi8vIGVuY2Fwc3VsYXRlcyB0aGUgc3Vic2NyaXB0aW9uIGxvZ2ljIGZvciBjb25uZWN0aW5nIGEgY29tcG9uZW50IHRvIHRoZSByZWR1eCBzdG9yZSwgYXNcbi8vIHdlbGwgYXMgbmVzdGluZyBzdWJzY3JpcHRpb25zIG9mIGRlc2NlbmRhbnQgY29tcG9uZW50cywgc28gdGhhdCB3ZSBjYW4gZW5zdXJlIHRoZVxuLy8gYW5jZXN0b3IgY29tcG9uZW50cyByZS1yZW5kZXIgYmVmb3JlIGRlc2NlbmRhbnRzXG5cbnZhciBDTEVBUkVEID0gbnVsbDtcbnZhciBudWxsTGlzdGVuZXJzID0ge1xuICBub3RpZnk6IGZ1bmN0aW9uIG5vdGlmeSgpIHt9XG59O1xuXG5mdW5jdGlvbiBjcmVhdGVMaXN0ZW5lckNvbGxlY3Rpb24oKSB7XG4gIC8vIHRoZSBjdXJyZW50L25leHQgcGF0dGVybiBpcyBjb3BpZWQgZnJvbSByZWR1eCdzIGNyZWF0ZVN0b3JlIGNvZGUuXG4gIC8vIFRPRE86IHJlZmFjdG9yK2V4cG9zZSB0aGF0IGNvZGUgdG8gYmUgcmV1c2FibGUgaGVyZT9cbiAgdmFyIGN1cnJlbnQgPSBbXTtcbiAgdmFyIG5leHQgPSBbXTtcblxuICByZXR1cm4ge1xuICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgIG5leHQgPSBDTEVBUkVEO1xuICAgICAgY3VycmVudCA9IENMRUFSRUQ7XG4gICAgfSxcbiAgICBub3RpZnk6IGZ1bmN0aW9uIG5vdGlmeSgpIHtcbiAgICAgIHZhciBsaXN0ZW5lcnMgPSBjdXJyZW50ID0gbmV4dDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxpc3RlbmVyc1tpXSgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9LFxuICAgIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgICB2YXIgaXNTdWJzY3JpYmVkID0gdHJ1ZTtcbiAgICAgIGlmIChuZXh0ID09PSBjdXJyZW50KSBuZXh0ID0gY3VycmVudC5zbGljZSgpO1xuICAgICAgbmV4dC5wdXNoKGxpc3RlbmVyKTtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgICBpZiAoIWlzU3Vic2NyaWJlZCB8fCBjdXJyZW50ID09PSBDTEVBUkVEKSByZXR1cm47XG4gICAgICAgIGlzU3Vic2NyaWJlZCA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChuZXh0ID09PSBjdXJyZW50KSBuZXh0ID0gY3VycmVudC5zbGljZSgpO1xuICAgICAgICBuZXh0LnNwbGljZShuZXh0LmluZGV4T2YobGlzdGVuZXIpLCAxKTtcbiAgICAgIH07XG4gICAgfVxuICB9O1xufVxuXG52YXIgU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTdWJzY3JpcHRpb24oc3RvcmUsIHBhcmVudFN1Yiwgb25TdGF0ZUNoYW5nZSkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTdWJzY3JpcHRpb24pO1xuXG4gICAgdGhpcy5zdG9yZSA9IHN0b3JlO1xuICAgIHRoaXMucGFyZW50U3ViID0gcGFyZW50U3ViO1xuICAgIHRoaXMub25TdGF0ZUNoYW5nZSA9IG9uU3RhdGVDaGFuZ2U7XG4gICAgdGhpcy51bnN1YnNjcmliZSA9IG51bGw7XG4gICAgdGhpcy5saXN0ZW5lcnMgPSBudWxsTGlzdGVuZXJzO1xuICB9XG5cbiAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5hZGROZXN0ZWRTdWIgPSBmdW5jdGlvbiBhZGROZXN0ZWRTdWIobGlzdGVuZXIpIHtcbiAgICB0aGlzLnRyeVN1YnNjcmliZSgpO1xuICAgIHJldHVybiB0aGlzLmxpc3RlbmVycy5zdWJzY3JpYmUobGlzdGVuZXIpO1xuICB9O1xuXG4gIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUubm90aWZ5TmVzdGVkU3VicyA9IGZ1bmN0aW9uIG5vdGlmeU5lc3RlZFN1YnMoKSB7XG4gICAgdGhpcy5saXN0ZW5lcnMubm90aWZ5KCk7XG4gIH07XG5cbiAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5pc1N1YnNjcmliZWQgPSBmdW5jdGlvbiBpc1N1YnNjcmliZWQoKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4odGhpcy51bnN1YnNjcmliZSk7XG4gIH07XG5cbiAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS50cnlTdWJzY3JpYmUgPSBmdW5jdGlvbiB0cnlTdWJzY3JpYmUoKSB7XG4gICAgaWYgKCF0aGlzLnVuc3Vic2NyaWJlKSB7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlID0gdGhpcy5wYXJlbnRTdWIgPyB0aGlzLnBhcmVudFN1Yi5hZGROZXN0ZWRTdWIodGhpcy5vblN0YXRlQ2hhbmdlKSA6IHRoaXMuc3RvcmUuc3Vic2NyaWJlKHRoaXMub25TdGF0ZUNoYW5nZSk7XG5cbiAgICAgIHRoaXMubGlzdGVuZXJzID0gY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uKCk7XG4gICAgfVxuICB9O1xuXG4gIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUudHJ5VW5zdWJzY3JpYmUgPSBmdW5jdGlvbiB0cnlVbnN1YnNjcmliZSgpIHtcbiAgICBpZiAodGhpcy51bnN1YnNjcmliZSkge1xuICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgdGhpcy51bnN1YnNjcmliZSA9IG51bGw7XG4gICAgICB0aGlzLmxpc3RlbmVycy5jbGVhcigpO1xuICAgICAgdGhpcy5saXN0ZW5lcnMgPSBudWxsTGlzdGVuZXJzO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gU3Vic2NyaXB0aW9uO1xufSgpO1xuXG5leHBvcnQgeyBTdWJzY3JpcHRpb24gYXMgZGVmYXVsdCB9OyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5pbXBvcnQgaG9pc3RTdGF0aWNzIGZyb20gJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCB7IENvbXBvbmVudCwgY3JlYXRlRWxlbWVudCB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IFN1YnNjcmlwdGlvbiBmcm9tICcuLi91dGlscy9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgc3RvcmVTaGFwZSwgc3Vic2NyaXB0aW9uU2hhcGUgfSBmcm9tICcuLi91dGlscy9Qcm9wVHlwZXMnO1xuXG52YXIgaG90UmVsb2FkaW5nVmVyc2lvbiA9IDA7XG52YXIgZHVtbXlTdGF0ZSA9IHt9O1xuZnVuY3Rpb24gbm9vcCgpIHt9XG5mdW5jdGlvbiBtYWtlU2VsZWN0b3JTdGF0ZWZ1bChzb3VyY2VTZWxlY3Rvciwgc3RvcmUpIHtcbiAgLy8gd3JhcCB0aGUgc2VsZWN0b3IgaW4gYW4gb2JqZWN0IHRoYXQgdHJhY2tzIGl0cyByZXN1bHRzIGJldHdlZW4gcnVucy5cbiAgdmFyIHNlbGVjdG9yID0ge1xuICAgIHJ1bjogZnVuY3Rpb24gcnVuQ29tcG9uZW50U2VsZWN0b3IocHJvcHMpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBuZXh0UHJvcHMgPSBzb3VyY2VTZWxlY3RvcihzdG9yZS5nZXRTdGF0ZSgpLCBwcm9wcyk7XG4gICAgICAgIGlmIChuZXh0UHJvcHMgIT09IHNlbGVjdG9yLnByb3BzIHx8IHNlbGVjdG9yLmVycm9yKSB7XG4gICAgICAgICAgc2VsZWN0b3Iuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgICBzZWxlY3Rvci5wcm9wcyA9IG5leHRQcm9wcztcbiAgICAgICAgICBzZWxlY3Rvci5lcnJvciA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IHRydWU7XG4gICAgICAgIHNlbGVjdG9yLmVycm9yID0gZXJyb3I7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBzZWxlY3Rvcjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29ubmVjdEFkdmFuY2VkKFxuLypcbiAgc2VsZWN0b3JGYWN0b3J5IGlzIGEgZnVuYyB0aGF0IGlzIHJlc3BvbnNpYmxlIGZvciByZXR1cm5pbmcgdGhlIHNlbGVjdG9yIGZ1bmN0aW9uIHVzZWQgdG9cbiAgY29tcHV0ZSBuZXcgcHJvcHMgZnJvbSBzdGF0ZSwgcHJvcHMsIGFuZCBkaXNwYXRjaC4gRm9yIGV4YW1wbGU6XG4gICAgIGV4cG9ydCBkZWZhdWx0IGNvbm5lY3RBZHZhbmNlZCgoZGlzcGF0Y2gsIG9wdGlvbnMpID0+IChzdGF0ZSwgcHJvcHMpID0+ICh7XG4gICAgICB0aGluZzogc3RhdGUudGhpbmdzW3Byb3BzLnRoaW5nSWRdLFxuICAgICAgc2F2ZVRoaW5nOiBmaWVsZHMgPT4gZGlzcGF0Y2goYWN0aW9uQ3JlYXRvcnMuc2F2ZVRoaW5nKHByb3BzLnRoaW5nSWQsIGZpZWxkcykpLFxuICAgIH0pKShZb3VyQ29tcG9uZW50KVxuICAgQWNjZXNzIHRvIGRpc3BhdGNoIGlzIHByb3ZpZGVkIHRvIHRoZSBmYWN0b3J5IHNvIHNlbGVjdG9yRmFjdG9yaWVzIGNhbiBiaW5kIGFjdGlvbkNyZWF0b3JzXG4gIG91dHNpZGUgb2YgdGhlaXIgc2VsZWN0b3IgYXMgYW4gb3B0aW1pemF0aW9uLiBPcHRpb25zIHBhc3NlZCB0byBjb25uZWN0QWR2YW5jZWQgYXJlIHBhc3NlZCB0b1xuICB0aGUgc2VsZWN0b3JGYWN0b3J5LCBhbG9uZyB3aXRoIGRpc3BsYXlOYW1lIGFuZCBXcmFwcGVkQ29tcG9uZW50LCBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50LlxuICAgTm90ZSB0aGF0IHNlbGVjdG9yRmFjdG9yeSBpcyByZXNwb25zaWJsZSBmb3IgYWxsIGNhY2hpbmcvbWVtb2l6YXRpb24gb2YgaW5ib3VuZCBhbmQgb3V0Ym91bmRcbiAgcHJvcHMuIERvIG5vdCB1c2UgY29ubmVjdEFkdmFuY2VkIGRpcmVjdGx5IHdpdGhvdXQgbWVtb2l6aW5nIHJlc3VsdHMgYmV0d2VlbiBjYWxscyB0byB5b3VyXG4gIHNlbGVjdG9yLCBvdGhlcndpc2UgdGhlIENvbm5lY3QgY29tcG9uZW50IHdpbGwgcmUtcmVuZGVyIG9uIGV2ZXJ5IHN0YXRlIG9yIHByb3BzIGNoYW5nZS5cbiovXG5zZWxlY3RvckZhY3RvcnkpIHtcbiAgdmFyIF9jb250ZXh0VHlwZXMsIF9jaGlsZENvbnRleHRUeXBlcztcblxuICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge30sXG4gICAgICBfcmVmJGdldERpc3BsYXlOYW1lID0gX3JlZi5nZXREaXNwbGF5TmFtZSxcbiAgICAgIGdldERpc3BsYXlOYW1lID0gX3JlZiRnZXREaXNwbGF5TmFtZSA9PT0gdW5kZWZpbmVkID8gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gJ0Nvbm5lY3RBZHZhbmNlZCgnICsgbmFtZSArICcpJztcbiAgfSA6IF9yZWYkZ2V0RGlzcGxheU5hbWUsXG4gICAgICBfcmVmJG1ldGhvZE5hbWUgPSBfcmVmLm1ldGhvZE5hbWUsXG4gICAgICBtZXRob2ROYW1lID0gX3JlZiRtZXRob2ROYW1lID09PSB1bmRlZmluZWQgPyAnY29ubmVjdEFkdmFuY2VkJyA6IF9yZWYkbWV0aG9kTmFtZSxcbiAgICAgIF9yZWYkcmVuZGVyQ291bnRQcm9wID0gX3JlZi5yZW5kZXJDb3VudFByb3AsXG4gICAgICByZW5kZXJDb3VudFByb3AgPSBfcmVmJHJlbmRlckNvdW50UHJvcCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogX3JlZiRyZW5kZXJDb3VudFByb3AsXG4gICAgICBfcmVmJHNob3VsZEhhbmRsZVN0YXQgPSBfcmVmLnNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyxcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyA9IF9yZWYkc2hvdWxkSGFuZGxlU3RhdCA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IF9yZWYkc2hvdWxkSGFuZGxlU3RhdCxcbiAgICAgIF9yZWYkc3RvcmVLZXkgPSBfcmVmLnN0b3JlS2V5LFxuICAgICAgc3RvcmVLZXkgPSBfcmVmJHN0b3JlS2V5ID09PSB1bmRlZmluZWQgPyAnc3RvcmUnIDogX3JlZiRzdG9yZUtleSxcbiAgICAgIF9yZWYkd2l0aFJlZiA9IF9yZWYud2l0aFJlZixcbiAgICAgIHdpdGhSZWYgPSBfcmVmJHdpdGhSZWYgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX3JlZiR3aXRoUmVmLFxuICAgICAgY29ubmVjdE9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgWydnZXREaXNwbGF5TmFtZScsICdtZXRob2ROYW1lJywgJ3JlbmRlckNvdW50UHJvcCcsICdzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMnLCAnc3RvcmVLZXknLCAnd2l0aFJlZiddKTtcblxuICB2YXIgc3Vic2NyaXB0aW9uS2V5ID0gc3RvcmVLZXkgKyAnU3Vic2NyaXB0aW9uJztcbiAgdmFyIHZlcnNpb24gPSBob3RSZWxvYWRpbmdWZXJzaW9uKys7XG5cbiAgdmFyIGNvbnRleHRUeXBlcyA9IChfY29udGV4dFR5cGVzID0ge30sIF9jb250ZXh0VHlwZXNbc3RvcmVLZXldID0gc3RvcmVTaGFwZSwgX2NvbnRleHRUeXBlc1tzdWJzY3JpcHRpb25LZXldID0gc3Vic2NyaXB0aW9uU2hhcGUsIF9jb250ZXh0VHlwZXMpO1xuICB2YXIgY2hpbGRDb250ZXh0VHlwZXMgPSAoX2NoaWxkQ29udGV4dFR5cGVzID0ge30sIF9jaGlsZENvbnRleHRUeXBlc1tzdWJzY3JpcHRpb25LZXldID0gc3Vic2NyaXB0aW9uU2hhcGUsIF9jaGlsZENvbnRleHRUeXBlcyk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXBXaXRoQ29ubmVjdChXcmFwcGVkQ29tcG9uZW50KSB7XG4gICAgaW52YXJpYW50KHR5cGVvZiBXcmFwcGVkQ29tcG9uZW50ID09ICdmdW5jdGlvbicsICdZb3UgbXVzdCBwYXNzIGEgY29tcG9uZW50IHRvIHRoZSBmdW5jdGlvbiByZXR1cm5lZCBieSAnICsgKG1ldGhvZE5hbWUgKyAnLiBJbnN0ZWFkIHJlY2VpdmVkICcgKyBKU09OLnN0cmluZ2lmeShXcmFwcGVkQ29tcG9uZW50KSkpO1xuXG4gICAgdmFyIHdyYXBwZWRDb21wb25lbnROYW1lID0gV3JhcHBlZENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBXcmFwcGVkQ29tcG9uZW50Lm5hbWUgfHwgJ0NvbXBvbmVudCc7XG5cbiAgICB2YXIgZGlzcGxheU5hbWUgPSBnZXREaXNwbGF5TmFtZSh3cmFwcGVkQ29tcG9uZW50TmFtZSk7XG5cbiAgICB2YXIgc2VsZWN0b3JGYWN0b3J5T3B0aW9ucyA9IF9leHRlbmRzKHt9LCBjb25uZWN0T3B0aW9ucywge1xuICAgICAgZ2V0RGlzcGxheU5hbWU6IGdldERpc3BsYXlOYW1lLFxuICAgICAgbWV0aG9kTmFtZTogbWV0aG9kTmFtZSxcbiAgICAgIHJlbmRlckNvdW50UHJvcDogcmVuZGVyQ291bnRQcm9wLFxuICAgICAgc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzOiBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMsXG4gICAgICBzdG9yZUtleTogc3RvcmVLZXksXG4gICAgICB3aXRoUmVmOiB3aXRoUmVmLFxuICAgICAgZGlzcGxheU5hbWU6IGRpc3BsYXlOYW1lLFxuICAgICAgd3JhcHBlZENvbXBvbmVudE5hbWU6IHdyYXBwZWRDb21wb25lbnROYW1lLFxuICAgICAgV3JhcHBlZENvbXBvbmVudDogV3JhcHBlZENvbXBvbmVudFxuICAgIH0pO1xuXG4gICAgdmFyIENvbm5lY3QgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgICAgX2luaGVyaXRzKENvbm5lY3QsIF9Db21wb25lbnQpO1xuXG4gICAgICBmdW5jdGlvbiBDb25uZWN0KHByb3BzLCBjb250ZXh0KSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb25uZWN0KTtcblxuICAgICAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpKTtcblxuICAgICAgICBfdGhpcy52ZXJzaW9uID0gdmVyc2lvbjtcbiAgICAgICAgX3RoaXMuc3RhdGUgPSB7fTtcbiAgICAgICAgX3RoaXMucmVuZGVyQ291bnQgPSAwO1xuICAgICAgICBfdGhpcy5zdG9yZSA9IHByb3BzW3N0b3JlS2V5XSB8fCBjb250ZXh0W3N0b3JlS2V5XTtcbiAgICAgICAgX3RoaXMucHJvcHNNb2RlID0gQm9vbGVhbihwcm9wc1tzdG9yZUtleV0pO1xuICAgICAgICBfdGhpcy5zZXRXcmFwcGVkSW5zdGFuY2UgPSBfdGhpcy5zZXRXcmFwcGVkSW5zdGFuY2UuYmluZChfdGhpcyk7XG5cbiAgICAgICAgaW52YXJpYW50KF90aGlzLnN0b3JlLCAnQ291bGQgbm90IGZpbmQgXCInICsgc3RvcmVLZXkgKyAnXCIgaW4gZWl0aGVyIHRoZSBjb250ZXh0IG9yIHByb3BzIG9mICcgKyAoJ1wiJyArIGRpc3BsYXlOYW1lICsgJ1wiLiBFaXRoZXIgd3JhcCB0aGUgcm9vdCBjb21wb25lbnQgaW4gYSA8UHJvdmlkZXI+LCAnKSArICgnb3IgZXhwbGljaXRseSBwYXNzIFwiJyArIHN0b3JlS2V5ICsgJ1wiIGFzIGEgcHJvcCB0byBcIicgKyBkaXNwbGF5TmFtZSArICdcIi4nKSk7XG5cbiAgICAgICAgX3RoaXMuaW5pdFNlbGVjdG9yKCk7XG4gICAgICAgIF90aGlzLmluaXRTdWJzY3JpcHRpb24oKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgICAgfVxuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgICAgIHZhciBfcmVmMjtcblxuICAgICAgICAvLyBJZiB0aGlzIGNvbXBvbmVudCByZWNlaXZlZCBzdG9yZSBmcm9tIHByb3BzLCBpdHMgc3Vic2NyaXB0aW9uIHNob3VsZCBiZSB0cmFuc3BhcmVudFxuICAgICAgICAvLyB0byBhbnkgZGVzY2VuZGFudHMgcmVjZWl2aW5nIHN0b3JlK3N1YnNjcmlwdGlvbiBmcm9tIGNvbnRleHQ7IGl0IHBhc3NlcyBhbG9uZ1xuICAgICAgICAvLyBzdWJzY3JpcHRpb24gcGFzc2VkIHRvIGl0LiBPdGhlcndpc2UsIGl0IHNoYWRvd3MgdGhlIHBhcmVudCBzdWJzY3JpcHRpb24sIHdoaWNoIGFsbG93c1xuICAgICAgICAvLyBDb25uZWN0IHRvIGNvbnRyb2wgb3JkZXJpbmcgb2Ygbm90aWZpY2F0aW9ucyB0byBmbG93IHRvcC1kb3duLlxuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5wcm9wc01vZGUgPyBudWxsIDogdGhpcy5zdWJzY3JpcHRpb247XG4gICAgICAgIHJldHVybiBfcmVmMiA9IHt9LCBfcmVmMltzdWJzY3JpcHRpb25LZXldID0gc3Vic2NyaXB0aW9uIHx8IHRoaXMuY29udGV4dFtzdWJzY3JpcHRpb25LZXldLCBfcmVmMjtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgIGlmICghc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSByZXR1cm47XG5cbiAgICAgICAgLy8gY29tcG9uZW50V2lsbE1vdW50IGZpcmVzIGR1cmluZyBzZXJ2ZXIgc2lkZSByZW5kZXJpbmcsIGJ1dCBjb21wb25lbnREaWRNb3VudCBhbmRcbiAgICAgICAgLy8gY29tcG9uZW50V2lsbFVubW91bnQgZG8gbm90LiBCZWNhdXNlIG9mIHRoaXMsIHRyeVN1YnNjcmliZSBoYXBwZW5zIGR1cmluZyAuLi5kaWRNb3VudC5cbiAgICAgICAgLy8gT3RoZXJ3aXNlLCB1bnN1YnNjcmlwdGlvbiB3b3VsZCBuZXZlciB0YWtlIHBsYWNlIGR1cmluZyBTU1IsIGNhdXNpbmcgYSBtZW1vcnkgbGVhay5cbiAgICAgICAgLy8gVG8gaGFuZGxlIHRoZSBjYXNlIHdoZXJlIGEgY2hpbGQgY29tcG9uZW50IG1heSBoYXZlIHRyaWdnZXJlZCBhIHN0YXRlIGNoYW5nZSBieVxuICAgICAgICAvLyBkaXNwYXRjaGluZyBhbiBhY3Rpb24gaW4gaXRzIGNvbXBvbmVudFdpbGxNb3VudCwgd2UgaGF2ZSB0byByZS1ydW4gdGhlIHNlbGVjdCBhbmQgbWF5YmVcbiAgICAgICAgLy8gcmUtcmVuZGVyLlxuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbi50cnlTdWJzY3JpYmUoKTtcbiAgICAgICAgdGhpcy5zZWxlY3Rvci5ydW4odGhpcy5wcm9wcyk7XG4gICAgICAgIGlmICh0aGlzLnNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZSkgdGhpcy5mb3JjZVVwZGF0ZSgpO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0b3IucnVuKG5leHRQcm9wcyk7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5zaG91bGRDb21wb25lbnRVcGRhdGUgPSBmdW5jdGlvbiBzaG91bGRDb21wb25lbnRVcGRhdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZTtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICAgIGlmICh0aGlzLnN1YnNjcmlwdGlvbikgdGhpcy5zdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb24gPSBudWxsO1xuICAgICAgICB0aGlzLm5vdGlmeU5lc3RlZFN1YnMgPSBub29wO1xuICAgICAgICB0aGlzLnN0b3JlID0gbnVsbDtcbiAgICAgICAgdGhpcy5zZWxlY3Rvci5ydW4gPSBub29wO1xuICAgICAgICB0aGlzLnNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IGZhbHNlO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuZ2V0V3JhcHBlZEluc3RhbmNlID0gZnVuY3Rpb24gZ2V0V3JhcHBlZEluc3RhbmNlKCkge1xuICAgICAgICBpbnZhcmlhbnQod2l0aFJlZiwgJ1RvIGFjY2VzcyB0aGUgd3JhcHBlZCBpbnN0YW5jZSwgeW91IG5lZWQgdG8gc3BlY2lmeSAnICsgKCd7IHdpdGhSZWY6IHRydWUgfSBpbiB0aGUgb3B0aW9ucyBhcmd1bWVudCBvZiB0aGUgJyArIG1ldGhvZE5hbWUgKyAnKCkgY2FsbC4nKSk7XG4gICAgICAgIHJldHVybiB0aGlzLndyYXBwZWRJbnN0YW5jZTtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLnNldFdyYXBwZWRJbnN0YW5jZSA9IGZ1bmN0aW9uIHNldFdyYXBwZWRJbnN0YW5jZShyZWYpIHtcbiAgICAgICAgdGhpcy53cmFwcGVkSW5zdGFuY2UgPSByZWY7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5pbml0U2VsZWN0b3IgPSBmdW5jdGlvbiBpbml0U2VsZWN0b3IoKSB7XG4gICAgICAgIHZhciBzb3VyY2VTZWxlY3RvciA9IHNlbGVjdG9yRmFjdG9yeSh0aGlzLnN0b3JlLmRpc3BhdGNoLCBzZWxlY3RvckZhY3RvcnlPcHRpb25zKTtcbiAgICAgICAgdGhpcy5zZWxlY3RvciA9IG1ha2VTZWxlY3RvclN0YXRlZnVsKHNvdXJjZVNlbGVjdG9yLCB0aGlzLnN0b3JlKTtcbiAgICAgICAgdGhpcy5zZWxlY3Rvci5ydW4odGhpcy5wcm9wcyk7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5pbml0U3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gaW5pdFN1YnNjcmlwdGlvbigpIHtcbiAgICAgICAgaWYgKCFzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHJldHVybjtcblxuICAgICAgICAvLyBwYXJlbnRTdWIncyBzb3VyY2Ugc2hvdWxkIG1hdGNoIHdoZXJlIHN0b3JlIGNhbWUgZnJvbTogcHJvcHMgdnMuIGNvbnRleHQuIEEgY29tcG9uZW50XG4gICAgICAgIC8vIGNvbm5lY3RlZCB0byB0aGUgc3RvcmUgdmlhIHByb3BzIHNob3VsZG4ndCB1c2Ugc3Vic2NyaXB0aW9uIGZyb20gY29udGV4dCwgb3IgdmljZSB2ZXJzYS5cbiAgICAgICAgdmFyIHBhcmVudFN1YiA9ICh0aGlzLnByb3BzTW9kZSA/IHRoaXMucHJvcHMgOiB0aGlzLmNvbnRleHQpW3N1YnNjcmlwdGlvbktleV07XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbih0aGlzLnN0b3JlLCBwYXJlbnRTdWIsIHRoaXMub25TdGF0ZUNoYW5nZS5iaW5kKHRoaXMpKTtcblxuICAgICAgICAvLyBgbm90aWZ5TmVzdGVkU3Vic2AgaXMgZHVwbGljYXRlZCB0byBoYW5kbGUgdGhlIGNhc2Ugd2hlcmUgdGhlIGNvbXBvbmVudCBpcyAgdW5tb3VudGVkIGluXG4gICAgICAgIC8vIHRoZSBtaWRkbGUgb2YgdGhlIG5vdGlmaWNhdGlvbiBsb29wLCB3aGVyZSBgdGhpcy5zdWJzY3JpcHRpb25gIHdpbGwgdGhlbiBiZSBudWxsLiBBblxuICAgICAgICAvLyBleHRyYSBudWxsIGNoZWNrIGV2ZXJ5IGNoYW5nZSBjYW4gYmUgYXZvaWRlZCBieSBjb3B5aW5nIHRoZSBtZXRob2Qgb250byBgdGhpc2AgYW5kIHRoZW5cbiAgICAgICAgLy8gcmVwbGFjaW5nIGl0IHdpdGggYSBuby1vcCBvbiB1bm1vdW50LiBUaGlzIGNhbiBwcm9iYWJseSBiZSBhdm9pZGVkIGlmIFN1YnNjcmlwdGlvbidzXG4gICAgICAgIC8vIGxpc3RlbmVycyBsb2dpYyBpcyBjaGFuZ2VkIHRvIG5vdCBjYWxsIGxpc3RlbmVycyB0aGF0IGhhdmUgYmVlbiB1bnN1YnNjcmliZWQgaW4gdGhlXG4gICAgICAgIC8vIG1pZGRsZSBvZiB0aGUgbm90aWZpY2F0aW9uIGxvb3AuXG4gICAgICAgIHRoaXMubm90aWZ5TmVzdGVkU3VicyA9IHRoaXMuc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnMuYmluZCh0aGlzLnN1YnNjcmlwdGlvbik7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5vblN0YXRlQ2hhbmdlID0gZnVuY3Rpb24gb25TdGF0ZUNoYW5nZSgpIHtcbiAgICAgICAgdGhpcy5zZWxlY3Rvci5ydW4odGhpcy5wcm9wcyk7XG5cbiAgICAgICAgaWYgKCF0aGlzLnNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZSkge1xuICAgICAgICAgIHRoaXMubm90aWZ5TmVzdGVkU3VicygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuY29tcG9uZW50RGlkVXBkYXRlID0gdGhpcy5ub3RpZnlOZXN0ZWRTdWJzT25Db21wb25lbnREaWRVcGRhdGU7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZShkdW1teVN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUubm90aWZ5TmVzdGVkU3Vic09uQ29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gbm90aWZ5TmVzdGVkU3Vic09uQ29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgICAgICAvLyBgY29tcG9uZW50RGlkVXBkYXRlYCBpcyBjb25kaXRpb25hbGx5IGltcGxlbWVudGVkIHdoZW4gYG9uU3RhdGVDaGFuZ2VgIGRldGVybWluZXMgaXRcbiAgICAgICAgLy8gbmVlZHMgdG8gbm90aWZ5IG5lc3RlZCBzdWJzLiBPbmNlIGNhbGxlZCwgaXQgdW5pbXBsZW1lbnRzIGl0c2VsZiB1bnRpbCBmdXJ0aGVyIHN0YXRlXG4gICAgICAgIC8vIGNoYW5nZXMgb2NjdXIuIERvaW5nIGl0IHRoaXMgd2F5IHZzIGhhdmluZyBhIHBlcm1hbmVudCBgY29tcG9uZW50RGlkVXBkYXRlYCB0aGF0IGRvZXNcbiAgICAgICAgLy8gYSBib29sZWFuIGNoZWNrIGV2ZXJ5IHRpbWUgYXZvaWRzIGFuIGV4dHJhIG1ldGhvZCBjYWxsIG1vc3Qgb2YgdGhlIHRpbWUsIHJlc3VsdGluZ1xuICAgICAgICAvLyBpbiBzb21lIHBlcmYgYm9vc3QuXG4gICAgICAgIHRoaXMuY29tcG9uZW50RGlkVXBkYXRlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLm5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLmlzU3Vic2NyaWJlZCA9IGZ1bmN0aW9uIGlzU3Vic2NyaWJlZCgpIHtcbiAgICAgICAgcmV0dXJuIEJvb2xlYW4odGhpcy5zdWJzY3JpcHRpb24pICYmIHRoaXMuc3Vic2NyaXB0aW9uLmlzU3Vic2NyaWJlZCgpO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuYWRkRXh0cmFQcm9wcyA9IGZ1bmN0aW9uIGFkZEV4dHJhUHJvcHMocHJvcHMpIHtcbiAgICAgICAgaWYgKCF3aXRoUmVmICYmICFyZW5kZXJDb3VudFByb3AgJiYgISh0aGlzLnByb3BzTW9kZSAmJiB0aGlzLnN1YnNjcmlwdGlvbikpIHJldHVybiBwcm9wcztcbiAgICAgICAgLy8gbWFrZSBhIHNoYWxsb3cgY29weSBzbyB0aGF0IGZpZWxkcyBhZGRlZCBkb24ndCBsZWFrIHRvIHRoZSBvcmlnaW5hbCBzZWxlY3Rvci5cbiAgICAgICAgLy8gdGhpcyBpcyBlc3BlY2lhbGx5IGltcG9ydGFudCBmb3IgJ3JlZicgc2luY2UgdGhhdCdzIGEgcmVmZXJlbmNlIGJhY2sgdG8gdGhlIGNvbXBvbmVudFxuICAgICAgICAvLyBpbnN0YW5jZS4gYSBzaW5nbGV0b24gbWVtb2l6ZWQgc2VsZWN0b3Igd291bGQgdGhlbiBiZSBob2xkaW5nIGEgcmVmZXJlbmNlIHRvIHRoZVxuICAgICAgICAvLyBpbnN0YW5jZSwgcHJldmVudGluZyB0aGUgaW5zdGFuY2UgZnJvbSBiZWluZyBnYXJiYWdlIGNvbGxlY3RlZCwgYW5kIHRoYXQgd291bGQgYmUgYmFkXG4gICAgICAgIHZhciB3aXRoRXh0cmFzID0gX2V4dGVuZHMoe30sIHByb3BzKTtcbiAgICAgICAgaWYgKHdpdGhSZWYpIHdpdGhFeHRyYXMucmVmID0gdGhpcy5zZXRXcmFwcGVkSW5zdGFuY2U7XG4gICAgICAgIGlmIChyZW5kZXJDb3VudFByb3ApIHdpdGhFeHRyYXNbcmVuZGVyQ291bnRQcm9wXSA9IHRoaXMucmVuZGVyQ291bnQrKztcbiAgICAgICAgaWYgKHRoaXMucHJvcHNNb2RlICYmIHRoaXMuc3Vic2NyaXB0aW9uKSB3aXRoRXh0cmFzW3N1YnNjcmlwdGlvbktleV0gPSB0aGlzLnN1YnNjcmlwdGlvbjtcbiAgICAgICAgcmV0dXJuIHdpdGhFeHRyYXM7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHZhciBzZWxlY3RvciA9IHRoaXMuc2VsZWN0b3I7XG4gICAgICAgIHNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChzZWxlY3Rvci5lcnJvcikge1xuICAgICAgICAgIHRocm93IHNlbGVjdG9yLmVycm9yO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBjcmVhdGVFbGVtZW50KFdyYXBwZWRDb21wb25lbnQsIHRoaXMuYWRkRXh0cmFQcm9wcyhzZWxlY3Rvci5wcm9wcykpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gQ29ubmVjdDtcbiAgICB9KENvbXBvbmVudCk7XG5cbiAgICBDb25uZWN0LldyYXBwZWRDb21wb25lbnQgPSBXcmFwcGVkQ29tcG9uZW50O1xuICAgIENvbm5lY3QuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcbiAgICBDb25uZWN0LmNoaWxkQ29udGV4dFR5cGVzID0gY2hpbGRDb250ZXh0VHlwZXM7XG4gICAgQ29ubmVjdC5jb250ZXh0VHlwZXMgPSBjb250ZXh0VHlwZXM7XG4gICAgQ29ubmVjdC5wcm9wVHlwZXMgPSBjb250ZXh0VHlwZXM7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVcGRhdGUoKSB7XG4gICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgIC8vIFdlIGFyZSBob3QgcmVsb2FkaW5nIVxuICAgICAgICBpZiAodGhpcy52ZXJzaW9uICE9PSB2ZXJzaW9uKSB7XG4gICAgICAgICAgdGhpcy52ZXJzaW9uID0gdmVyc2lvbjtcbiAgICAgICAgICB0aGlzLmluaXRTZWxlY3RvcigpO1xuXG4gICAgICAgICAgLy8gSWYgYW55IGNvbm5lY3RlZCBkZXNjZW5kYW50cyBkb24ndCBob3QgcmVsb2FkIChhbmQgcmVzdWJzY3JpYmUgaW4gdGhlIHByb2Nlc3MpLCB0aGVpclxuICAgICAgICAgIC8vIGxpc3RlbmVycyB3aWxsIGJlIGxvc3Qgd2hlbiB3ZSB1bnN1YnNjcmliZS4gVW5mb3J0dW5hdGVseSwgYnkgY29weWluZyBvdmVyIGFsbFxuICAgICAgICAgIC8vIGxpc3RlbmVycywgdGhpcyBkb2VzIG1lYW4gdGhhdCB0aGUgb2xkIHZlcnNpb25zIG9mIGNvbm5lY3RlZCBkZXNjZW5kYW50cyB3aWxsIHN0aWxsIGJlXG4gICAgICAgICAgLy8gbm90aWZpZWQgb2Ygc3RhdGUgY2hhbmdlczsgaG93ZXZlciwgdGhlaXIgb25TdGF0ZUNoYW5nZSBmdW5jdGlvbiBpcyBhIG5vLW9wIHNvIHRoaXNcbiAgICAgICAgICAvLyBpc24ndCBhIGh1Z2UgZGVhbC5cbiAgICAgICAgICB2YXIgb2xkTGlzdGVuZXJzID0gW107XG5cbiAgICAgICAgICBpZiAodGhpcy5zdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIG9sZExpc3RlbmVycyA9IHRoaXMuc3Vic2NyaXB0aW9uLmxpc3RlbmVycy5nZXQoKTtcbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uLnRyeVVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuaW5pdFN1YnNjcmlwdGlvbigpO1xuICAgICAgICAgIGlmIChzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHtcbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uLnRyeVN1YnNjcmliZSgpO1xuICAgICAgICAgICAgb2xkTGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICAgICAgICAgIHJldHVybiBfdGhpczIuc3Vic2NyaXB0aW9uLmxpc3RlbmVycy5zdWJzY3JpYmUobGlzdGVuZXIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBob2lzdFN0YXRpY3MoQ29ubmVjdCwgV3JhcHBlZENvbXBvbmVudCk7XG4gIH07XG59IiwidmFyIGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbmZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgaWYgKHggPT09IHkpIHtcbiAgICByZXR1cm4geCAhPT0gMCB8fCB5ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCKSB7XG4gIGlmIChpcyhvYmpBLCBvYmpCKSkgcmV0dXJuIHRydWU7XG5cbiAgaWYgKHR5cGVvZiBvYmpBICE9PSAnb2JqZWN0JyB8fCBvYmpBID09PSBudWxsIHx8IHR5cGVvZiBvYmpCICE9PSAnb2JqZWN0JyB8fCBvYmpCID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMob2JqQSk7XG4gIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKG9iakIpO1xuXG4gIGlmIChrZXlzQS5sZW5ndGggIT09IGtleXNCLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5c0EubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIWhhc093bi5jYWxsKG9iakIsIGtleXNBW2ldKSB8fCAhaXMob2JqQVtrZXlzQVtpXV0sIG9iakJba2V5c0FbaV1dKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufSIsImltcG9ydCBmcmVlR2xvYmFsIGZyb20gJy4vX2ZyZWVHbG9iYWwuanMnO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xudmFyIGZyZWVTZWxmID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XG5cbi8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xudmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbmV4cG9ydCBkZWZhdWx0IHJvb3Q7XG4iLCJpbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cbmV4cG9ydCBkZWZhdWx0IFN5bWJvbDtcbiIsImltcG9ydCBTeW1ib2wgZnJvbSAnLi9fU3ltYm9sLmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUdldFRhZ2Agd2hpY2ggaWdub3JlcyBgU3ltYm9sLnRvU3RyaW5nVGFnYCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmF3IGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGdldFJhd1RhZyh2YWx1ZSkge1xuICB2YXIgaXNPd24gPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBzeW1Ub1N0cmluZ1RhZyksXG4gICAgICB0YWcgPSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG5cbiAgdHJ5IHtcbiAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB1bmRlZmluZWQ7XG4gICAgdmFyIHVubWFza2VkID0gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge31cblxuICB2YXIgcmVzdWx0ID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIGlmICh1bm1hc2tlZCkge1xuICAgIGlmIChpc093bikge1xuICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdGFnO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGUgdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXRSYXdUYWc7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgb2JqZWN0VG9TdHJpbmc7XG4iLCJpbXBvcnQgU3ltYm9sIGZyb20gJy4vX1N5bWJvbC5qcyc7XG5pbXBvcnQgZ2V0UmF3VGFnIGZyb20gJy4vX2dldFJhd1RhZy5qcyc7XG5pbXBvcnQgb2JqZWN0VG9TdHJpbmcgZnJvbSAnLi9fb2JqZWN0VG9TdHJpbmcuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbnVsbFRhZyA9ICdbb2JqZWN0IE51bGxdJyxcbiAgICB1bmRlZmluZWRUYWcgPSAnW29iamVjdCBVbmRlZmluZWRdJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldFRhZ2Agd2l0aG91dCBmYWxsYmFja3MgZm9yIGJ1Z2d5IGVudmlyb25tZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0VGFnKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWRUYWcgOiBudWxsVGFnO1xuICB9XG4gIHJldHVybiAoc3ltVG9TdHJpbmdUYWcgJiYgc3ltVG9TdHJpbmdUYWcgaW4gT2JqZWN0KHZhbHVlKSlcbiAgICA/IGdldFJhd1RhZyh2YWx1ZSlcbiAgICA6IG9iamVjdFRvU3RyaW5nKHZhbHVlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUdldFRhZztcbiIsIi8qKlxuICogQ3JlYXRlcyBhIHVuYXJ5IGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBpdHMgYXJndW1lbnQgdHJhbnNmb3JtZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIGFyZ3VtZW50IHRyYW5zZm9ybS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBvdmVyQXJnKGZ1bmMsIHRyYW5zZm9ybSkge1xuICByZXR1cm4gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIGZ1bmModHJhbnNmb3JtKGFyZykpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBvdmVyQXJnO1xuIiwiaW1wb3J0IG92ZXJBcmcgZnJvbSAnLi9fb3ZlckFyZy5qcyc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIGdldFByb3RvdHlwZSA9IG92ZXJBcmcoT2JqZWN0LmdldFByb3RvdHlwZU9mLCBPYmplY3QpO1xuXG5leHBvcnQgZGVmYXVsdCBnZXRQcm90b3R5cGU7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNPYmplY3RMaWtlO1xuIiwiaW1wb3J0IGJhc2VHZXRUYWcgZnJvbSAnLi9fYmFzZUdldFRhZy5qcyc7XG5pbXBvcnQgZ2V0UHJvdG90eXBlIGZyb20gJy4vX2dldFByb3RvdHlwZS5qcyc7XG5pbXBvcnQgaXNPYmplY3RMaWtlIGZyb20gJy4vaXNPYmplY3RMaWtlLmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIFVzZWQgdG8gaW5mZXIgdGhlIGBPYmplY3RgIGNvbnN0cnVjdG9yLiAqL1xudmFyIG9iamVjdEN0b3JTdHJpbmcgPSBmdW5jVG9TdHJpbmcuY2FsbChPYmplY3QpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCB0aGF0IGlzLCBhbiBvYmplY3QgY3JlYXRlZCBieSB0aGVcbiAqIGBPYmplY3RgIGNvbnN0cnVjdG9yIG9yIG9uZSB3aXRoIGEgYFtbUHJvdG90eXBlXV1gIG9mIGBudWxsYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuOC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiB9XG4gKlxuICogXy5pc1BsYWluT2JqZWN0KG5ldyBGb28pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc1BsYWluT2JqZWN0KHsgJ3gnOiAwLCAneSc6IDAgfSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1BsYWluT2JqZWN0KE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3RMaWtlKHZhbHVlKSB8fCBiYXNlR2V0VGFnKHZhbHVlKSAhPSBvYmplY3RUYWcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHByb3RvID0gZ2V0UHJvdG90eXBlKHZhbHVlKTtcbiAgaWYgKHByb3RvID09PSBudWxsKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdmFyIEN0b3IgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3RvLCAnY29uc3RydWN0b3InKSAmJiBwcm90by5jb25zdHJ1Y3RvcjtcbiAgcmV0dXJuIHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3RvciBpbnN0YW5jZW9mIEN0b3IgJiZcbiAgICBmdW5jVG9TdHJpbmcuY2FsbChDdG9yKSA9PSBvYmplY3RDdG9yU3RyaW5nO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc1BsYWluT2JqZWN0O1xuIiwiaW1wb3J0IHZlcmlmeVBsYWluT2JqZWN0IGZyb20gJy4uL3V0aWxzL3ZlcmlmeVBsYWluT2JqZWN0JztcblxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZ2V0Q29uc3RhbnQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGluaXRDb25zdGFudFNlbGVjdG9yKGRpc3BhdGNoLCBvcHRpb25zKSB7XG4gICAgdmFyIGNvbnN0YW50ID0gZ2V0Q29uc3RhbnQoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuXG4gICAgZnVuY3Rpb24gY29uc3RhbnRTZWxlY3RvcigpIHtcbiAgICAgIHJldHVybiBjb25zdGFudDtcbiAgICB9XG4gICAgY29uc3RhbnRTZWxlY3Rvci5kZXBlbmRzT25Pd25Qcm9wcyA9IGZhbHNlO1xuICAgIHJldHVybiBjb25zdGFudFNlbGVjdG9yO1xuICB9O1xufVxuXG4vLyBkZXBlbmRzT25Pd25Qcm9wcyBpcyB1c2VkIGJ5IGNyZWF0ZU1hcFRvUHJvcHNQcm94eSB0byBkZXRlcm1pbmUgd2hldGhlciB0byBwYXNzIHByb3BzIGFzIGFyZ3Ncbi8vIHRvIHRoZSBtYXBUb1Byb3BzIGZ1bmN0aW9uIGJlaW5nIHdyYXBwZWQuIEl0IGlzIGFsc28gdXNlZCBieSBtYWtlUHVyZVByb3BzU2VsZWN0b3IgdG8gZGV0ZXJtaW5lXG4vLyB3aGV0aGVyIG1hcFRvUHJvcHMgbmVlZHMgdG8gYmUgaW52b2tlZCB3aGVuIHByb3BzIGhhdmUgY2hhbmdlZC5cbi8vIFxuLy8gQSBsZW5ndGggb2Ygb25lIHNpZ25hbHMgdGhhdCBtYXBUb1Byb3BzIGRvZXMgbm90IGRlcGVuZCBvbiBwcm9wcyBmcm9tIHRoZSBwYXJlbnQgY29tcG9uZW50LlxuLy8gQSBsZW5ndGggb2YgemVybyBpcyBhc3N1bWVkIHRvIG1lYW4gbWFwVG9Qcm9wcyBpcyBnZXR0aW5nIGFyZ3MgdmlhIGFyZ3VtZW50cyBvciAuLi5hcmdzIGFuZFxuLy8gdGhlcmVmb3JlIG5vdCByZXBvcnRpbmcgaXRzIGxlbmd0aCBhY2N1cmF0ZWx5Li5cbmV4cG9ydCBmdW5jdGlvbiBnZXREZXBlbmRzT25Pd25Qcm9wcyhtYXBUb1Byb3BzKSB7XG4gIHJldHVybiBtYXBUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzICE9PSBudWxsICYmIG1hcFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMgIT09IHVuZGVmaW5lZCA/IEJvb2xlYW4obWFwVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcykgOiBtYXBUb1Byb3BzLmxlbmd0aCAhPT0gMTtcbn1cblxuLy8gVXNlZCBieSB3aGVuTWFwU3RhdGVUb1Byb3BzSXNGdW5jdGlvbiBhbmQgd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzRnVuY3Rpb24sXG4vLyB0aGlzIGZ1bmN0aW9uIHdyYXBzIG1hcFRvUHJvcHMgaW4gYSBwcm94eSBmdW5jdGlvbiB3aGljaCBkb2VzIHNldmVyYWwgdGhpbmdzOlxuLy8gXG4vLyAgKiBEZXRlY3RzIHdoZXRoZXIgdGhlIG1hcFRvUHJvcHMgZnVuY3Rpb24gYmVpbmcgY2FsbGVkIGRlcGVuZHMgb24gcHJvcHMsIHdoaWNoXG4vLyAgICBpcyB1c2VkIGJ5IHNlbGVjdG9yRmFjdG9yeSB0byBkZWNpZGUgaWYgaXQgc2hvdWxkIHJlaW52b2tlIG9uIHByb3BzIGNoYW5nZXMuXG4vLyAgICBcbi8vICAqIE9uIGZpcnN0IGNhbGwsIGhhbmRsZXMgbWFwVG9Qcm9wcyBpZiByZXR1cm5zIGFub3RoZXIgZnVuY3Rpb24sIGFuZCB0cmVhdHMgdGhhdFxuLy8gICAgbmV3IGZ1bmN0aW9uIGFzIHRoZSB0cnVlIG1hcFRvUHJvcHMgZm9yIHN1YnNlcXVlbnQgY2FsbHMuXG4vLyAgICBcbi8vICAqIE9uIGZpcnN0IGNhbGwsIHZlcmlmaWVzIHRoZSBmaXJzdCByZXN1bHQgaXMgYSBwbGFpbiBvYmplY3QsIGluIG9yZGVyIHRvIHdhcm5cbi8vICAgIHRoZSBkZXZlbG9wZXIgdGhhdCB0aGVpciBtYXBUb1Byb3BzIGZ1bmN0aW9uIGlzIG5vdCByZXR1cm5pbmcgYSB2YWxpZCByZXN1bHQuXG4vLyAgICBcbmV4cG9ydCBmdW5jdGlvbiB3cmFwTWFwVG9Qcm9wc0Z1bmMobWFwVG9Qcm9wcywgbWV0aG9kTmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24gaW5pdFByb3h5U2VsZWN0b3IoZGlzcGF0Y2gsIF9yZWYpIHtcbiAgICB2YXIgZGlzcGxheU5hbWUgPSBfcmVmLmRpc3BsYXlOYW1lO1xuXG4gICAgdmFyIHByb3h5ID0gZnVuY3Rpb24gbWFwVG9Qcm9wc1Byb3h5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpIHtcbiAgICAgIHJldHVybiBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA/IHByb3h5Lm1hcFRvUHJvcHMoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcykgOiBwcm94eS5tYXBUb1Byb3BzKHN0YXRlT3JEaXNwYXRjaCk7XG4gICAgfTtcblxuICAgIC8vIGFsbG93IGRldGVjdEZhY3RvcnlBbmRWZXJpZnkgdG8gZ2V0IG93blByb3BzXG4gICAgcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPSB0cnVlO1xuXG4gICAgcHJveHkubWFwVG9Qcm9wcyA9IGZ1bmN0aW9uIGRldGVjdEZhY3RvcnlBbmRWZXJpZnkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcykge1xuICAgICAgcHJveHkubWFwVG9Qcm9wcyA9IG1hcFRvUHJvcHM7XG4gICAgICBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA9IGdldERlcGVuZHNPbk93blByb3BzKG1hcFRvUHJvcHMpO1xuICAgICAgdmFyIHByb3BzID0gcHJveHkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcyk7XG5cbiAgICAgIGlmICh0eXBlb2YgcHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcHJveHkubWFwVG9Qcm9wcyA9IHByb3BzO1xuICAgICAgICBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA9IGdldERlcGVuZHNPbk93blByb3BzKHByb3BzKTtcbiAgICAgICAgcHJvcHMgPSBwcm94eShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHZlcmlmeVBsYWluT2JqZWN0KHByb3BzLCBkaXNwbGF5TmFtZSwgbWV0aG9kTmFtZSk7XG5cbiAgICAgIHJldHVybiBwcm9wcztcbiAgICB9O1xuXG4gICAgcmV0dXJuIHByb3h5O1xuICB9O1xufSIsImltcG9ydCB7IGJpbmRBY3Rpb25DcmVhdG9ycyB9IGZyb20gJ3JlZHV4JztcbmltcG9ydCB7IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQsIHdyYXBNYXBUb1Byb3BzRnVuYyB9IGZyb20gJy4vd3JhcE1hcFRvUHJvcHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzRnVuY3Rpb24obWFwRGlzcGF0Y2hUb1Byb3BzKSB7XG4gIHJldHVybiB0eXBlb2YgbWFwRGlzcGF0Y2hUb1Byb3BzID09PSAnZnVuY3Rpb24nID8gd3JhcE1hcFRvUHJvcHNGdW5jKG1hcERpc3BhdGNoVG9Qcm9wcywgJ21hcERpc3BhdGNoVG9Qcm9wcycpIDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzTWlzc2luZyhtYXBEaXNwYXRjaFRvUHJvcHMpIHtcbiAgcmV0dXJuICFtYXBEaXNwYXRjaFRvUHJvcHMgPyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGZ1bmN0aW9uIChkaXNwYXRjaCkge1xuICAgIHJldHVybiB7IGRpc3BhdGNoOiBkaXNwYXRjaCB9O1xuICB9KSA6IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc09iamVjdChtYXBEaXNwYXRjaFRvUHJvcHMpIHtcbiAgcmV0dXJuIG1hcERpc3BhdGNoVG9Qcm9wcyAmJiB0eXBlb2YgbWFwRGlzcGF0Y2hUb1Byb3BzID09PSAnb2JqZWN0JyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKGRpc3BhdGNoKSB7XG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9ycyhtYXBEaXNwYXRjaFRvUHJvcHMsIGRpc3BhdGNoKTtcbiAgfSkgOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFt3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNGdW5jdGlvbiwgd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzTWlzc2luZywgd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzT2JqZWN0XTsiLCJpbXBvcnQgeyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50LCB3cmFwTWFwVG9Qcm9wc0Z1bmMgfSBmcm9tICcuL3dyYXBNYXBUb1Byb3BzJztcblxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBTdGF0ZVRvUHJvcHNJc0Z1bmN0aW9uKG1hcFN0YXRlVG9Qcm9wcykge1xuICByZXR1cm4gdHlwZW9mIG1hcFN0YXRlVG9Qcm9wcyA9PT0gJ2Z1bmN0aW9uJyA/IHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBTdGF0ZVRvUHJvcHMsICdtYXBTdGF0ZVRvUHJvcHMnKSA6IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBTdGF0ZVRvUHJvcHNJc01pc3NpbmcobWFwU3RhdGVUb1Byb3BzKSB7XG4gIHJldHVybiAhbWFwU3RhdGVUb1Byb3BzID8gd3JhcE1hcFRvUHJvcHNDb25zdGFudChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9KSA6IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgW3doZW5NYXBTdGF0ZVRvUHJvcHNJc0Z1bmN0aW9uLCB3aGVuTWFwU3RhdGVUb1Byb3BzSXNNaXNzaW5nXTsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5pbXBvcnQgdmVyaWZ5UGxhaW5PYmplY3QgZnJvbSAnLi4vdXRpbHMvdmVyaWZ5UGxhaW5PYmplY3QnO1xuXG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdE1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpIHtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBvd25Qcm9wcywgc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3cmFwTWVyZ2VQcm9wc0Z1bmMobWVyZ2VQcm9wcykge1xuICByZXR1cm4gZnVuY3Rpb24gaW5pdE1lcmdlUHJvcHNQcm94eShkaXNwYXRjaCwgX3JlZikge1xuICAgIHZhciBkaXNwbGF5TmFtZSA9IF9yZWYuZGlzcGxheU5hbWUsXG4gICAgICAgIHB1cmUgPSBfcmVmLnB1cmUsXG4gICAgICAgIGFyZU1lcmdlZFByb3BzRXF1YWwgPSBfcmVmLmFyZU1lcmdlZFByb3BzRXF1YWw7XG5cbiAgICB2YXIgaGFzUnVuT25jZSA9IGZhbHNlO1xuICAgIHZhciBtZXJnZWRQcm9wcyA9IHZvaWQgMDtcblxuICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZVByb3BzUHJveHkoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpIHtcbiAgICAgIHZhciBuZXh0TWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcblxuICAgICAgaWYgKGhhc1J1bk9uY2UpIHtcbiAgICAgICAgaWYgKCFwdXJlIHx8ICFhcmVNZXJnZWRQcm9wc0VxdWFsKG5leHRNZXJnZWRQcm9wcywgbWVyZ2VkUHJvcHMpKSBtZXJnZWRQcm9wcyA9IG5leHRNZXJnZWRQcm9wcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGhhc1J1bk9uY2UgPSB0cnVlO1xuICAgICAgICBtZXJnZWRQcm9wcyA9IG5leHRNZXJnZWRQcm9wcztcblxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgdmVyaWZ5UGxhaW5PYmplY3QobWVyZ2VkUHJvcHMsIGRpc3BsYXlOYW1lLCAnbWVyZ2VQcm9wcycpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gICAgfTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NZXJnZVByb3BzSXNGdW5jdGlvbihtZXJnZVByb3BzKSB7XG4gIHJldHVybiB0eXBlb2YgbWVyZ2VQcm9wcyA9PT0gJ2Z1bmN0aW9uJyA/IHdyYXBNZXJnZVByb3BzRnVuYyhtZXJnZVByb3BzKSA6IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NZXJnZVByb3BzSXNPbWl0dGVkKG1lcmdlUHJvcHMpIHtcbiAgcmV0dXJuICFtZXJnZVByb3BzID8gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkZWZhdWx0TWVyZ2VQcm9wcztcbiAgfSA6IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgW3doZW5NZXJnZVByb3BzSXNGdW5jdGlvbiwgd2hlbk1lcmdlUHJvcHNJc09taXR0ZWRdOyIsImZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuaW1wb3J0IHZlcmlmeVN1YnNlbGVjdG9ycyBmcm9tICcuL3ZlcmlmeVN1YnNlbGVjdG9ycyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBkaXNwYXRjaCkge1xuICByZXR1cm4gZnVuY3Rpb24gaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yKHN0YXRlLCBvd25Qcm9wcykge1xuICAgIHJldHVybiBtZXJnZVByb3BzKG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpLCBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKSwgb3duUHJvcHMpO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIGRpc3BhdGNoLCBfcmVmKSB7XG4gIHZhciBhcmVTdGF0ZXNFcXVhbCA9IF9yZWYuYXJlU3RhdGVzRXF1YWwsXG4gICAgICBhcmVPd25Qcm9wc0VxdWFsID0gX3JlZi5hcmVPd25Qcm9wc0VxdWFsLFxuICAgICAgYXJlU3RhdGVQcm9wc0VxdWFsID0gX3JlZi5hcmVTdGF0ZVByb3BzRXF1YWw7XG5cbiAgdmFyIGhhc1J1bkF0TGVhc3RPbmNlID0gZmFsc2U7XG4gIHZhciBzdGF0ZSA9IHZvaWQgMDtcbiAgdmFyIG93blByb3BzID0gdm9pZCAwO1xuICB2YXIgc3RhdGVQcm9wcyA9IHZvaWQgMDtcbiAgdmFyIGRpc3BhdGNoUHJvcHMgPSB2b2lkIDA7XG4gIHZhciBtZXJnZWRQcm9wcyA9IHZvaWQgMDtcblxuICBmdW5jdGlvbiBoYW5kbGVGaXJzdENhbGwoZmlyc3RTdGF0ZSwgZmlyc3RPd25Qcm9wcykge1xuICAgIHN0YXRlID0gZmlyc3RTdGF0ZTtcbiAgICBvd25Qcm9wcyA9IGZpcnN0T3duUHJvcHM7XG4gICAgc3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIGRpc3BhdGNoUHJvcHMgPSBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKTtcbiAgICBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIGhhc1J1bkF0TGVhc3RPbmNlID0gdHJ1ZTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVOZXdQcm9wc0FuZE5ld1N0YXRlKCkge1xuICAgIHN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcblxuICAgIGlmIChtYXBEaXNwYXRjaFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIGRpc3BhdGNoUHJvcHMgPSBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKTtcblxuICAgIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlTmV3UHJvcHMoKSB7XG4gICAgaWYgKG1hcFN0YXRlVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcykgc3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuXG4gICAgaWYgKG1hcERpc3BhdGNoVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcykgZGlzcGF0Y2hQcm9wcyA9IG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpO1xuXG4gICAgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVOZXdTdGF0ZSgpIHtcbiAgICB2YXIgbmV4dFN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICB2YXIgc3RhdGVQcm9wc0NoYW5nZWQgPSAhYXJlU3RhdGVQcm9wc0VxdWFsKG5leHRTdGF0ZVByb3BzLCBzdGF0ZVByb3BzKTtcbiAgICBzdGF0ZVByb3BzID0gbmV4dFN0YXRlUHJvcHM7XG5cbiAgICBpZiAoc3RhdGVQcm9wc0NoYW5nZWQpIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG5cbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVTdWJzZXF1ZW50Q2FsbHMobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpIHtcbiAgICB2YXIgcHJvcHNDaGFuZ2VkID0gIWFyZU93blByb3BzRXF1YWwobmV4dE93blByb3BzLCBvd25Qcm9wcyk7XG4gICAgdmFyIHN0YXRlQ2hhbmdlZCA9ICFhcmVTdGF0ZXNFcXVhbChuZXh0U3RhdGUsIHN0YXRlKTtcbiAgICBzdGF0ZSA9IG5leHRTdGF0ZTtcbiAgICBvd25Qcm9wcyA9IG5leHRPd25Qcm9wcztcblxuICAgIGlmIChwcm9wc0NoYW5nZWQgJiYgc3RhdGVDaGFuZ2VkKSByZXR1cm4gaGFuZGxlTmV3UHJvcHNBbmROZXdTdGF0ZSgpO1xuICAgIGlmIChwcm9wc0NoYW5nZWQpIHJldHVybiBoYW5kbGVOZXdQcm9wcygpO1xuICAgIGlmIChzdGF0ZUNoYW5nZWQpIHJldHVybiBoYW5kbGVOZXdTdGF0ZSgpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBwdXJlRmluYWxQcm9wc1NlbGVjdG9yKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSB7XG4gICAgcmV0dXJuIGhhc1J1bkF0TGVhc3RPbmNlID8gaGFuZGxlU3Vic2VxdWVudENhbGxzKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSA6IGhhbmRsZUZpcnN0Q2FsbChuZXh0U3RhdGUsIG5leHRPd25Qcm9wcyk7XG4gIH07XG59XG5cbi8vIFRPRE86IEFkZCBtb3JlIGNvbW1lbnRzXG5cbi8vIElmIHB1cmUgaXMgdHJ1ZSwgdGhlIHNlbGVjdG9yIHJldHVybmVkIGJ5IHNlbGVjdG9yRmFjdG9yeSB3aWxsIG1lbW9pemUgaXRzIHJlc3VsdHMsXG4vLyBhbGxvd2luZyBjb25uZWN0QWR2YW5jZWQncyBzaG91bGRDb21wb25lbnRVcGRhdGUgdG8gcmV0dXJuIGZhbHNlIGlmIGZpbmFsXG4vLyBwcm9wcyBoYXZlIG5vdCBjaGFuZ2VkLiBJZiBmYWxzZSwgdGhlIHNlbGVjdG9yIHdpbGwgYWx3YXlzIHJldHVybiBhIG5ld1xuLy8gb2JqZWN0IGFuZCBzaG91bGRDb21wb25lbnRVcGRhdGUgd2lsbCBhbHdheXMgcmV0dXJuIHRydWUuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkoZGlzcGF0Y2gsIF9yZWYyKSB7XG4gIHZhciBpbml0TWFwU3RhdGVUb1Byb3BzID0gX3JlZjIuaW5pdE1hcFN0YXRlVG9Qcm9wcyxcbiAgICAgIGluaXRNYXBEaXNwYXRjaFRvUHJvcHMgPSBfcmVmMi5pbml0TWFwRGlzcGF0Y2hUb1Byb3BzLFxuICAgICAgaW5pdE1lcmdlUHJvcHMgPSBfcmVmMi5pbml0TWVyZ2VQcm9wcyxcbiAgICAgIG9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZjIsIFsnaW5pdE1hcFN0YXRlVG9Qcm9wcycsICdpbml0TWFwRGlzcGF0Y2hUb1Byb3BzJywgJ2luaXRNZXJnZVByb3BzJ10pO1xuXG4gIHZhciBtYXBTdGF0ZVRvUHJvcHMgPSBpbml0TWFwU3RhdGVUb1Byb3BzKGRpc3BhdGNoLCBvcHRpb25zKTtcbiAgdmFyIG1hcERpc3BhdGNoVG9Qcm9wcyA9IGluaXRNYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuICB2YXIgbWVyZ2VQcm9wcyA9IGluaXRNZXJnZVByb3BzKGRpc3BhdGNoLCBvcHRpb25zKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZlcmlmeVN1YnNlbGVjdG9ycyhtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgb3B0aW9ucy5kaXNwbGF5TmFtZSk7XG4gIH1cblxuICB2YXIgc2VsZWN0b3JGYWN0b3J5ID0gb3B0aW9ucy5wdXJlID8gcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkgOiBpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5O1xuXG4gIHJldHVybiBzZWxlY3RvckZhY3RvcnkobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIGRpc3BhdGNoLCBvcHRpb25zKTtcbn0iLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmltcG9ydCBjb25uZWN0QWR2YW5jZWQgZnJvbSAnLi4vY29tcG9uZW50cy9jb25uZWN0QWR2YW5jZWQnO1xuaW1wb3J0IHNoYWxsb3dFcXVhbCBmcm9tICcuLi91dGlscy9zaGFsbG93RXF1YWwnO1xuaW1wb3J0IGRlZmF1bHRNYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMgZnJvbSAnLi9tYXBEaXNwYXRjaFRvUHJvcHMnO1xuaW1wb3J0IGRlZmF1bHRNYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMgZnJvbSAnLi9tYXBTdGF0ZVRvUHJvcHMnO1xuaW1wb3J0IGRlZmF1bHRNZXJnZVByb3BzRmFjdG9yaWVzIGZyb20gJy4vbWVyZ2VQcm9wcyc7XG5pbXBvcnQgZGVmYXVsdFNlbGVjdG9yRmFjdG9yeSBmcm9tICcuL3NlbGVjdG9yRmFjdG9yeSc7XG5cbi8qXG4gIGNvbm5lY3QgaXMgYSBmYWNhZGUgb3ZlciBjb25uZWN0QWR2YW5jZWQuIEl0IHR1cm5zIGl0cyBhcmdzIGludG8gYSBjb21wYXRpYmxlXG4gIHNlbGVjdG9yRmFjdG9yeSwgd2hpY2ggaGFzIHRoZSBzaWduYXR1cmU6XG5cbiAgICAoZGlzcGF0Y2gsIG9wdGlvbnMpID0+IChuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykgPT4gbmV4dEZpbmFsUHJvcHNcbiAgXG4gIGNvbm5lY3QgcGFzc2VzIGl0cyBhcmdzIHRvIGNvbm5lY3RBZHZhbmNlZCBhcyBvcHRpb25zLCB3aGljaCB3aWxsIGluIHR1cm4gcGFzcyB0aGVtIHRvXG4gIHNlbGVjdG9yRmFjdG9yeSBlYWNoIHRpbWUgYSBDb25uZWN0IGNvbXBvbmVudCBpbnN0YW5jZSBpcyBpbnN0YW50aWF0ZWQgb3IgaG90IHJlbG9hZGVkLlxuXG4gIHNlbGVjdG9yRmFjdG9yeSByZXR1cm5zIGEgZmluYWwgcHJvcHMgc2VsZWN0b3IgZnJvbSBpdHMgbWFwU3RhdGVUb1Byb3BzLFxuICBtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzLCBtZXJnZVByb3BzLFxuICBtZXJnZVByb3BzRmFjdG9yaWVzLCBhbmQgcHVyZSBhcmdzLlxuXG4gIFRoZSByZXN1bHRpbmcgZmluYWwgcHJvcHMgc2VsZWN0b3IgaXMgY2FsbGVkIGJ5IHRoZSBDb25uZWN0IGNvbXBvbmVudCBpbnN0YW5jZSB3aGVuZXZlclxuICBpdCByZWNlaXZlcyBuZXcgcHJvcHMgb3Igc3RvcmUgc3RhdGUuXG4gKi9cblxuZnVuY3Rpb24gbWF0Y2goYXJnLCBmYWN0b3JpZXMsIG5hbWUpIHtcbiAgZm9yICh2YXIgaSA9IGZhY3Rvcmllcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIHZhciByZXN1bHQgPSBmYWN0b3JpZXNbaV0oYXJnKTtcbiAgICBpZiAocmVzdWx0KSByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChkaXNwYXRjaCwgb3B0aW9ucykge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCB2YWx1ZSBvZiB0eXBlICcgKyB0eXBlb2YgYXJnICsgJyBmb3IgJyArIG5hbWUgKyAnIGFyZ3VtZW50IHdoZW4gY29ubmVjdGluZyBjb21wb25lbnQgJyArIG9wdGlvbnMud3JhcHBlZENvbXBvbmVudE5hbWUgKyAnLicpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHJpY3RFcXVhbChhLCBiKSB7XG4gIHJldHVybiBhID09PSBiO1xufVxuXG4vLyBjcmVhdGVDb25uZWN0IHdpdGggZGVmYXVsdCBhcmdzIGJ1aWxkcyB0aGUgJ29mZmljaWFsJyBjb25uZWN0IGJlaGF2aW9yLiBDYWxsaW5nIGl0IHdpdGhcbi8vIGRpZmZlcmVudCBvcHRpb25zIG9wZW5zIHVwIHNvbWUgdGVzdGluZyBhbmQgZXh0ZW5zaWJpbGl0eSBzY2VuYXJpb3NcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDb25uZWN0KCkge1xuICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge30sXG4gICAgICBfcmVmJGNvbm5lY3RIT0MgPSBfcmVmLmNvbm5lY3RIT0MsXG4gICAgICBjb25uZWN0SE9DID0gX3JlZiRjb25uZWN0SE9DID09PSB1bmRlZmluZWQgPyBjb25uZWN0QWR2YW5jZWQgOiBfcmVmJGNvbm5lY3RIT0MsXG4gICAgICBfcmVmJG1hcFN0YXRlVG9Qcm9wc0YgPSBfcmVmLm1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyxcbiAgICAgIG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyA9IF9yZWYkbWFwU3RhdGVUb1Byb3BzRiA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdE1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyA6IF9yZWYkbWFwU3RhdGVUb1Byb3BzRixcbiAgICAgIF9yZWYkbWFwRGlzcGF0Y2hUb1BybyA9IF9yZWYubWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzLFxuICAgICAgbWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzID0gX3JlZiRtYXBEaXNwYXRjaFRvUHJvID09PSB1bmRlZmluZWQgPyBkZWZhdWx0TWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzIDogX3JlZiRtYXBEaXNwYXRjaFRvUHJvLFxuICAgICAgX3JlZiRtZXJnZVByb3BzRmFjdG9yID0gX3JlZi5tZXJnZVByb3BzRmFjdG9yaWVzLFxuICAgICAgbWVyZ2VQcm9wc0ZhY3RvcmllcyA9IF9yZWYkbWVyZ2VQcm9wc0ZhY3RvciA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdE1lcmdlUHJvcHNGYWN0b3JpZXMgOiBfcmVmJG1lcmdlUHJvcHNGYWN0b3IsXG4gICAgICBfcmVmJHNlbGVjdG9yRmFjdG9yeSA9IF9yZWYuc2VsZWN0b3JGYWN0b3J5LFxuICAgICAgc2VsZWN0b3JGYWN0b3J5ID0gX3JlZiRzZWxlY3RvckZhY3RvcnkgPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRTZWxlY3RvckZhY3RvcnkgOiBfcmVmJHNlbGVjdG9yRmFjdG9yeTtcblxuICByZXR1cm4gZnVuY3Rpb24gY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcykge1xuICAgIHZhciBfcmVmMiA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDoge30sXG4gICAgICAgIF9yZWYyJHB1cmUgPSBfcmVmMi5wdXJlLFxuICAgICAgICBwdXJlID0gX3JlZjIkcHVyZSA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IF9yZWYyJHB1cmUsXG4gICAgICAgIF9yZWYyJGFyZVN0YXRlc0VxdWFsID0gX3JlZjIuYXJlU3RhdGVzRXF1YWwsXG4gICAgICAgIGFyZVN0YXRlc0VxdWFsID0gX3JlZjIkYXJlU3RhdGVzRXF1YWwgPT09IHVuZGVmaW5lZCA/IHN0cmljdEVxdWFsIDogX3JlZjIkYXJlU3RhdGVzRXF1YWwsXG4gICAgICAgIF9yZWYyJGFyZU93blByb3BzRXF1YSA9IF9yZWYyLmFyZU93blByb3BzRXF1YWwsXG4gICAgICAgIGFyZU93blByb3BzRXF1YWwgPSBfcmVmMiRhcmVPd25Qcm9wc0VxdWEgPT09IHVuZGVmaW5lZCA/IHNoYWxsb3dFcXVhbCA6IF9yZWYyJGFyZU93blByb3BzRXF1YSxcbiAgICAgICAgX3JlZjIkYXJlU3RhdGVQcm9wc0VxID0gX3JlZjIuYXJlU3RhdGVQcm9wc0VxdWFsLFxuICAgICAgICBhcmVTdGF0ZVByb3BzRXF1YWwgPSBfcmVmMiRhcmVTdGF0ZVByb3BzRXEgPT09IHVuZGVmaW5lZCA/IHNoYWxsb3dFcXVhbCA6IF9yZWYyJGFyZVN0YXRlUHJvcHNFcSxcbiAgICAgICAgX3JlZjIkYXJlTWVyZ2VkUHJvcHNFID0gX3JlZjIuYXJlTWVyZ2VkUHJvcHNFcXVhbCxcbiAgICAgICAgYXJlTWVyZ2VkUHJvcHNFcXVhbCA9IF9yZWYyJGFyZU1lcmdlZFByb3BzRSA9PT0gdW5kZWZpbmVkID8gc2hhbGxvd0VxdWFsIDogX3JlZjIkYXJlTWVyZ2VkUHJvcHNFLFxuICAgICAgICBleHRyYU9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZjIsIFsncHVyZScsICdhcmVTdGF0ZXNFcXVhbCcsICdhcmVPd25Qcm9wc0VxdWFsJywgJ2FyZVN0YXRlUHJvcHNFcXVhbCcsICdhcmVNZXJnZWRQcm9wc0VxdWFsJ10pO1xuXG4gICAgdmFyIGluaXRNYXBTdGF0ZVRvUHJvcHMgPSBtYXRjaChtYXBTdGF0ZVRvUHJvcHMsIG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcywgJ21hcFN0YXRlVG9Qcm9wcycpO1xuICAgIHZhciBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzID0gbWF0Y2gobWFwRGlzcGF0Y2hUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMsICdtYXBEaXNwYXRjaFRvUHJvcHMnKTtcbiAgICB2YXIgaW5pdE1lcmdlUHJvcHMgPSBtYXRjaChtZXJnZVByb3BzLCBtZXJnZVByb3BzRmFjdG9yaWVzLCAnbWVyZ2VQcm9wcycpO1xuXG4gICAgcmV0dXJuIGNvbm5lY3RIT0Moc2VsZWN0b3JGYWN0b3J5LCBfZXh0ZW5kcyh7XG4gICAgICAvLyB1c2VkIGluIGVycm9yIG1lc3NhZ2VzXG4gICAgICBtZXRob2ROYW1lOiAnY29ubmVjdCcsXG5cbiAgICAgIC8vIHVzZWQgdG8gY29tcHV0ZSBDb25uZWN0J3MgZGlzcGxheU5hbWUgZnJvbSB0aGUgd3JhcHBlZCBjb21wb25lbnQncyBkaXNwbGF5TmFtZS5cbiAgICAgIGdldERpc3BsYXlOYW1lOiBmdW5jdGlvbiBnZXREaXNwbGF5TmFtZShuYW1lKSB7XG4gICAgICAgIHJldHVybiAnQ29ubmVjdCgnICsgbmFtZSArICcpJztcbiAgICAgIH0sXG5cbiAgICAgIC8vIGlmIG1hcFN0YXRlVG9Qcm9wcyBpcyBmYWxzeSwgdGhlIENvbm5lY3QgY29tcG9uZW50IGRvZXNuJ3Qgc3Vic2NyaWJlIHRvIHN0b3JlIHN0YXRlIGNoYW5nZXNcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlczogQm9vbGVhbihtYXBTdGF0ZVRvUHJvcHMpLFxuXG4gICAgICAvLyBwYXNzZWQgdGhyb3VnaCB0byBzZWxlY3RvckZhY3RvcnlcbiAgICAgIGluaXRNYXBTdGF0ZVRvUHJvcHM6IGluaXRNYXBTdGF0ZVRvUHJvcHMsXG4gICAgICBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzOiBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzLFxuICAgICAgaW5pdE1lcmdlUHJvcHM6IGluaXRNZXJnZVByb3BzLFxuICAgICAgcHVyZTogcHVyZSxcbiAgICAgIGFyZVN0YXRlc0VxdWFsOiBhcmVTdGF0ZXNFcXVhbCxcbiAgICAgIGFyZU93blByb3BzRXF1YWw6IGFyZU93blByb3BzRXF1YWwsXG4gICAgICBhcmVTdGF0ZVByb3BzRXF1YWw6IGFyZVN0YXRlUHJvcHNFcXVhbCxcbiAgICAgIGFyZU1lcmdlZFByb3BzRXF1YWw6IGFyZU1lcmdlZFByb3BzRXF1YWxcblxuICAgIH0sIGV4dHJhT3B0aW9ucykpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVDb25uZWN0KCk7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSwgWWFob28hIEluYy5cbiAqIENvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS4gU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiAqL1xuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6XG4gICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcbiAgICAoZ2xvYmFsLmhvaXN0Tm9uUmVhY3RTdGF0aWNzID0gZmFjdG9yeSgpKTtcbn0odGhpcywgKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgXG4gICAgdmFyIFJFQUNUX1NUQVRJQ1MgPSB7XG4gICAgICAgIGNoaWxkQ29udGV4dFR5cGVzOiB0cnVlLFxuICAgICAgICBjb250ZXh0VHlwZXM6IHRydWUsXG4gICAgICAgIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICAgICAgZGlzcGxheU5hbWU6IHRydWUsXG4gICAgICAgIGdldERlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICAgICAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiB0cnVlLFxuICAgICAgICBtaXhpbnM6IHRydWUsXG4gICAgICAgIHByb3BUeXBlczogdHJ1ZSxcbiAgICAgICAgdHlwZTogdHJ1ZVxuICAgIH07XG4gICAgXG4gICAgdmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gICAgICAgIG5hbWU6IHRydWUsXG4gICAgICAgIGxlbmd0aDogdHJ1ZSxcbiAgICAgICAgcHJvdG90eXBlOiB0cnVlLFxuICAgICAgICBjYWxsZXI6IHRydWUsXG4gICAgICAgIGNhbGxlZTogdHJ1ZSxcbiAgICAgICAgYXJndW1lbnRzOiB0cnVlLFxuICAgICAgICBhcml0eTogdHJ1ZVxuICAgIH07XG4gICAgXG4gICAgdmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuICAgIHZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG4gICAgdmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4gICAgdmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gICAgdmFyIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICAgIHZhciBvYmplY3RQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZiAmJiBnZXRQcm90b3R5cGVPZihPYmplY3QpO1xuICAgIFxuICAgIHJldHVybiBmdW5jdGlvbiBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIHNvdXJjZUNvbXBvbmVudCwgYmxhY2tsaXN0KSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc291cmNlQ29tcG9uZW50ICE9PSAnc3RyaW5nJykgeyAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAob2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGluaGVyaXRlZENvbXBvbmVudCA9IGdldFByb3RvdHlwZU9mKHNvdXJjZUNvbXBvbmVudCk7XG4gICAgICAgICAgICAgICAgaWYgKGluaGVyaXRlZENvbXBvbmVudCAmJiBpbmhlcml0ZWRDb21wb25lbnQgIT09IG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIGluaGVyaXRlZENvbXBvbmVudCwgYmxhY2tsaXN0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICAgICAgICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgICAgICAgaWYgKCFSRUFDVF9TVEFUSUNTW2tleV0gJiYgIUtOT1dOX1NUQVRJQ1Nba2V5XSAmJiAoIWJsYWNrbGlzdCB8fCAhYmxhY2tsaXN0W2tleV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZUNvbXBvbmVudCwga2V5KTtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHsgLy8gQXZvaWQgZmFpbHVyZXMgZnJvbSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbiAgICB9O1xufSkpKTtcbiIsIi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbmV4cG9ydCBkZWZhdWx0IGZyZWVHbG9iYWw7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwocm9vdCkge1xuXHR2YXIgcmVzdWx0O1xuXHR2YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cblx0aWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicpIHtcblx0XHRpZiAoU3ltYm9sLm9ic2VydmFibGUpIHtcblx0XHRcdHJlc3VsdCA9IFN5bWJvbC5vYnNlcnZhYmxlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXN1bHQgPSBTeW1ib2woJ29ic2VydmFibGUnKTtcblx0XHRcdFN5bWJvbC5vYnNlcnZhYmxlID0gcmVzdWx0O1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRyZXN1bHQgPSAnQEBvYnNlcnZhYmxlJztcblx0fVxuXG5cdHJldHVybiByZXN1bHQ7XG59O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gXCJyZWFjdC1kb21cIjtcbmltcG9ydCBcIi4vc3R5bGVzaGVldC9yZXNldC5jc3NcIjtcbmltcG9ydCBcIi4vc3R5bGVzaGVldC9zdHlsZS5jc3NcIjtcbmltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5pbXBvcnQgeyBjcmVhdGVTdG9yZSwgYXBwbHlNaWRkbGV3YXJlIH0gZnJvbSBcInJlZHV4XCI7XG5pbXBvcnQgQWRkVG9kbyBmcm9tIFwiLi9jb21wb25lbnRzL0FkZFRvZG9cIjtcbmltcG9ydCByZWR1Y2VycyBmcm9tIFwiLi9yZWR1Y2Vyc1wiO1xuXG5jb25zdCBjcmVhdGVTdG9yZVdpdGhNaWRkbGV3YXJlID0gYXBwbHlNaWRkbGV3YXJlKCkoY3JlYXRlU3RvcmUpO1xuXG5SZWFjdERPTS5yZW5kZXIoXG4gIDxQcm92aWRlciBzdG9yZT17Y3JlYXRlU3RvcmVXaXRoTWlkZGxld2FyZShyZWR1Y2Vycyl9PlxuICAgIDxBZGRUb2RvIC8+XG4gIDwvUHJvdmlkZXI+LFxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmNvbnRhaW5lclwiKVxuKTtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuOC4wXG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0Jzt2YXIgaz1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxuPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IscD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLHE9bj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LHI9bj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsdD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCx1PW4/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LHY9bj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksdz1uP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLHg9bj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLHk9bj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIsej1uP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxhYT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOlxuNjAxMTUsYmE9bj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNixBPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBjYShhLGIsZCxjLGUsZyxoLGYpe2lmKCFhKXthPXZvaWQgMDtpZih2b2lkIDA9PT1iKWE9RXJyb3IoXCJNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwiKTtlbHNle3ZhciBsPVtkLGMsZSxnLGgsZl0sbT0wO2E9RXJyb3IoYi5yZXBsYWNlKC8lcy9nLGZ1bmN0aW9uKCl7cmV0dXJuIGxbbSsrXX0pKTthLm5hbWU9XCJJbnZhcmlhbnQgVmlvbGF0aW9uXCJ9YS5mcmFtZXNUb1BvcD0xO3Rocm93IGE7fX1cbmZ1bmN0aW9uIEIoYSl7Zm9yKHZhciBiPWFyZ3VtZW50cy5sZW5ndGgtMSxkPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTA7YzxiO2MrKylkKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjKzFdKTtjYSghMSxcIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCAlcyBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuIFwiLGQpfXZhciBDPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fSxEPXt9O1xuZnVuY3Rpb24gRShhLGIsZCl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1EO3RoaXMudXBkYXRlcj1kfHxDfUUucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9e307RS5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oYSxiKXtcIm9iamVjdFwiIT09dHlwZW9mIGEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZudWxsIT1hP0IoXCI4NVwiKTp2b2lkIDA7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtFLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtmdW5jdGlvbiBGKCl7fUYucHJvdG90eXBlPUUucHJvdG90eXBlO2Z1bmN0aW9uIEcoYSxiLGQpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RDt0aGlzLnVwZGF0ZXI9ZHx8Q312YXIgSD1HLnByb3RvdHlwZT1uZXcgRjtcbkguY29uc3RydWN0b3I9RztrKEgsRS5wcm90b3R5cGUpO0guaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEk9e2N1cnJlbnQ6bnVsbH0sSj17Y3VycmVudDpudWxsfSxLPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksTD17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gTShhLGIsZCl7dmFyIGM9dm9pZCAwLGU9e30sZz1udWxsLGg9bnVsbDtpZihudWxsIT1iKWZvcihjIGluIHZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihnPVwiXCIrYi5rZXkpLGIpSy5jYWxsKGIsYykmJiFMLmhhc093blByb3BlcnR5KGMpJiYoZVtjXT1iW2NdKTt2YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZS5jaGlsZHJlbj1kO2Vsc2UgaWYoMTxmKXtmb3IodmFyIGw9QXJyYXkoZiksbT0wO208ZjttKyspbFttXT1hcmd1bWVudHNbbSsyXTtlLmNoaWxkcmVuPWx9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGMgaW4gZj1hLmRlZmF1bHRQcm9wcyxmKXZvaWQgMD09PWVbY10mJihlW2NdPWZbY10pO3JldHVybnskJHR5cGVvZjpwLHR5cGU6YSxrZXk6ZyxyZWY6aCxwcm9wczplLF9vd25lcjpKLmN1cnJlbnR9fVxuZnVuY3Rpb24gZGEoYSxiKXtyZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEudHlwZSxrZXk6YixyZWY6YS5yZWYscHJvcHM6YS5wcm9wcyxfb3duZXI6YS5fb3duZXJ9fWZ1bmN0aW9uIE4oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PXB9ZnVuY3Rpb24gZXNjYXBlKGEpe3ZhciBiPXtcIj1cIjpcIj0wXCIsXCI6XCI6XCI9MlwifTtyZXR1cm5cIiRcIisoXCJcIithKS5yZXBsYWNlKC9bPTpdL2csZnVuY3Rpb24oYSl7cmV0dXJuIGJbYV19KX12YXIgTz0vXFwvKy9nLFA9W107ZnVuY3Rpb24gUShhLGIsZCxjKXtpZihQLmxlbmd0aCl7dmFyIGU9UC5wb3AoKTtlLnJlc3VsdD1hO2Uua2V5UHJlZml4PWI7ZS5mdW5jPWQ7ZS5jb250ZXh0PWM7ZS5jb3VudD0wO3JldHVybiBlfXJldHVybntyZXN1bHQ6YSxrZXlQcmVmaXg6YixmdW5jOmQsY29udGV4dDpjLGNvdW50OjB9fVxuZnVuY3Rpb24gUihhKXthLnJlc3VsdD1udWxsO2Eua2V5UHJlZml4PW51bGw7YS5mdW5jPW51bGw7YS5jb250ZXh0PW51bGw7YS5jb3VudD0wOzEwPlAubGVuZ3RoJiZQLnB1c2goYSl9XG5mdW5jdGlvbiBTKGEsYixkLGMpe3ZhciBlPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1lfHxcImJvb2xlYW5cIj09PWUpYT1udWxsO3ZhciBnPSExO2lmKG51bGw9PT1hKWc9ITA7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpnPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBwOmNhc2UgcTpnPSEwfX1pZihnKXJldHVybiBkKGMsYSxcIlwiPT09Yj9cIi5cIitUKGEsMCk6YiksMTtnPTA7Yj1cIlwiPT09Yj9cIi5cIjpiK1wiOlwiO2lmKEFycmF5LmlzQXJyYXkoYSkpZm9yKHZhciBoPTA7aDxhLmxlbmd0aDtoKyspe2U9YVtoXTt2YXIgZj1iK1QoZSxoKTtnKz1TKGUsZixkLGMpfWVsc2UgaWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYT9mPW51bGw6KGY9QSYmYVtBXXx8YVtcIkBAaXRlcmF0b3JcIl0sZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgZj9mOm51bGwpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxoPVxuMDshKGU9YS5uZXh0KCkpLmRvbmU7KWU9ZS52YWx1ZSxmPWIrVChlLGgrKyksZys9UyhlLGYsZCxjKTtlbHNlXCJvYmplY3RcIj09PWUmJihkPVwiXCIrYSxCKFwiMzFcIixcIltvYmplY3QgT2JqZWN0XVwiPT09ZD9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGEpLmpvaW4oXCIsIFwiKStcIn1cIjpkLFwiXCIpKTtyZXR1cm4gZ31mdW5jdGlvbiBVKGEsYixkKXtyZXR1cm4gbnVsbD09YT8wOlMoYSxcIlwiLGIsZCl9ZnVuY3Rpb24gVChhLGIpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJm51bGwhPWEua2V5P2VzY2FwZShhLmtleSk6Yi50b1N0cmluZygzNil9ZnVuY3Rpb24gZWEoYSxiKXthLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspfVxuZnVuY3Rpb24gZmEoYSxiLGQpe3ZhciBjPWEucmVzdWx0LGU9YS5rZXlQcmVmaXg7YT1hLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspO0FycmF5LmlzQXJyYXkoYSk/VihhLGMsZCxmdW5jdGlvbihhKXtyZXR1cm4gYX0pOm51bGwhPWEmJihOKGEpJiYoYT1kYShhLGUrKCFhLmtleXx8YiYmYi5rZXk9PT1hLmtleT9cIlwiOihcIlwiK2Eua2V5KS5yZXBsYWNlKE8sXCIkJi9cIikrXCIvXCIpK2QpKSxjLnB1c2goYSkpfWZ1bmN0aW9uIFYoYSxiLGQsYyxlKXt2YXIgZz1cIlwiO251bGwhPWQmJihnPShcIlwiK2QpLnJlcGxhY2UoTyxcIiQmL1wiKStcIi9cIik7Yj1RKGIsZyxjLGUpO1UoYSxmYSxiKTtSKGIpfWZ1bmN0aW9uIFcoKXt2YXIgYT1JLmN1cnJlbnQ7bnVsbD09PWE/QihcIjMwN1wiKTp2b2lkIDA7cmV0dXJuIGF9XG52YXIgWD17Q2hpbGRyZW46e21hcDpmdW5jdGlvbihhLGIsZCl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgYz1bXTtWKGEsYyxudWxsLGIsZCk7cmV0dXJuIGN9LGZvckVhY2g6ZnVuY3Rpb24oYSxiLGQpe2lmKG51bGw9PWEpcmV0dXJuIGE7Yj1RKG51bGwsbnVsbCxiLGQpO1UoYSxlYSxiKTtSKGIpfSxjb3VudDpmdW5jdGlvbihhKXtyZXR1cm4gVShhLGZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9LG51bGwpfSx0b0FycmF5OmZ1bmN0aW9uKGEpe3ZhciBiPVtdO1YoYSxiLG51bGwsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTtyZXR1cm4gYn0sb25seTpmdW5jdGlvbihhKXtOKGEpP3ZvaWQgMDpCKFwiMTQzXCIpO3JldHVybiBhfX0sY3JlYXRlUmVmOmZ1bmN0aW9uKCl7cmV0dXJue2N1cnJlbnQ6bnVsbH19LENvbXBvbmVudDpFLFB1cmVDb21wb25lbnQ6RyxjcmVhdGVDb250ZXh0OmZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9bnVsbCk7YT17JCR0eXBlb2Y6dyxfY2FsY3VsYXRlQ2hhbmdlZEJpdHM6Yixcbl9jdXJyZW50VmFsdWU6YSxfY3VycmVudFZhbHVlMjphLF90aHJlYWRDb3VudDowLFByb3ZpZGVyOm51bGwsQ29uc3VtZXI6bnVsbH07YS5Qcm92aWRlcj17JCR0eXBlb2Y6dixfY29udGV4dDphfTtyZXR1cm4gYS5Db25zdW1lcj1hfSxmb3J3YXJkUmVmOmZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp5LHJlbmRlcjphfX0sbGF6eTpmdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6YmEsX2N0b3I6YSxfc3RhdHVzOi0xLF9yZXN1bHQ6bnVsbH19LG1lbW86ZnVuY3Rpb24oYSxiKXtyZXR1cm57JCR0eXBlb2Y6YWEsdHlwZTphLGNvbXBhcmU6dm9pZCAwPT09Yj9udWxsOmJ9fSx1c2VDYWxsYmFjazpmdW5jdGlvbihhLGIpe3JldHVybiBXKCkudXNlQ2FsbGJhY2soYSxiKX0sdXNlQ29udGV4dDpmdW5jdGlvbihhLGIpe3JldHVybiBXKCkudXNlQ29udGV4dChhLGIpfSx1c2VFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVygpLnVzZUVmZmVjdChhLGIpfSx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsXG5iLGQpe3JldHVybiBXKCkudXNlSW1wZXJhdGl2ZUhhbmRsZShhLGIsZCl9LHVzZURlYnVnVmFsdWU6ZnVuY3Rpb24oKXt9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBXKCkudXNlTGF5b3V0RWZmZWN0KGEsYil9LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVygpLnVzZU1lbW8oYSxiKX0sdXNlUmVkdWNlcjpmdW5jdGlvbihhLGIsZCl7cmV0dXJuIFcoKS51c2VSZWR1Y2VyKGEsYixkKX0sdXNlUmVmOmZ1bmN0aW9uKGEpe3JldHVybiBXKCkudXNlUmVmKGEpfSx1c2VTdGF0ZTpmdW5jdGlvbihhKXtyZXR1cm4gVygpLnVzZVN0YXRlKGEpfSxGcmFnbWVudDpyLFN0cmljdE1vZGU6dCxTdXNwZW5zZTp6LGNyZWF0ZUVsZW1lbnQ6TSxjbG9uZUVsZW1lbnQ6ZnVuY3Rpb24oYSxiLGQpe251bGw9PT1hfHx2b2lkIDA9PT1hP0IoXCIyNjdcIixhKTp2b2lkIDA7dmFyIGM9dm9pZCAwLGU9ayh7fSxhLnByb3BzKSxnPWEua2V5LGg9YS5yZWYsZj1hLl9vd25lcjtpZihudWxsIT1cbmIpe3ZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZixmPUouY3VycmVudCk7dm9pZCAwIT09Yi5rZXkmJihnPVwiXCIrYi5rZXkpO3ZhciBsPXZvaWQgMDthLnR5cGUmJmEudHlwZS5kZWZhdWx0UHJvcHMmJihsPWEudHlwZS5kZWZhdWx0UHJvcHMpO2ZvcihjIGluIGIpSy5jYWxsKGIsYykmJiFMLmhhc093blByb3BlcnR5KGMpJiYoZVtjXT12b2lkIDA9PT1iW2NdJiZ2b2lkIDAhPT1sP2xbY106YltjXSl9Yz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWMpZS5jaGlsZHJlbj1kO2Vsc2UgaWYoMTxjKXtsPUFycmF5KGMpO2Zvcih2YXIgbT0wO208YzttKyspbFttXT1hcmd1bWVudHNbbSsyXTtlLmNoaWxkcmVuPWx9cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLnR5cGUsa2V5OmcscmVmOmgscHJvcHM6ZSxfb3duZXI6Zn19LGNyZWF0ZUZhY3Rvcnk6ZnVuY3Rpb24oYSl7dmFyIGI9TS5iaW5kKG51bGwsYSk7Yi50eXBlPWE7cmV0dXJuIGJ9LGlzVmFsaWRFbGVtZW50Ok4sdmVyc2lvbjpcIjE2LjguMFwiLFxudW5zdGFibGVfQ29uY3VycmVudE1vZGU6eCx1bnN0YWJsZV9Qcm9maWxlcjp1LF9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOntSZWFjdEN1cnJlbnREaXNwYXRjaGVyOkksUmVhY3RDdXJyZW50T3duZXI6Sixhc3NpZ246a319LFk9e2RlZmF1bHQ6WH0sWj1ZJiZYfHxZO21vZHVsZS5leHBvcnRzPVouZGVmYXVsdHx8WjtcbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuOC4wXG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYWE9cmVxdWlyZShcInJlYWN0XCIpLHA9cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksYmE9cmVxdWlyZShcInNjaGVkdWxlclwiKTtmdW5jdGlvbiBjYShhLGIsYyxkLGUsZixnLGgpe2lmKCFhKXthPXZvaWQgMDtpZih2b2lkIDA9PT1iKWE9RXJyb3IoXCJNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwiKTtlbHNle3ZhciBsPVtjLGQsZSxmLGcsaF0saz0wO2E9RXJyb3IoYi5yZXBsYWNlKC8lcy9nLGZ1bmN0aW9uKCl7cmV0dXJuIGxbaysrXX0pKTthLm5hbWU9XCJJbnZhcmlhbnQgVmlvbGF0aW9uXCJ9YS5mcmFtZXNUb1BvcD0xO3Rocm93IGE7fX1cbmZ1bmN0aW9uIHQoYSl7Zm9yKHZhciBiPWFyZ3VtZW50cy5sZW5ndGgtMSxjPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxkPTA7ZDxiO2QrKyljKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tkKzFdKTtjYSghMSxcIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCAlcyBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuIFwiLGMpfWFhP3ZvaWQgMDp0KFwiMjI3XCIpO2Z1bmN0aW9uIGRhKGEsYixjLGQsZSxmLGcsaCxsKXt2YXIgaz1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMyk7dHJ5e2IuYXBwbHkoYyxrKX1jYXRjaChtKXt0aGlzLm9uRXJyb3IobSl9fVxudmFyIGVhPSExLGZhPW51bGwsaGE9ITEsaWE9bnVsbCxqYT17b25FcnJvcjpmdW5jdGlvbihhKXtlYT0hMDtmYT1hfX07ZnVuY3Rpb24ga2EoYSxiLGMsZCxlLGYsZyxoLGwpe2VhPSExO2ZhPW51bGw7ZGEuYXBwbHkoamEsYXJndW1lbnRzKX1mdW5jdGlvbiBsYShhLGIsYyxkLGUsZixnLGgsbCl7a2EuYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKGVhKXtpZihlYSl7dmFyIGs9ZmE7ZWE9ITE7ZmE9bnVsbH1lbHNlIHQoXCIxOThcIiksaz12b2lkIDA7aGF8fChoYT0hMCxpYT1rKX19dmFyIG1hPW51bGwsbmE9e307XG5mdW5jdGlvbiBvYSgpe2lmKG1hKWZvcih2YXIgYSBpbiBuYSl7dmFyIGI9bmFbYV0sYz1tYS5pbmRleE9mKGEpOy0xPGM/dm9pZCAwOnQoXCI5NlwiLGEpO2lmKCFwYVtjXSl7Yi5leHRyYWN0RXZlbnRzP3ZvaWQgMDp0KFwiOTdcIixhKTtwYVtjXT1iO2M9Yi5ldmVudFR5cGVzO2Zvcih2YXIgZCBpbiBjKXt2YXIgZT12b2lkIDA7dmFyIGY9Y1tkXSxnPWIsaD1kO3JhLmhhc093blByb3BlcnR5KGgpP3QoXCI5OVwiLGgpOnZvaWQgMDtyYVtoXT1mO3ZhciBsPWYucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM7aWYobCl7Zm9yKGUgaW4gbClsLmhhc093blByb3BlcnR5KGUpJiZzYShsW2VdLGcsaCk7ZT0hMH1lbHNlIGYucmVnaXN0cmF0aW9uTmFtZT8oc2EoZi5yZWdpc3RyYXRpb25OYW1lLGcsaCksZT0hMCk6ZT0hMTtlP3ZvaWQgMDp0KFwiOThcIixkLGEpfX19fVxuZnVuY3Rpb24gc2EoYSxiLGMpe3RhW2FdP3QoXCIxMDBcIixhKTp2b2lkIDA7dGFbYV09Yjt1YVthXT1iLmV2ZW50VHlwZXNbY10uZGVwZW5kZW5jaWVzfXZhciBwYT1bXSxyYT17fSx0YT17fSx1YT17fSx2YT1udWxsLHdhPW51bGwseGE9bnVsbDtmdW5jdGlvbiB5YShhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9eGEoYyk7bGEoZCxiLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH1mdW5jdGlvbiB6YShhLGIpe251bGw9PWI/dChcIjMwXCIpOnZvaWQgMDtpZihudWxsPT1hKXJldHVybiBiO2lmKEFycmF5LmlzQXJyYXkoYSkpe2lmKEFycmF5LmlzQXJyYXkoYikpcmV0dXJuIGEucHVzaC5hcHBseShhLGIpLGE7YS5wdXNoKGIpO3JldHVybiBhfXJldHVybiBBcnJheS5pc0FycmF5KGIpP1thXS5jb25jYXQoYik6W2EsYl19XG5mdW5jdGlvbiBBYShhLGIsYyl7QXJyYXkuaXNBcnJheShhKT9hLmZvckVhY2goYixjKTphJiZiLmNhbGwoYyxhKX12YXIgQmE9bnVsbDtmdW5jdGlvbiBDYShhKXtpZihhKXt2YXIgYj1hLl9kaXNwYXRjaExpc3RlbmVycyxjPWEuX2Rpc3BhdGNoSW5zdGFuY2VzO2lmKEFycmF5LmlzQXJyYXkoYikpZm9yKHZhciBkPTA7ZDxiLmxlbmd0aCYmIWEuaXNQcm9wYWdhdGlvblN0b3BwZWQoKTtkKyspeWEoYSxiW2RdLGNbZF0pO2Vsc2UgYiYmeWEoYSxiLGMpO2EuX2Rpc3BhdGNoTGlzdGVuZXJzPW51bGw7YS5fZGlzcGF0Y2hJbnN0YW5jZXM9bnVsbDthLmlzUGVyc2lzdGVudCgpfHxhLmNvbnN0cnVjdG9yLnJlbGVhc2UoYSl9fVxudmFyIERhPXtpbmplY3RFdmVudFBsdWdpbk9yZGVyOmZ1bmN0aW9uKGEpe21hP3QoXCIxMDFcIik6dm9pZCAwO21hPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGEpO29hKCl9LGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZTpmdW5jdGlvbihhKXt2YXIgYj0hMSxjO2ZvcihjIGluIGEpaWYoYS5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9YVtjXTtuYS5oYXNPd25Qcm9wZXJ0eShjKSYmbmFbY109PT1kfHwobmFbY10/dChcIjEwMlwiLGMpOnZvaWQgMCxuYVtjXT1kLGI9ITApfWImJm9hKCl9fTtcbmZ1bmN0aW9uIEVhKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYoIWMpcmV0dXJuIG51bGw7dmFyIGQ9dmEoYyk7aWYoIWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOihkPSFkLmRpc2FibGVkKXx8KGE9YS50eXBlLGQ9IShcImJ1dHRvblwiPT09YXx8XCJpbnB1dFwiPT09YXx8XCJzZWxlY3RcIj09PWF8fFwidGV4dGFyZWFcIj09PWEpKTthPSFkO2JyZWFrIGE7ZGVmYXVsdDphPSExfWlmKGEpcmV0dXJuIG51bGw7YyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGM/dChcIjIzMVwiLGIsdHlwZW9mIGMpOnZvaWQgMDtcbnJldHVybiBjfWZ1bmN0aW9uIEZhKGEpe251bGwhPT1hJiYoQmE9emEoQmEsYSkpO2E9QmE7QmE9bnVsbDtpZihhJiYoQWEoYSxDYSksQmE/dChcIjk1XCIpOnZvaWQgMCxoYSkpdGhyb3cgYT1pYSxoYT0hMSxpYT1udWxsLGE7fXZhciBHYT1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSxIYT1cIl9fcmVhY3RJbnRlcm5hbEluc3RhbmNlJFwiK0dhLElhPVwiX19yZWFjdEV2ZW50SGFuZGxlcnMkXCIrR2E7ZnVuY3Rpb24gSmEoYSl7aWYoYVtIYV0pcmV0dXJuIGFbSGFdO2Zvcig7IWFbSGFdOylpZihhLnBhcmVudE5vZGUpYT1hLnBhcmVudE5vZGU7ZWxzZSByZXR1cm4gbnVsbDthPWFbSGFdO3JldHVybiA1PT09YS50YWd8fDY9PT1hLnRhZz9hOm51bGx9ZnVuY3Rpb24gS2EoYSl7YT1hW0hhXTtyZXR1cm4hYXx8NSE9PWEudGFnJiY2IT09YS50YWc/bnVsbDphfVxuZnVuY3Rpb24gTGEoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGEuc3RhdGVOb2RlO3QoXCIzM1wiKX1mdW5jdGlvbiBNYShhKXtyZXR1cm4gYVtJYV18fG51bGx9ZnVuY3Rpb24gTmEoYSl7ZG8gYT1hLnJldHVybjt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1mdW5jdGlvbiBPYShhLGIsYyl7aWYoYj1FYShhLGMuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXNbYl0pKWMuX2Rpc3BhdGNoTGlzdGVuZXJzPXphKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPXphKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpfVxuZnVuY3Rpb24gUGEoYSl7aWYoYSYmYS5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcyl7Zm9yKHZhciBiPWEuX3RhcmdldEluc3QsYz1bXTtiOyljLnB1c2goYiksYj1OYShiKTtmb3IoYj1jLmxlbmd0aDswPGItLTspT2EoY1tiXSxcImNhcHR1cmVkXCIsYSk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKylPYShjW2JdLFwiYnViYmxlZFwiLGEpfX1mdW5jdGlvbiBRYShhLGIsYyl7YSYmYyYmYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiYoYj1FYShhLGMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSkpJiYoYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9emEoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9emEoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSkpfWZ1bmN0aW9uIFJhKGEpe2EmJmEuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmUWEoYS5fdGFyZ2V0SW5zdCxudWxsLGEpfVxuZnVuY3Rpb24gU2EoYSl7QWEoYSxQYSl9dmFyIFRhPSEoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fCF3aW5kb3cuZG9jdW1lbnR8fCF3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7ZnVuY3Rpb24gVWEoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtyZXR1cm4gY312YXIgVmE9e2FuaW1hdGlvbmVuZDpVYShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjpVYShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OlVhKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOlVhKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sV2E9e30sWGE9e307XG5UYSYmKFhhPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIFZhLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIFZhLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIFZhLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIFZhLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7ZnVuY3Rpb24gWWEoYSl7aWYoV2FbYV0pcmV0dXJuIFdhW2FdO2lmKCFWYVthXSlyZXR1cm4gYTt2YXIgYj1WYVthXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBYYSlyZXR1cm4gV2FbYV09YltjXTtyZXR1cm4gYX1cbnZhciBaYT1ZYShcImFuaW1hdGlvbmVuZFwiKSwkYT1ZYShcImFuaW1hdGlvbml0ZXJhdGlvblwiKSxhYj1ZYShcImFuaW1hdGlvbnN0YXJ0XCIpLGJiPVlhKFwidHJhbnNpdGlvbmVuZFwiKSxjYj1cImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2Ugc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWV1cGRhdGUgdm9sdW1lY2hhbmdlIHdhaXRpbmdcIi5zcGxpdChcIiBcIiksZGI9bnVsbCxlYj1udWxsLGZiPW51bGw7XG5mdW5jdGlvbiBnYigpe2lmKGZiKXJldHVybiBmYjt2YXIgYSxiPWViLGM9Yi5sZW5ndGgsZCxlPVwidmFsdWVcImluIGRiP2RiLnZhbHVlOmRiLnRleHRDb250ZW50LGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGc9Yy1hO2ZvcihkPTE7ZDw9ZyYmYltjLWRdPT09ZVtmLWRdO2QrKyk7cmV0dXJuIGZiPWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCl9ZnVuY3Rpb24gaGIoKXtyZXR1cm4hMH1mdW5jdGlvbiBpYigpe3JldHVybiExfVxuZnVuY3Rpb24gQShhLGIsYyxkKXt0aGlzLmRpc3BhdGNoQ29uZmlnPWE7dGhpcy5fdGFyZ2V0SW5zdD1iO3RoaXMubmF0aXZlRXZlbnQ9YzthPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlO2Zvcih2YXIgZSBpbiBhKWEuaGFzT3duUHJvcGVydHkoZSkmJigoYj1hW2VdKT90aGlzW2VdPWIoYyk6XCJ0YXJnZXRcIj09PWU/dGhpcy50YXJnZXQ9ZDp0aGlzW2VdPWNbZV0pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1jLmRlZmF1bHRQcmV2ZW50ZWQ/Yy5kZWZhdWx0UHJldmVudGVkOiExPT09Yy5yZXR1cm5WYWx1ZSk/aGI6aWI7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1pYjtyZXR1cm4gdGhpc31cbnAoQS5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT09dHlwZW9mIGEucmV0dXJuVmFsdWUmJihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1oYil9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1oYil9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt0aGlzLmlzUGVyc2lzdGVudD1oYn0saXNQZXJzaXN0ZW50OmliLGRlc3RydWN0b3I6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZSxcbmI7Zm9yKGIgaW4gYSl0aGlzW2JdPW51bGw7dGhpcy5uYXRpdmVFdmVudD10aGlzLl90YXJnZXRJbnN0PXRoaXMuZGlzcGF0Y2hDb25maWc9bnVsbDt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXRoaXMuaXNEZWZhdWx0UHJldmVudGVkPWliO3RoaXMuX2Rpc3BhdGNoSW5zdGFuY2VzPXRoaXMuX2Rpc3BhdGNoTGlzdGVuZXJzPW51bGx9fSk7QS5JbnRlcmZhY2U9e3R5cGU6bnVsbCx0YXJnZXQ6bnVsbCxjdXJyZW50VGFyZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9LGV2ZW50UGhhc2U6bnVsbCxidWJibGVzOm51bGwsY2FuY2VsYWJsZTpudWxsLHRpbWVTdGFtcDpmdW5jdGlvbihhKXtyZXR1cm4gYS50aW1lU3RhbXB8fERhdGUubm93KCl9LGRlZmF1bHRQcmV2ZW50ZWQ6bnVsbCxpc1RydXN0ZWQ6bnVsbH07XG5BLmV4dGVuZD1mdW5jdGlvbihhKXtmdW5jdGlvbiBiKCl7fWZ1bmN0aW9uIGMoKXtyZXR1cm4gZC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9dmFyIGQ9dGhpcztiLnByb3RvdHlwZT1kLnByb3RvdHlwZTt2YXIgZT1uZXcgYjtwKGUsYy5wcm90b3R5cGUpO2MucHJvdG90eXBlPWU7Yy5wcm90b3R5cGUuY29uc3RydWN0b3I9YztjLkludGVyZmFjZT1wKHt9LGQuSW50ZXJmYWNlLGEpO2MuZXh0ZW5kPWQuZXh0ZW5kO2piKGMpO3JldHVybiBjfTtqYihBKTtmdW5jdGlvbiBrYihhLGIsYyxkKXtpZih0aGlzLmV2ZW50UG9vbC5sZW5ndGgpe3ZhciBlPXRoaXMuZXZlbnRQb29sLnBvcCgpO3RoaXMuY2FsbChlLGEsYixjLGQpO3JldHVybiBlfXJldHVybiBuZXcgdGhpcyhhLGIsYyxkKX1mdW5jdGlvbiBsYihhKXthIGluc3RhbmNlb2YgdGhpcz92b2lkIDA6dChcIjI3OVwiKTthLmRlc3RydWN0b3IoKTsxMD50aGlzLmV2ZW50UG9vbC5sZW5ndGgmJnRoaXMuZXZlbnRQb29sLnB1c2goYSl9XG5mdW5jdGlvbiBqYihhKXthLmV2ZW50UG9vbD1bXTthLmdldFBvb2xlZD1rYjthLnJlbGVhc2U9bGJ9dmFyIG1iPUEuZXh0ZW5kKHtkYXRhOm51bGx9KSxuYj1BLmV4dGVuZCh7ZGF0YTpudWxsfSksb2I9WzksMTMsMjcsMzJdLHBiPVRhJiZcIkNvbXBvc2l0aW9uRXZlbnRcImluIHdpbmRvdyxxYj1udWxsO1RhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJihxYj1kb2N1bWVudC5kb2N1bWVudE1vZGUpO1xudmFyIHJiPVRhJiZcIlRleHRFdmVudFwiaW4gd2luZG93JiYhcWIsc2I9VGEmJighcGJ8fHFiJiY4PHFiJiYxMT49cWIpLHRiPVN0cmluZy5mcm9tQ2hhckNvZGUoMzIpLHZiPXtiZWZvcmVJbnB1dDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkJlZm9yZUlucHV0XCIsY2FwdHVyZWQ6XCJvbkJlZm9yZUlucHV0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W1wiY29tcG9zaXRpb25lbmRcIixcImtleXByZXNzXCIsXCJ0ZXh0SW5wdXRcIixcInBhc3RlXCJdfSxjb21wb3NpdGlvbkVuZDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uRW5kXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uRW5kQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9uZW5kIGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblN0YXJ0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25TdGFydFwiLFxuY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25VcGRhdGU6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblVwZGF0ZVwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvblVwZGF0ZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbnVwZGF0ZSBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX19LHdiPSExO1xuZnVuY3Rpb24geGIoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImtleXVwXCI6cmV0dXJuLTEhPT1vYi5pbmRleE9mKGIua2V5Q29kZSk7Y2FzZSBcImtleWRvd25cIjpyZXR1cm4gMjI5IT09Yi5rZXlDb2RlO2Nhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwiYmx1clwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIHliKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIHpiPSExO2Z1bmN0aW9uIEFiKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiB5YihiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7d2I9ITA7cmV0dXJuIHRiO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PXRiJiZ3Yj9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBCYihhLGIpe2lmKHpiKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCFwYiYmeGIoYSxiKT8oYT1nYigpLGZiPWViPWRiPW51bGwsemI9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIHNiJiZcImtvXCIhPT1iLmxvY2FsZT9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciBDYj17ZXZlbnRUeXBlczp2YixleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPXZvaWQgMDt2YXIgZj12b2lkIDA7aWYocGIpYjp7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6ZT12Yi5jb21wb3NpdGlvblN0YXJ0O2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6ZT12Yi5jb21wb3NpdGlvbkVuZDticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOmU9dmIuY29tcG9zaXRpb25VcGRhdGU7YnJlYWsgYn1lPXZvaWQgMH1lbHNlIHpiP3hiKGEsYykmJihlPXZiLmNvbXBvc2l0aW9uRW5kKTpcImtleWRvd25cIj09PWEmJjIyOT09PWMua2V5Q29kZSYmKGU9dmIuY29tcG9zaXRpb25TdGFydCk7ZT8oc2ImJlwia29cIiE9PWMubG9jYWxlJiYoemJ8fGUhPT12Yi5jb21wb3NpdGlvblN0YXJ0P2U9PT12Yi5jb21wb3NpdGlvbkVuZCYmemImJihmPWdiKCkpOihkYj1kLGViPVwidmFsdWVcImluIGRiP2RiLnZhbHVlOmRiLnRleHRDb250ZW50LHpiPVxuITApKSxlPW1iLmdldFBvb2xlZChlLGIsYyxkKSxmP2UuZGF0YT1mOihmPXliKGMpLG51bGwhPT1mJiYoZS5kYXRhPWYpKSxTYShlKSxmPWUpOmY9bnVsbDsoYT1yYj9BYihhLGMpOkJiKGEsYykpPyhiPW5iLmdldFBvb2xlZCh2Yi5iZWZvcmVJbnB1dCxiLGMsZCksYi5kYXRhPWEsU2EoYikpOmI9bnVsbDtyZXR1cm4gbnVsbD09PWY/YjpudWxsPT09Yj9mOltmLGJdfX0sRGI9bnVsbCxFYj1udWxsLEZiPW51bGw7ZnVuY3Rpb24gR2IoYSl7aWYoYT13YShhKSl7XCJmdW5jdGlvblwiIT09dHlwZW9mIERiP3QoXCIyODBcIik6dm9pZCAwO3ZhciBiPXZhKGEuc3RhdGVOb2RlKTtEYihhLnN0YXRlTm9kZSxhLnR5cGUsYil9fWZ1bmN0aW9uIEhiKGEpe0ViP0ZiP0ZiLnB1c2goYSk6RmI9W2FdOkViPWF9ZnVuY3Rpb24gSWIoKXtpZihFYil7dmFyIGE9RWIsYj1GYjtGYj1FYj1udWxsO0diKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKylHYihiW2FdKX19XG5mdW5jdGlvbiBKYihhLGIpe3JldHVybiBhKGIpfWZ1bmN0aW9uIEtiKGEsYixjKXtyZXR1cm4gYShiLGMpfWZ1bmN0aW9uIExiKCl7fXZhciBNYj0hMTtmdW5jdGlvbiBOYihhLGIpe2lmKE1iKXJldHVybiBhKGIpO01iPSEwO3RyeXtyZXR1cm4gSmIoYSxiKX1maW5hbGx5e2lmKE1iPSExLG51bGwhPT1FYnx8bnVsbCE9PUZiKUxiKCksSWIoKX19dmFyIE9iPXtjb2xvcjohMCxkYXRlOiEwLGRhdGV0aW1lOiEwLFwiZGF0ZXRpbWUtbG9jYWxcIjohMCxlbWFpbDohMCxtb250aDohMCxudW1iZXI6ITAscGFzc3dvcmQ6ITAscmFuZ2U6ITAsc2VhcmNoOiEwLHRlbDohMCx0ZXh0OiEwLHRpbWU6ITAsdXJsOiEwLHdlZWs6ITB9O2Z1bmN0aW9uIFBiKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1iPyEhT2JbYS50eXBlXTpcInRleHRhcmVhXCI9PT1iPyEwOiExfVxuZnVuY3Rpb24gUWIoYSl7YT1hLnRhcmdldHx8YS5zcmNFbGVtZW50fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfWZ1bmN0aW9uIFNiKGEpe2lmKCFUYSlyZXR1cm4hMTthPVwib25cIithO3ZhciBiPWEgaW4gZG9jdW1lbnQ7Ynx8KGI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxiLnNldEF0dHJpYnV0ZShhLFwicmV0dXJuO1wiKSxiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBiW2FdKTtyZXR1cm4gYn1mdW5jdGlvbiBUYihhKXt2YXIgYj1hLnR5cGU7cmV0dXJuKGE9YS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWEudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWJ8fFwicmFkaW9cIj09PWIpfVxuZnVuY3Rpb24gVWIoYSl7dmFyIGI9VGIoYSk/XCJjaGVja2VkXCI6XCJ2YWx1ZVwiLGM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxiKSxkPVwiXCIrYVtiXTtpZighYS5oYXNPd25Qcm9wZXJ0eShiKSYmXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnNldCl7dmFyIGU9Yy5nZXQsZj1jLnNldDtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGUuY2FsbCh0aGlzKX0sc2V0OmZ1bmN0aW9uKGEpe2Q9XCJcIithO2YuY2FsbCh0aGlzLGEpfX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2VudW1lcmFibGU6Yy5lbnVtZXJhYmxlfSk7cmV0dXJue2dldFZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIGR9LHNldFZhbHVlOmZ1bmN0aW9uKGEpe2Q9XCJcIithfSxzdG9wVHJhY2tpbmc6ZnVuY3Rpb24oKXthLl92YWx1ZVRyYWNrZXI9XG5udWxsO2RlbGV0ZSBhW2JdfX19fWZ1bmN0aW9uIFZiKGEpe2EuX3ZhbHVlVHJhY2tlcnx8KGEuX3ZhbHVlVHJhY2tlcj1VYihhKSl9ZnVuY3Rpb24gV2IoYSl7aWYoIWEpcmV0dXJuITE7dmFyIGI9YS5fdmFsdWVUcmFja2VyO2lmKCFiKXJldHVybiEwO3ZhciBjPWIuZ2V0VmFsdWUoKTt2YXIgZD1cIlwiO2EmJihkPVRiKGEpP2EuY2hlY2tlZD9cInRydWVcIjpcImZhbHNlXCI6YS52YWx1ZSk7YT1kO3JldHVybiBhIT09Yz8oYi5zZXRWYWx1ZShhKSwhMCk6ITF9XG52YXIgWGI9YWEuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQsWWI9L14oLiopW1xcXFxcXC9dLyxEPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsWmI9RD9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMywkYj1EP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsYWM9RD9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsYmM9RD9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsY2M9RD9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsZGM9RD9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksZWM9RD9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCxmYz1EP1N5bWJvbC5mb3IoXCJyZWFjdC5jb25jdXJyZW50X21vZGVcIik6NjAxMTEsZ2M9RD9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIsaGM9RD9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6XG42MDExMyxpYz1EP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LGpjPUQ/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTYsa2M9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIGxjKGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT1rYyYmYVtrY118fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1cbmZ1bmN0aW9uIG1jKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGEuZGlzcGxheU5hbWV8fGEubmFtZXx8bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpcmV0dXJuIGE7c3dpdGNoKGEpe2Nhc2UgZmM6cmV0dXJuXCJDb25jdXJyZW50TW9kZVwiO2Nhc2UgYWM6cmV0dXJuXCJGcmFnbWVudFwiO2Nhc2UgJGI6cmV0dXJuXCJQb3J0YWxcIjtjYXNlIGNjOnJldHVyblwiUHJvZmlsZXJcIjtjYXNlIGJjOnJldHVyblwiU3RyaWN0TW9kZVwiO2Nhc2UgaGM6cmV0dXJuXCJTdXNwZW5zZVwifWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBlYzpyZXR1cm5cIkNvbnRleHQuQ29uc3VtZXJcIjtjYXNlIGRjOnJldHVyblwiQ29udGV4dC5Qcm92aWRlclwiO2Nhc2UgZ2M6dmFyIGI9YS5yZW5kZXI7Yj1iLmRpc3BsYXlOYW1lfHxiLm5hbWV8fFwiXCI7cmV0dXJuIGEuZGlzcGxheU5hbWV8fChcIlwiIT09Yj9cIkZvcndhcmRSZWYoXCIrYitcblwiKVwiOlwiRm9yd2FyZFJlZlwiKTtjYXNlIGljOnJldHVybiBtYyhhLnR5cGUpO2Nhc2UgamM6aWYoYT0xPT09YS5fc3RhdHVzP2EuX3Jlc3VsdDpudWxsKXJldHVybiBtYyhhKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBuYyhhKXt2YXIgYj1cIlwiO2Rve2E6c3dpdGNoKGEudGFnKXtjYXNlIDM6Y2FzZSA0OmNhc2UgNjpjYXNlIDc6Y2FzZSAxMDpjYXNlIDk6dmFyIGM9XCJcIjticmVhayBhO2RlZmF1bHQ6dmFyIGQ9YS5fZGVidWdPd25lcixlPWEuX2RlYnVnU291cmNlLGY9bWMoYS50eXBlKTtjPW51bGw7ZCYmKGM9bWMoZC50eXBlKSk7ZD1mO2Y9XCJcIjtlP2Y9XCIgKGF0IFwiK2UuZmlsZU5hbWUucmVwbGFjZShZYixcIlwiKStcIjpcIitlLmxpbmVOdW1iZXIrXCIpXCI6YyYmKGY9XCIgKGNyZWF0ZWQgYnkgXCIrYytcIilcIik7Yz1cIlxcbiAgICBpbiBcIisoZHx8XCJVbmtub3duXCIpK2Z9Yis9YzthPWEucmV0dXJufXdoaWxlKGEpO3JldHVybiBifVxudmFyIG9jPS9eWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXVs6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcLS4wLTlcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwXSokLyxwYz1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LHFjPXt9LHJjPXt9O1xuZnVuY3Rpb24gc2MoYSl7aWYocGMuY2FsbChyYyxhKSlyZXR1cm4hMDtpZihwYy5jYWxsKHFjLGEpKXJldHVybiExO2lmKG9jLnRlc3QoYSkpcmV0dXJuIHJjW2FdPSEwO3FjW2FdPSEwO3JldHVybiExfWZ1bmN0aW9uIHRjKGEsYixjLGQpe2lmKG51bGwhPT1jJiYwPT09Yy50eXBlKXJldHVybiExO3N3aXRjaCh0eXBlb2YgYil7Y2FzZSBcImZ1bmN0aW9uXCI6Y2FzZSBcInN5bWJvbFwiOnJldHVybiEwO2Nhc2UgXCJib29sZWFuXCI6aWYoZClyZXR1cm4hMTtpZihudWxsIT09YylyZXR1cm4hYy5hY2NlcHRzQm9vbGVhbnM7YT1hLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw1KTtyZXR1cm5cImRhdGEtXCIhPT1hJiZcImFyaWEtXCIhPT1hO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gdWMoYSxiLGMsZCl7aWYobnVsbD09PWJ8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYnx8dGMoYSxiLGMsZCkpcmV0dXJuITA7aWYoZClyZXR1cm4hMTtpZihudWxsIT09Yylzd2l0Y2goYy50eXBlKXtjYXNlIDM6cmV0dXJuIWI7Y2FzZSA0OnJldHVybiExPT09YjtjYXNlIDU6cmV0dXJuIGlzTmFOKGIpO2Nhc2UgNjpyZXR1cm4gaXNOYU4oYil8fDE+Yn1yZXR1cm4hMX1mdW5jdGlvbiBGKGEsYixjLGQsZSl7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yn12YXIgRz17fTtcblwiY2hpbGRyZW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgZGVmYXVsdFZhbHVlIGRlZmF1bHRDaGVja2VkIGlubmVySFRNTCBzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcgc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIHN0eWxlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7R1thXT1uZXcgRihhLDAsITEsYSxudWxsKX0pO1tbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTtHW2JdPW5ldyBGKGIsMSwhMSxhWzFdLG51bGwpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7R1thXT1uZXcgRihhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7XG5bXCJhdXRvUmV2ZXJzZVwiLFwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLFwiZm9jdXNhYmxlXCIsXCJwcmVzZXJ2ZUFscGhhXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7R1thXT1uZXcgRihhLDIsITEsYSxudWxsKX0pO1wiYWxsb3dGdWxsU2NyZWVuIGFzeW5jIGF1dG9Gb2N1cyBhdXRvUGxheSBjb250cm9scyBkZWZhdWx0IGRlZmVyIGRpc2FibGVkIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7R1thXT1uZXcgRihhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7W1wiY2hlY2tlZFwiLFwibXVsdGlwbGVcIixcIm11dGVkXCIsXCJzZWxlY3RlZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0dbYV09bmV3IEYoYSwzLCEwLGEsbnVsbCl9KTtcbltcImNhcHR1cmVcIixcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7R1thXT1uZXcgRihhLDQsITEsYSxudWxsKX0pO1tcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtHW2FdPW5ldyBGKGEsNiwhMSxhLG51bGwpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtHW2FdPW5ldyBGKGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTt2YXIgdmM9L1tcXC06XShbYS16XSkvZztmdW5jdGlvbiB3YyhhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZSh2YyxcbndjKTtHW2JdPW5ldyBGKGIsMSwhMSxhLG51bGwpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6aHJlZiB4bGluazpyb2xlIHhsaW5rOnNob3cgeGxpbms6dGl0bGUgeGxpbms6dHlwZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZSh2Yyx3Yyk7R1tiXT1uZXcgRihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIil9KTtbXCJ4bWw6YmFzZVwiLFwieG1sOmxhbmdcIixcInhtbDpzcGFjZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZSh2Yyx3Yyk7R1tiXT1uZXcgRihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiKX0pO0cudGFiSW5kZXg9bmV3IEYoXCJ0YWJJbmRleFwiLDEsITEsXCJ0YWJpbmRleFwiLG51bGwpO1xuZnVuY3Rpb24geGMoYSxiLGMsZCl7dmFyIGU9Ry5oYXNPd25Qcm9wZXJ0eShiKT9HW2JdOm51bGw7dmFyIGY9bnVsbCE9PWU/MD09PWUudHlwZTpkPyExOiEoMjxiLmxlbmd0aCl8fFwib1wiIT09YlswXSYmXCJPXCIhPT1iWzBdfHxcIm5cIiE9PWJbMV0mJlwiTlwiIT09YlsxXT8hMTohMDtmfHwodWMoYixjLGUsZCkmJihjPW51bGwpLGR8fG51bGw9PT1lP3NjKGIpJiYobnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6YS5zZXRBdHRyaWJ1dGUoYixcIlwiK2MpKTplLm11c3RVc2VQcm9wZXJ0eT9hW2UucHJvcGVydHlOYW1lXT1udWxsPT09Yz8zPT09ZS50eXBlPyExOlwiXCI6YzooYj1lLmF0dHJpYnV0ZU5hbWUsZD1lLmF0dHJpYnV0ZU5hbWVzcGFjZSxudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTooZT1lLnR5cGUsYz0zPT09ZXx8ND09PWUmJiEwPT09Yz9cIlwiOlwiXCIrYyxkP2Euc2V0QXR0cmlidXRlTlMoZCxiLGMpOmEuc2V0QXR0cmlidXRlKGIsYykpKSl9XG5mdW5jdGlvbiB5YyhhKXtzd2l0Y2godHlwZW9mIGEpe2Nhc2UgXCJib29sZWFuXCI6Y2FzZSBcIm51bWJlclwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcInVuZGVmaW5lZFwiOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuXCJcIn19ZnVuY3Rpb24gemMoYSxiKXt2YXIgYz1iLmNoZWNrZWQ7cmV0dXJuIHAoe30sYix7ZGVmYXVsdENoZWNrZWQ6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsdmFsdWU6dm9pZCAwLGNoZWNrZWQ6bnVsbCE9Yz9jOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZH0pfVxuZnVuY3Rpb24gQWMoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9eWMobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiBCYyhhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJnhjKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiBDYyhhLGIpe0JjKGEsYik7dmFyIGM9eWMoYi52YWx1ZSksZD1iLnR5cGU7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09ZCl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtlbHNlIGlmKFwic3VibWl0XCI9PT1kfHxcInJlc2V0XCI9PT1kKXthLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO3JldHVybn1iLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/RGMoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmRGMoYSxiLnR5cGUseWMoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBFYyhhLGIsYyl7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKXt2YXIgZD1iLnR5cGU7aWYoIShcInN1Ym1pdFwiIT09ZCYmXCJyZXNldFwiIT09ZHx8dm9pZCAwIT09Yi52YWx1ZSYmbnVsbCE9PWIudmFsdWUpKXJldHVybjtiPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtjfHxiPT09YS52YWx1ZXx8KGEudmFsdWU9Yik7YS5kZWZhdWx0VmFsdWU9Yn1jPWEubmFtZTtcIlwiIT09YyYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSFhLmRlZmF1bHRDaGVja2VkO2EuZGVmYXVsdENoZWNrZWQ9ISFhLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWQ7XCJcIiE9PWMmJihhLm5hbWU9Yyl9XG5mdW5jdGlvbiBEYyhhLGIsYyl7aWYoXCJudW1iZXJcIiE9PWJ8fGEub3duZXJEb2N1bWVudC5hY3RpdmVFbGVtZW50IT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9dmFyIEZjPXtjaGFuZ2U6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25DaGFuZ2VcIixjYXB0dXJlZDpcIm9uQ2hhbmdlQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNoYW5nZSBjbGljayBmb2N1cyBpbnB1dCBrZXlkb3duIGtleXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKX19O2Z1bmN0aW9uIEdjKGEsYixjKXthPUEuZ2V0UG9vbGVkKEZjLmNoYW5nZSxhLGIsYyk7YS50eXBlPVwiY2hhbmdlXCI7SGIoYyk7U2EoYSk7cmV0dXJuIGF9dmFyIEhjPW51bGwsSWM9bnVsbDtmdW5jdGlvbiBKYyhhKXtGYShhKX1cbmZ1bmN0aW9uIEtjKGEpe3ZhciBiPUxhKGEpO2lmKFdiKGIpKXJldHVybiBhfWZ1bmN0aW9uIExjKGEsYil7aWYoXCJjaGFuZ2VcIj09PWEpcmV0dXJuIGJ9dmFyIE1jPSExO1RhJiYoTWM9U2IoXCJpbnB1dFwiKSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKSk7ZnVuY3Rpb24gTmMoKXtIYyYmKEhjLmRldGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLE9jKSxJYz1IYz1udWxsKX1mdW5jdGlvbiBPYyhhKXtcInZhbHVlXCI9PT1hLnByb3BlcnR5TmFtZSYmS2MoSWMpJiYoYT1HYyhJYyxhLFFiKGEpKSxOYihKYyxhKSl9ZnVuY3Rpb24gUGMoYSxiLGMpe1wiZm9jdXNcIj09PWE/KE5jKCksSGM9YixJYz1jLEhjLmF0dGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLE9jKSk6XCJibHVyXCI9PT1hJiZOYygpfWZ1bmN0aW9uIFFjKGEpe2lmKFwic2VsZWN0aW9uY2hhbmdlXCI9PT1hfHxcImtleXVwXCI9PT1hfHxcImtleWRvd25cIj09PWEpcmV0dXJuIEtjKEljKX1cbmZ1bmN0aW9uIFJjKGEsYil7aWYoXCJjbGlja1wiPT09YSlyZXR1cm4gS2MoYil9ZnVuY3Rpb24gU2MoYSxiKXtpZihcImlucHV0XCI9PT1hfHxcImNoYW5nZVwiPT09YSlyZXR1cm4gS2MoYil9XG52YXIgVGM9e2V2ZW50VHlwZXM6RmMsX2lzSW5wdXRFdmVudFN1cHBvcnRlZDpNYyxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWI/TGEoYik6d2luZG93LGY9dm9pZCAwLGc9dm9pZCAwLGg9ZS5ub2RlTmFtZSYmZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1wic2VsZWN0XCI9PT1ofHxcImlucHV0XCI9PT1oJiZcImZpbGVcIj09PWUudHlwZT9mPUxjOlBiKGUpP01jP2Y9U2M6KGY9UWMsZz1QYyk6KGg9ZS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWgudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWUudHlwZXx8XCJyYWRpb1wiPT09ZS50eXBlKSYmKGY9UmMpO2lmKGYmJihmPWYoYSxiKSkpcmV0dXJuIEdjKGYsYyxkKTtnJiZnKGEsZSxiKTtcImJsdXJcIj09PWEmJihhPWUuX3dyYXBwZXJTdGF0ZSkmJmEuY29udHJvbGxlZCYmXCJudW1iZXJcIj09PWUudHlwZSYmRGMoZSxcIm51bWJlclwiLGUudmFsdWUpfX0sVWM9QS5leHRlbmQoe3ZpZXc6bnVsbCxkZXRhaWw6bnVsbH0pLFZjPXtBbHQ6XCJhbHRLZXlcIixcbkNvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIFdjKGEpe3ZhciBiPXRoaXMubmF0aXZlRXZlbnQ7cmV0dXJuIGIuZ2V0TW9kaWZpZXJTdGF0ZT9iLmdldE1vZGlmaWVyU3RhdGUoYSk6KGE9VmNbYV0pPyEhYlthXTohMX1mdW5jdGlvbiBYYygpe3JldHVybiBXY31cbnZhciBZYz0wLFpjPTAsJGM9ITEsYWQ9ITEsYmQ9VWMuZXh0ZW5kKHtzY3JlZW5YOm51bGwsc2NyZWVuWTpudWxsLGNsaWVudFg6bnVsbCxjbGllbnRZOm51bGwscGFnZVg6bnVsbCxwYWdlWTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxnZXRNb2RpZmllclN0YXRlOlhjLGJ1dHRvbjpudWxsLGJ1dHRvbnM6bnVsbCxyZWxhdGVkVGFyZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiBhLnJlbGF0ZWRUYXJnZXR8fChhLmZyb21FbGVtZW50PT09YS5zcmNFbGVtZW50P2EudG9FbGVtZW50OmEuZnJvbUVsZW1lbnQpfSxtb3ZlbWVudFg6ZnVuY3Rpb24oYSl7aWYoXCJtb3ZlbWVudFhcImluIGEpcmV0dXJuIGEubW92ZW1lbnRYO3ZhciBiPVljO1ljPWEuc2NyZWVuWDtyZXR1cm4gJGM/XCJtb3VzZW1vdmVcIj09PWEudHlwZT9hLnNjcmVlblgtYjowOigkYz0hMCwwKX0sbW92ZW1lbnRZOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRZXCJpbiBhKXJldHVybiBhLm1vdmVtZW50WTtcbnZhciBiPVpjO1pjPWEuc2NyZWVuWTtyZXR1cm4gYWQ/XCJtb3VzZW1vdmVcIj09PWEudHlwZT9hLnNjcmVlblktYjowOihhZD0hMCwwKX19KSxjZD1iZC5leHRlbmQoe3BvaW50ZXJJZDpudWxsLHdpZHRoOm51bGwsaGVpZ2h0Om51bGwscHJlc3N1cmU6bnVsbCx0YW5nZW50aWFsUHJlc3N1cmU6bnVsbCx0aWx0WDpudWxsLHRpbHRZOm51bGwsdHdpc3Q6bnVsbCxwb2ludGVyVHlwZTpudWxsLGlzUHJpbWFyeTpudWxsfSksZGQ9e21vdXNlRW50ZXI6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlRW50ZXJcIixkZXBlbmRlbmNpZXM6W1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXX0sbW91c2VMZWF2ZTp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uTW91c2VMZWF2ZVwiLGRlcGVuZGVuY2llczpbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdfSxwb2ludGVyRW50ZXI6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvblBvaW50ZXJFbnRlclwiLGRlcGVuZGVuY2llczpbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXX0scG9pbnRlckxlYXZlOntyZWdpc3RyYXRpb25OYW1lOlwib25Qb2ludGVyTGVhdmVcIixcbmRlcGVuZGVuY2llczpbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXX19LGVkPXtldmVudFR5cGVzOmRkLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9XCJtb3VzZW92ZXJcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEsZj1cIm1vdXNlb3V0XCI9PT1hfHxcInBvaW50ZXJvdXRcIj09PWE7aWYoZSYmKGMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCl8fCFmJiYhZSlyZXR1cm4gbnVsbDtlPWQud2luZG93PT09ZD9kOihlPWQub3duZXJEb2N1bWVudCk/ZS5kZWZhdWx0Vmlld3x8ZS5wYXJlbnRXaW5kb3c6d2luZG93O2Y/KGY9YixiPShiPWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQpP0phKGIpOm51bGwpOmY9bnVsbDtpZihmPT09YilyZXR1cm4gbnVsbDt2YXIgZz12b2lkIDAsaD12b2lkIDAsbD12b2lkIDAsaz12b2lkIDA7aWYoXCJtb3VzZW91dFwiPT09YXx8XCJtb3VzZW92ZXJcIj09PWEpZz1iZCxoPWRkLm1vdXNlTGVhdmUsbD1kZC5tb3VzZUVudGVyLGs9XCJtb3VzZVwiO1xuZWxzZSBpZihcInBvaW50ZXJvdXRcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEpZz1jZCxoPWRkLnBvaW50ZXJMZWF2ZSxsPWRkLnBvaW50ZXJFbnRlcixrPVwicG9pbnRlclwiO3ZhciBtPW51bGw9PWY/ZTpMYShmKTtlPW51bGw9PWI/ZTpMYShiKTthPWcuZ2V0UG9vbGVkKGgsZixjLGQpO2EudHlwZT1rK1wibGVhdmVcIjthLnRhcmdldD1tO2EucmVsYXRlZFRhcmdldD1lO2M9Zy5nZXRQb29sZWQobCxiLGMsZCk7Yy50eXBlPWsrXCJlbnRlclwiO2MudGFyZ2V0PWU7Yy5yZWxhdGVkVGFyZ2V0PW07ZD1iO2lmKGYmJmQpYTp7Yj1mO2U9ZDtrPTA7Zm9yKGc9YjtnO2c9TmEoZykpaysrO2c9MDtmb3IobD1lO2w7bD1OYShsKSlnKys7Zm9yKDswPGstZzspYj1OYShiKSxrLS07Zm9yKDswPGctazspZT1OYShlKSxnLS07Zm9yKDtrLS07KXtpZihiPT09ZXx8Yj09PWUuYWx0ZXJuYXRlKWJyZWFrIGE7Yj1OYShiKTtlPU5hKGUpfWI9bnVsbH1lbHNlIGI9bnVsbDtlPWI7Zm9yKGI9W107ZiYmZiE9PWU7KXtrPVxuZi5hbHRlcm5hdGU7aWYobnVsbCE9PWsmJms9PT1lKWJyZWFrO2IucHVzaChmKTtmPU5hKGYpfWZvcihmPVtdO2QmJmQhPT1lOyl7az1kLmFsdGVybmF0ZTtpZihudWxsIT09ayYmaz09PWUpYnJlYWs7Zi5wdXNoKGQpO2Q9TmEoZCl9Zm9yKGQ9MDtkPGIubGVuZ3RoO2QrKylRYShiW2RdLFwiYnViYmxlZFwiLGEpO2ZvcihkPWYubGVuZ3RoOzA8ZC0tOylRYShmW2RdLFwiY2FwdHVyZWRcIixjKTtyZXR1cm5bYSxjXX19O2Z1bmN0aW9uIGZkKGEsYil7cmV0dXJuIGE9PT1iJiYoMCE9PWF8fDEvYT09PTEvYil8fGEhPT1hJiZiIT09Yn12YXIgZ2Q9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbmZ1bmN0aW9uIGhkKGEsYil7aWYoZmQoYSxiKSlyZXR1cm4hMDtpZihcIm9iamVjdFwiIT09dHlwZW9mIGF8fG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGJ8fG51bGw9PT1iKXJldHVybiExO3ZhciBjPU9iamVjdC5rZXlzKGEpLGQ9T2JqZWN0LmtleXMoYik7aWYoYy5sZW5ndGghPT1kLmxlbmd0aClyZXR1cm4hMTtmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCsrKWlmKCFnZC5jYWxsKGIsY1tkXSl8fCFmZChhW2NbZF1dLGJbY1tkXV0pKXJldHVybiExO3JldHVybiEwfWZ1bmN0aW9uIGtkKGEpe3ZhciBiPWE7aWYoYS5hbHRlcm5hdGUpZm9yKDtiLnJldHVybjspYj1iLnJldHVybjtlbHNle2lmKDAhPT0oYi5lZmZlY3RUYWcmMikpcmV0dXJuIDE7Zm9yKDtiLnJldHVybjspaWYoYj1iLnJldHVybiwwIT09KGIuZWZmZWN0VGFnJjIpKXJldHVybiAxfXJldHVybiAzPT09Yi50YWc/MjozfWZ1bmN0aW9uIGxkKGEpezIhPT1rZChhKT90KFwiMTg4XCIpOnZvaWQgMH1cbmZ1bmN0aW9uIG1kKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2lmKCFiKXJldHVybiBiPWtkKGEpLDM9PT1iP3QoXCIxODhcIik6dm9pZCAwLDE9PT1iP251bGw6YTtmb3IodmFyIGM9YSxkPWI7Oyl7dmFyIGU9Yy5yZXR1cm4sZj1lP2UuYWx0ZXJuYXRlOm51bGw7aWYoIWV8fCFmKWJyZWFrO2lmKGUuY2hpbGQ9PT1mLmNoaWxkKXtmb3IodmFyIGc9ZS5jaGlsZDtnOyl7aWYoZz09PWMpcmV0dXJuIGxkKGUpLGE7aWYoZz09PWQpcmV0dXJuIGxkKGUpLGI7Zz1nLnNpYmxpbmd9dChcIjE4OFwiKX1pZihjLnJldHVybiE9PWQucmV0dXJuKWM9ZSxkPWY7ZWxzZXtnPSExO2Zvcih2YXIgaD1lLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWU7ZD1mO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZTtjPWY7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpe2ZvcihoPWYuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZjtkPWU7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1mO2M9ZTticmVha31oPWguc2libGluZ31nP1xudm9pZCAwOnQoXCIxODlcIil9fWMuYWx0ZXJuYXRlIT09ZD90KFwiMTkwXCIpOnZvaWQgMH0zIT09Yy50YWc/dChcIjE4OFwiKTp2b2lkIDA7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBuZChhKXthPW1kKGEpO2lmKCFhKXJldHVybiBudWxsO2Zvcih2YXIgYj1hOzspe2lmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXJldHVybiBiO2lmKGIuY2hpbGQpYi5jaGlsZC5yZXR1cm49YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfVxudmFyIG9kPUEuZXh0ZW5kKHthbmltYXRpb25OYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSxwZD1BLmV4dGVuZCh7Y2xpcGJvYXJkRGF0YTpmdW5jdGlvbihhKXtyZXR1cm5cImNsaXBib2FyZERhdGFcImluIGE/YS5jbGlwYm9hcmREYXRhOndpbmRvdy5jbGlwYm9hcmREYXRhfX0pLHFkPVVjLmV4dGVuZCh7cmVsYXRlZFRhcmdldDpudWxsfSk7ZnVuY3Rpb24gcmQoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9XG52YXIgc2Q9e0VzYzpcIkVzY2FwZVwiLFNwYWNlYmFyOlwiIFwiLExlZnQ6XCJBcnJvd0xlZnRcIixVcDpcIkFycm93VXBcIixSaWdodDpcIkFycm93UmlnaHRcIixEb3duOlwiQXJyb3dEb3duXCIsRGVsOlwiRGVsZXRlXCIsV2luOlwiT1NcIixNZW51OlwiQ29udGV4dE1lbnVcIixBcHBzOlwiQ29udGV4dE1lbnVcIixTY3JvbGw6XCJTY3JvbGxMb2NrXCIsTW96UHJpbnRhYmxlS2V5OlwiVW5pZGVudGlmaWVkXCJ9LHRkPXs4OlwiQmFja3NwYWNlXCIsOTpcIlRhYlwiLDEyOlwiQ2xlYXJcIiwxMzpcIkVudGVyXCIsMTY6XCJTaGlmdFwiLDE3OlwiQ29udHJvbFwiLDE4OlwiQWx0XCIsMTk6XCJQYXVzZVwiLDIwOlwiQ2Fwc0xvY2tcIiwyNzpcIkVzY2FwZVwiLDMyOlwiIFwiLDMzOlwiUGFnZVVwXCIsMzQ6XCJQYWdlRG93blwiLDM1OlwiRW5kXCIsMzY6XCJIb21lXCIsMzc6XCJBcnJvd0xlZnRcIiwzODpcIkFycm93VXBcIiwzOTpcIkFycm93UmlnaHRcIiw0MDpcIkFycm93RG93blwiLDQ1OlwiSW5zZXJ0XCIsNDY6XCJEZWxldGVcIiwxMTI6XCJGMVwiLDExMzpcIkYyXCIsMTE0OlwiRjNcIiwxMTU6XCJGNFwiLFxuMTE2OlwiRjVcIiwxMTc6XCJGNlwiLDExODpcIkY3XCIsMTE5OlwiRjhcIiwxMjA6XCJGOVwiLDEyMTpcIkYxMFwiLDEyMjpcIkYxMVwiLDEyMzpcIkYxMlwiLDE0NDpcIk51bUxvY2tcIiwxNDU6XCJTY3JvbGxMb2NrXCIsMjI0OlwiTWV0YVwifSx1ZD1VYy5leHRlbmQoe2tleTpmdW5jdGlvbihhKXtpZihhLmtleSl7dmFyIGI9c2RbYS5rZXldfHxhLmtleTtpZihcIlVuaWRlbnRpZmllZFwiIT09YilyZXR1cm4gYn1yZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/KGE9cmQoYSksMTM9PT1hP1wiRW50ZXJcIjpTdHJpbmcuZnJvbUNoYXJDb2RlKGEpKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP3RkW2Eua2V5Q29kZV18fFwiVW5pZGVudGlmaWVkXCI6XCJcIn0sbG9jYXRpb246bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwscmVwZWF0Om51bGwsbG9jYWxlOm51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpYYyxjaGFyQ29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1cbmEudHlwZT9yZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9yZChhKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfX0pLHZkPWJkLmV4dGVuZCh7ZGF0YVRyYW5zZmVyOm51bGx9KSx3ZD1VYy5leHRlbmQoe3RvdWNoZXM6bnVsbCx0YXJnZXRUb3VjaGVzOm51bGwsY2hhbmdlZFRvdWNoZXM6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpYY30pLHhkPUEuZXh0ZW5kKHtwcm9wZXJ0eU5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pLHlkPWJkLmV4dGVuZCh7ZGVsdGFYOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFYXCJpbiBhP2EuZGVsdGFYOlwid2hlZWxEZWx0YVhcImluXG5hPy1hLndoZWVsRGVsdGFYOjB9LGRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjpudWxsLGRlbHRhTW9kZTpudWxsfSksemQ9W1tcImFib3J0XCIsXCJhYm9ydFwiXSxbWmEsXCJhbmltYXRpb25FbmRcIl0sWyRhLFwiYW5pbWF0aW9uSXRlcmF0aW9uXCJdLFthYixcImFuaW1hdGlvblN0YXJ0XCJdLFtcImNhbnBsYXlcIixcImNhblBsYXlcIl0sW1wiY2FucGxheXRocm91Z2hcIixcImNhblBsYXlUaHJvdWdoXCJdLFtcImRyYWdcIixcImRyYWdcIl0sW1wiZHJhZ2VudGVyXCIsXCJkcmFnRW50ZXJcIl0sW1wiZHJhZ2V4aXRcIixcImRyYWdFeGl0XCJdLFtcImRyYWdsZWF2ZVwiLFwiZHJhZ0xlYXZlXCJdLFtcImRyYWdvdmVyXCIsXCJkcmFnT3ZlclwiXSxbXCJkdXJhdGlvbmNoYW5nZVwiLFwiZHVyYXRpb25DaGFuZ2VcIl0sW1wiZW1wdGllZFwiLFwiZW1wdGllZFwiXSxbXCJlbmNyeXB0ZWRcIixcImVuY3J5cHRlZFwiXSxcbltcImVuZGVkXCIsXCJlbmRlZFwiXSxbXCJlcnJvclwiLFwiZXJyb3JcIl0sW1wiZ290cG9pbnRlcmNhcHR1cmVcIixcImdvdFBvaW50ZXJDYXB0dXJlXCJdLFtcImxvYWRcIixcImxvYWRcIl0sW1wibG9hZGVkZGF0YVwiLFwibG9hZGVkRGF0YVwiXSxbXCJsb2FkZWRtZXRhZGF0YVwiLFwibG9hZGVkTWV0YWRhdGFcIl0sW1wibG9hZHN0YXJ0XCIsXCJsb2FkU3RhcnRcIl0sW1wibG9zdHBvaW50ZXJjYXB0dXJlXCIsXCJsb3N0UG9pbnRlckNhcHR1cmVcIl0sW1wibW91c2Vtb3ZlXCIsXCJtb3VzZU1vdmVcIl0sW1wibW91c2VvdXRcIixcIm1vdXNlT3V0XCJdLFtcIm1vdXNlb3ZlclwiLFwibW91c2VPdmVyXCJdLFtcInBsYXlpbmdcIixcInBsYXlpbmdcIl0sW1wicG9pbnRlcm1vdmVcIixcInBvaW50ZXJNb3ZlXCJdLFtcInBvaW50ZXJvdXRcIixcInBvaW50ZXJPdXRcIl0sW1wicG9pbnRlcm92ZXJcIixcInBvaW50ZXJPdmVyXCJdLFtcInByb2dyZXNzXCIsXCJwcm9ncmVzc1wiXSxbXCJzY3JvbGxcIixcInNjcm9sbFwiXSxbXCJzZWVraW5nXCIsXCJzZWVraW5nXCJdLFtcInN0YWxsZWRcIixcInN0YWxsZWRcIl0sXG5bXCJzdXNwZW5kXCIsXCJzdXNwZW5kXCJdLFtcInRpbWV1cGRhdGVcIixcInRpbWVVcGRhdGVcIl0sW1widG9nZ2xlXCIsXCJ0b2dnbGVcIl0sW1widG91Y2htb3ZlXCIsXCJ0b3VjaE1vdmVcIl0sW2JiLFwidHJhbnNpdGlvbkVuZFwiXSxbXCJ3YWl0aW5nXCIsXCJ3YWl0aW5nXCJdLFtcIndoZWVsXCIsXCJ3aGVlbFwiXV0sQWQ9e30sQmQ9e307ZnVuY3Rpb24gQ2QoYSxiKXt2YXIgYz1hWzBdO2E9YVsxXTt2YXIgZD1cIm9uXCIrKGFbMF0udG9VcHBlckNhc2UoKSthLnNsaWNlKDEpKTtiPXtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpkLGNhcHR1cmVkOmQrXCJDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpbY10saXNJbnRlcmFjdGl2ZTpifTtBZFthXT1iO0JkW2NdPWJ9XG5bW1wiYmx1clwiLFwiYmx1clwiXSxbXCJjYW5jZWxcIixcImNhbmNlbFwiXSxbXCJjbGlja1wiLFwiY2xpY2tcIl0sW1wiY2xvc2VcIixcImNsb3NlXCJdLFtcImNvbnRleHRtZW51XCIsXCJjb250ZXh0TWVudVwiXSxbXCJjb3B5XCIsXCJjb3B5XCJdLFtcImN1dFwiLFwiY3V0XCJdLFtcImF1eGNsaWNrXCIsXCJhdXhDbGlja1wiXSxbXCJkYmxjbGlja1wiLFwiZG91YmxlQ2xpY2tcIl0sW1wiZHJhZ2VuZFwiLFwiZHJhZ0VuZFwiXSxbXCJkcmFnc3RhcnRcIixcImRyYWdTdGFydFwiXSxbXCJkcm9wXCIsXCJkcm9wXCJdLFtcImZvY3VzXCIsXCJmb2N1c1wiXSxbXCJpbnB1dFwiLFwiaW5wdXRcIl0sW1wiaW52YWxpZFwiLFwiaW52YWxpZFwiXSxbXCJrZXlkb3duXCIsXCJrZXlEb3duXCJdLFtcImtleXByZXNzXCIsXCJrZXlQcmVzc1wiXSxbXCJrZXl1cFwiLFwia2V5VXBcIl0sW1wibW91c2Vkb3duXCIsXCJtb3VzZURvd25cIl0sW1wibW91c2V1cFwiLFwibW91c2VVcFwiXSxbXCJwYXN0ZVwiLFwicGFzdGVcIl0sW1wicGF1c2VcIixcInBhdXNlXCJdLFtcInBsYXlcIixcInBsYXlcIl0sW1wicG9pbnRlcmNhbmNlbFwiLFwicG9pbnRlckNhbmNlbFwiXSxcbltcInBvaW50ZXJkb3duXCIsXCJwb2ludGVyRG93blwiXSxbXCJwb2ludGVydXBcIixcInBvaW50ZXJVcFwiXSxbXCJyYXRlY2hhbmdlXCIsXCJyYXRlQ2hhbmdlXCJdLFtcInJlc2V0XCIsXCJyZXNldFwiXSxbXCJzZWVrZWRcIixcInNlZWtlZFwiXSxbXCJzdWJtaXRcIixcInN1Ym1pdFwiXSxbXCJ0b3VjaGNhbmNlbFwiLFwidG91Y2hDYW5jZWxcIl0sW1widG91Y2hlbmRcIixcInRvdWNoRW5kXCJdLFtcInRvdWNoc3RhcnRcIixcInRvdWNoU3RhcnRcIl0sW1widm9sdW1lY2hhbmdlXCIsXCJ2b2x1bWVDaGFuZ2VcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7Q2QoYSwhMCl9KTt6ZC5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NkKGEsITEpfSk7XG52YXIgRGQ9e2V2ZW50VHlwZXM6QWQsaXNJbnRlcmFjdGl2ZVRvcExldmVsRXZlbnRUeXBlOmZ1bmN0aW9uKGEpe2E9QmRbYV07cmV0dXJuIHZvaWQgMCE9PWEmJiEwPT09YS5pc0ludGVyYWN0aXZlfSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPUJkW2FdO2lmKCFlKXJldHVybiBudWxsO3N3aXRjaChhKXtjYXNlIFwia2V5cHJlc3NcIjppZigwPT09cmQoYykpcmV0dXJuIG51bGw7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjphPXVkO2JyZWFrO2Nhc2UgXCJibHVyXCI6Y2FzZSBcImZvY3VzXCI6YT1xZDticmVhaztjYXNlIFwiY2xpY2tcIjppZigyPT09Yy5idXR0b24pcmV0dXJuIG51bGw7Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwiY29udGV4dG1lbnVcIjphPWJkO2JyZWFrO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOmE9XG52ZDticmVhaztjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjphPXdkO2JyZWFrO2Nhc2UgWmE6Y2FzZSAkYTpjYXNlIGFiOmE9b2Q7YnJlYWs7Y2FzZSBiYjphPXhkO2JyZWFrO2Nhc2UgXCJzY3JvbGxcIjphPVVjO2JyZWFrO2Nhc2UgXCJ3aGVlbFwiOmE9eWQ7YnJlYWs7Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcInBhc3RlXCI6YT1wZDticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVydXBcIjphPWNkO2JyZWFrO2RlZmF1bHQ6YT1BfWI9YS5nZXRQb29sZWQoZSxiLGMsZCk7U2EoYik7cmV0dXJuIGJ9fSxFZD1EZC5pc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGUsXG5GZD1bXTtmdW5jdGlvbiBHZChhKXt2YXIgYj1hLnRhcmdldEluc3QsYz1iO2Rve2lmKCFjKXthLmFuY2VzdG9ycy5wdXNoKGMpO2JyZWFrfXZhciBkO2ZvcihkPWM7ZC5yZXR1cm47KWQ9ZC5yZXR1cm47ZD0zIT09ZC50YWc/bnVsbDpkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2lmKCFkKWJyZWFrO2EuYW5jZXN0b3JzLnB1c2goYyk7Yz1KYShkKX13aGlsZShjKTtmb3IoYz0wO2M8YS5hbmNlc3RvcnMubGVuZ3RoO2MrKyl7Yj1hLmFuY2VzdG9yc1tjXTt2YXIgZT1RYihhLm5hdGl2ZUV2ZW50KTtkPWEudG9wTGV2ZWxUeXBlO2Zvcih2YXIgZj1hLm5hdGl2ZUV2ZW50LGc9bnVsbCxoPTA7aDxwYS5sZW5ndGg7aCsrKXt2YXIgbD1wYVtoXTtsJiYobD1sLmV4dHJhY3RFdmVudHMoZCxiLGYsZSkpJiYoZz16YShnLGwpKX1GYShnKX19dmFyIEhkPSEwO1xuZnVuY3Rpb24gSChhLGIpe2lmKCFiKXJldHVybiBudWxsO3ZhciBjPShFZChhKT9JZDpKZCkuYmluZChudWxsLGEpO2IuYWRkRXZlbnRMaXN0ZW5lcihhLGMsITEpfWZ1bmN0aW9uIEtkKGEsYil7aWYoIWIpcmV0dXJuIG51bGw7dmFyIGM9KEVkKGEpP0lkOkpkKS5iaW5kKG51bGwsYSk7Yi5hZGRFdmVudExpc3RlbmVyKGEsYywhMCl9ZnVuY3Rpb24gSWQoYSxiKXtLYihKZCxhLGIpfVxuZnVuY3Rpb24gSmQoYSxiKXtpZihIZCl7dmFyIGM9UWIoYik7Yz1KYShjKTtudWxsPT09Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBjLnRhZ3x8Mj09PWtkKGMpfHwoYz1udWxsKTtpZihGZC5sZW5ndGgpe3ZhciBkPUZkLnBvcCgpO2QudG9wTGV2ZWxUeXBlPWE7ZC5uYXRpdmVFdmVudD1iO2QudGFyZ2V0SW5zdD1jO2E9ZH1lbHNlIGE9e3RvcExldmVsVHlwZTphLG5hdGl2ZUV2ZW50OmIsdGFyZ2V0SW5zdDpjLGFuY2VzdG9yczpbXX07dHJ5e05iKEdkLGEpfWZpbmFsbHl7YS50b3BMZXZlbFR5cGU9bnVsbCxhLm5hdGl2ZUV2ZW50PW51bGwsYS50YXJnZXRJbnN0PW51bGwsYS5hbmNlc3RvcnMubGVuZ3RoPTAsMTA+RmQubGVuZ3RoJiZGZC5wdXNoKGEpfX19dmFyIExkPXt9LE1kPTAsTmQ9XCJfcmVhY3RMaXN0ZW5lcnNJRFwiKyhcIlwiK01hdGgucmFuZG9tKCkpLnNsaWNlKDIpO1xuZnVuY3Rpb24gT2QoYSl7T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGEsTmQpfHwoYVtOZF09TWQrKyxMZFthW05kXV09e30pO3JldHVybiBMZFthW05kXV19ZnVuY3Rpb24gUGQoYSl7YT1hfHwoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBkb2N1bWVudD9kb2N1bWVudDp2b2lkIDApO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYSlyZXR1cm4gbnVsbDt0cnl7cmV0dXJuIGEuYWN0aXZlRWxlbWVudHx8YS5ib2R5fWNhdGNoKGIpe3JldHVybiBhLmJvZHl9fWZ1bmN0aW9uIFFkKGEpe2Zvcig7YSYmYS5maXJzdENoaWxkOylhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX1cbmZ1bmN0aW9uIFJkKGEsYil7dmFyIGM9UWQoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9UWQoYyl9fWZ1bmN0aW9uIFNkKGEsYil7cmV0dXJuIGEmJmI/YT09PWI/ITA6YSYmMz09PWEubm9kZVR5cGU/ITE6YiYmMz09PWIubm9kZVR5cGU/U2QoYSxiLnBhcmVudE5vZGUpOlwiY29udGFpbnNcImluIGE/YS5jb250YWlucyhiKTphLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uPyEhKGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikmMTYpOiExOiExfVxuZnVuY3Rpb24gVGQoKXtmb3IodmFyIGE9d2luZG93LGI9UGQoKTtiIGluc3RhbmNlb2YgYS5IVE1MSUZyYW1lRWxlbWVudDspe3RyeXthPWIuY29udGVudERvY3VtZW50LmRlZmF1bHRWaWV3fWNhdGNoKGMpe2JyZWFrfWI9UGQoYS5kb2N1bWVudCl9cmV0dXJuIGJ9ZnVuY3Rpb24gVWQoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmKFwidGV4dFwiPT09YS50eXBlfHxcInNlYXJjaFwiPT09YS50eXBlfHxcInRlbFwiPT09YS50eXBlfHxcInVybFwiPT09YS50eXBlfHxcInBhc3N3b3JkXCI9PT1hLnR5cGUpfHxcInRleHRhcmVhXCI9PT1ifHxcInRydWVcIj09PWEuY29udGVudEVkaXRhYmxlKX1cbnZhciBWZD1UYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLFdkPXtzZWxlY3Q6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25TZWxlY3RcIixjYXB0dXJlZDpcIm9uU2VsZWN0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbnRleHRtZW51IGRyYWdlbmQgZm9jdXMga2V5ZG93biBrZXl1cCBtb3VzZWRvd24gbW91c2V1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIil9fSxYZD1udWxsLFlkPW51bGwsWmQ9bnVsbCwkZD0hMTtcbmZ1bmN0aW9uIGFlKGEsYil7dmFyIGM9Yi53aW5kb3c9PT1iP2IuZG9jdW1lbnQ6OT09PWIubm9kZVR5cGU/YjpiLm93bmVyRG9jdW1lbnQ7aWYoJGR8fG51bGw9PVhkfHxYZCE9PVBkKGMpKXJldHVybiBudWxsO2M9WGQ7XCJzZWxlY3Rpb25TdGFydFwiaW4gYyYmVWQoYyk/Yz17c3RhcnQ6Yy5zZWxlY3Rpb25TdGFydCxlbmQ6Yy5zZWxlY3Rpb25FbmR9OihjPShjLm93bmVyRG9jdW1lbnQmJmMub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxjPXthbmNob3JOb2RlOmMuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6Yy5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmMuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmMuZm9jdXNPZmZzZXR9KTtyZXR1cm4gWmQmJmhkKFpkLGMpP251bGw6KFpkPWMsYT1BLmdldFBvb2xlZChXZC5zZWxlY3QsWWQsYSxiKSxhLnR5cGU9XCJzZWxlY3RcIixhLnRhcmdldD1YZCxTYShhKSxhKX1cbnZhciBiZT17ZXZlbnRUeXBlczpXZCxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWQud2luZG93PT09ZD9kLmRvY3VtZW50Ojk9PT1kLm5vZGVUeXBlP2Q6ZC5vd25lckRvY3VtZW50LGY7aWYoIShmPSFlKSl7YTp7ZT1PZChlKTtmPXVhLm9uU2VsZWN0O2Zvcih2YXIgZz0wO2c8Zi5sZW5ndGg7ZysrKXt2YXIgaD1mW2ddO2lmKCFlLmhhc093blByb3BlcnR5KGgpfHwhZVtoXSl7ZT0hMTticmVhayBhfX1lPSEwfWY9IWV9aWYoZilyZXR1cm4gbnVsbDtlPWI/TGEoYik6d2luZG93O3N3aXRjaChhKXtjYXNlIFwiZm9jdXNcIjppZihQYihlKXx8XCJ0cnVlXCI9PT1lLmNvbnRlbnRFZGl0YWJsZSlYZD1lLFlkPWIsWmQ9bnVsbDticmVhaztjYXNlIFwiYmx1clwiOlpkPVlkPVhkPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlZG93blwiOiRkPSEwO2JyZWFrO2Nhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcImRyYWdlbmRcIjpyZXR1cm4gJGQ9ITEsYWUoYyxkKTtjYXNlIFwic2VsZWN0aW9uY2hhbmdlXCI6aWYoVmQpYnJlYWs7XG5jYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOnJldHVybiBhZShjLGQpfXJldHVybiBudWxsfX07RGEuaW5qZWN0RXZlbnRQbHVnaW5PcmRlcihcIlJlc3BvbmRlckV2ZW50UGx1Z2luIFNpbXBsZUV2ZW50UGx1Z2luIEVudGVyTGVhdmVFdmVudFBsdWdpbiBDaGFuZ2VFdmVudFBsdWdpbiBTZWxlY3RFdmVudFBsdWdpbiBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luXCIuc3BsaXQoXCIgXCIpKTt2YT1NYTt3YT1LYTt4YT1MYTtEYS5pbmplY3RFdmVudFBsdWdpbnNCeU5hbWUoe1NpbXBsZUV2ZW50UGx1Z2luOkRkLEVudGVyTGVhdmVFdmVudFBsdWdpbjplZCxDaGFuZ2VFdmVudFBsdWdpbjpUYyxTZWxlY3RFdmVudFBsdWdpbjpiZSxCZWZvcmVJbnB1dEV2ZW50UGx1Z2luOkNifSk7ZnVuY3Rpb24gY2UoYSl7dmFyIGI9XCJcIjthYS5DaGlsZHJlbi5mb3JFYWNoKGEsZnVuY3Rpb24oYSl7bnVsbCE9YSYmKGIrPWEpfSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiBkZShhLGIpe2E9cCh7Y2hpbGRyZW46dm9pZCAwfSxiKTtpZihiPWNlKGIuY2hpbGRyZW4pKWEuY2hpbGRyZW49YjtyZXR1cm4gYX1mdW5jdGlvbiBlZShhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIreWMoYyk7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIGZlKGEsYil7bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTD90KFwiOTFcIik6dm9pZCAwO3JldHVybiBwKHt9LGIse3ZhbHVlOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLGNoaWxkcmVuOlwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZX0pfWZ1bmN0aW9uIGdlKGEsYil7dmFyIGM9Yi52YWx1ZTtudWxsPT1jJiYoYz1iLmRlZmF1bHRWYWx1ZSxiPWIuY2hpbGRyZW4sbnVsbCE9YiYmKG51bGwhPWM/dChcIjkyXCIpOnZvaWQgMCxBcnJheS5pc0FycmF5KGIpJiYoMT49Yi5sZW5ndGg/dm9pZCAwOnQoXCI5M1wiKSxiPWJbMF0pLGM9YiksbnVsbD09YyYmKGM9XCJcIikpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOnljKGMpfX1cbmZ1bmN0aW9uIGhlKGEsYil7dmFyIGM9eWMoYi52YWx1ZSksZD15YyhiLmRlZmF1bHRWYWx1ZSk7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmYS5kZWZhdWx0VmFsdWUhPT1jJiYoYS5kZWZhdWx0VmFsdWU9YykpO251bGwhPWQmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2QpfWZ1bmN0aW9uIGllKGEpe3ZhciBiPWEudGV4dENvbnRlbnQ7Yj09PWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUmJihhLnZhbHVlPWIpfXZhciBqZT17aHRtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIixtYXRobWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCIsc3ZnOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIn07XG5mdW5jdGlvbiBrZShhKXtzd2l0Y2goYSl7Y2FzZSBcInN2Z1wiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtjYXNlIFwibWF0aFwiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO2RlZmF1bHQ6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJ9fWZ1bmN0aW9uIGxlKGEsYil7cmV0dXJuIG51bGw9PWF8fFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9rZShiKTpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI9PT1hJiZcImZvcmVpZ25PYmplY3RcIj09PWI/XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI6YX1cbnZhciBtZT12b2lkIDAsbmU9ZnVuY3Rpb24oYSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNU0FwcCYmTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24/ZnVuY3Rpb24oYixjLGQsZSl7TVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMsZCxlKX0pfTphfShmdW5jdGlvbihhLGIpe2lmKGEubmFtZXNwYWNlVVJJIT09amUuc3ZnfHxcImlubmVySFRNTFwiaW4gYSlhLmlubmVySFRNTD1iO2Vsc2V7bWU9bWV8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7bWUuaW5uZXJIVE1MPVwiPHN2Zz5cIitiK1wiPC9zdmc+XCI7Zm9yKGI9bWUuZmlyc3RDaGlsZDthLmZpcnN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKTtmb3IoO2IuZmlyc3RDaGlsZDspYS5hcHBlbmRDaGlsZChiLmZpcnN0Q2hpbGQpfX0pO1xuZnVuY3Rpb24gb2UoYSxiKXtpZihiKXt2YXIgYz1hLmZpcnN0Q2hpbGQ7aWYoYyYmYz09PWEubGFzdENoaWxkJiYzPT09Yy5ub2RlVHlwZSl7Yy5ub2RlVmFsdWU9YjtyZXR1cm59fWEudGV4dENvbnRlbnQ9Yn1cbnZhciBwZT17YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsYm9yZGVySW1hZ2VPdXRzZXQ6ITAsYm9yZGVySW1hZ2VTbGljZTohMCxib3JkZXJJbWFnZVdpZHRoOiEwLGJveEZsZXg6ITAsYm94RmxleEdyb3VwOiEwLGJveE9yZGluYWxHcm91cDohMCxjb2x1bW5Db3VudDohMCxjb2x1bW5zOiEwLGZsZXg6ITAsZmxleEdyb3c6ITAsZmxleFBvc2l0aXZlOiEwLGZsZXhTaHJpbms6ITAsZmxleE5lZ2F0aXZlOiEwLGZsZXhPcmRlcjohMCxncmlkQXJlYTohMCxncmlkUm93OiEwLGdyaWRSb3dFbmQ6ITAsZ3JpZFJvd1NwYW46ITAsZ3JpZFJvd1N0YXJ0OiEwLGdyaWRDb2x1bW46ITAsZ3JpZENvbHVtbkVuZDohMCxncmlkQ29sdW1uU3BhbjohMCxncmlkQ29sdW1uU3RhcnQ6ITAsZm9udFdlaWdodDohMCxsaW5lQ2xhbXA6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsdGFiU2l6ZTohMCx3aWRvd3M6ITAsekluZGV4OiEwLHpvb206ITAsZmlsbE9wYWNpdHk6ITAsXG5mbG9vZE9wYWNpdHk6ITAsc3RvcE9wYWNpdHk6ITAsc3Ryb2tlRGFzaGFycmF5OiEwLHN0cm9rZURhc2hvZmZzZXQ6ITAsc3Ryb2tlTWl0ZXJsaW1pdDohMCxzdHJva2VPcGFjaXR5OiEwLHN0cm9rZVdpZHRoOiEwfSxxZT1bXCJXZWJraXRcIixcIm1zXCIsXCJNb3pcIixcIk9cIl07T2JqZWN0LmtleXMocGUpLmZvckVhY2goZnVuY3Rpb24oYSl7cWUuZm9yRWFjaChmdW5jdGlvbihiKXtiPWIrYS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSthLnN1YnN0cmluZygxKTtwZVtiXT1wZVthXX0pfSk7ZnVuY3Rpb24gcmUoYSxiLGMpe3JldHVybiBudWxsPT1ifHxcImJvb2xlYW5cIj09PXR5cGVvZiBifHxcIlwiPT09Yj9cIlwiOmN8fFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MD09PWJ8fHBlLmhhc093blByb3BlcnR5KGEpJiZwZVthXT8oXCJcIitiKS50cmltKCk6YitcInB4XCJ9XG5mdW5jdGlvbiBzZShhLGIpe2E9YS5zdHlsZTtmb3IodmFyIGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD0wPT09Yy5pbmRleE9mKFwiLS1cIiksZT1yZShjLGJbY10sZCk7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciB0ZT1wKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gdWUoYSxiKXtiJiYodGVbYV0mJihudWxsIT1iLmNoaWxkcmVufHxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MP3QoXCIxMzdcIixhLFwiXCIpOnZvaWQgMCksbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmKG51bGwhPWIuY2hpbGRyZW4/dChcIjYwXCIpOnZvaWQgMCxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJlwiX19odG1sXCJpbiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MP3ZvaWQgMDp0KFwiNjFcIikpLG51bGwhPWIuc3R5bGUmJlwib2JqZWN0XCIhPT10eXBlb2YgYi5zdHlsZT90KFwiNjJcIixcIlwiKTp2b2lkIDApfVxuZnVuY3Rpb24gdmUoYSxiKXtpZigtMT09PWEuaW5kZXhPZihcIi1cIikpcmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzO3N3aXRjaChhKXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITB9fVxuZnVuY3Rpb24gd2UoYSxiKXthPTk9PT1hLm5vZGVUeXBlfHwxMT09PWEubm9kZVR5cGU/YTphLm93bmVyRG9jdW1lbnQ7dmFyIGM9T2QoYSk7Yj11YVtiXTtmb3IodmFyIGQ9MDtkPGIubGVuZ3RoO2QrKyl7dmFyIGU9YltkXTtpZighYy5oYXNPd25Qcm9wZXJ0eShlKXx8IWNbZV0pe3N3aXRjaChlKXtjYXNlIFwic2Nyb2xsXCI6S2QoXCJzY3JvbGxcIixhKTticmVhaztjYXNlIFwiZm9jdXNcIjpjYXNlIFwiYmx1clwiOktkKFwiZm9jdXNcIixhKTtLZChcImJsdXJcIixhKTtjLmJsdXI9ITA7Yy5mb2N1cz0hMDticmVhaztjYXNlIFwiY2FuY2VsXCI6Y2FzZSBcImNsb3NlXCI6U2IoZSkmJktkKGUsYSk7YnJlYWs7Y2FzZSBcImludmFsaWRcIjpjYXNlIFwic3VibWl0XCI6Y2FzZSBcInJlc2V0XCI6YnJlYWs7ZGVmYXVsdDotMT09PWNiLmluZGV4T2YoZSkmJkgoZSxhKX1jW2VdPSEwfX19ZnVuY3Rpb24geGUoKXt9dmFyIHllPW51bGwsemU9bnVsbDtcbmZ1bmN0aW9uIEFlKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6cmV0dXJuISFiLmF1dG9Gb2N1c31yZXR1cm4hMX1mdW5jdGlvbiBCZShhLGIpe3JldHVyblwidGV4dGFyZWFcIj09PWF8fFwib3B0aW9uXCI9PT1hfHxcIm5vc2NyaXB0XCI9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwibnVtYmVyXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT09Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWx9XG52YXIgQ2U9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAsRGU9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6dm9pZCAwLEVlPWJhLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2ssRmU9YmEudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2s7XG5mdW5jdGlvbiBHZShhLGIsYyxkLGUpe2FbSWFdPWU7XCJpbnB1dFwiPT09YyYmXCJyYWRpb1wiPT09ZS50eXBlJiZudWxsIT1lLm5hbWUmJkJjKGEsZSk7dmUoYyxkKTtkPXZlKGMsZSk7Zm9yKHZhciBmPTA7ZjxiLmxlbmd0aDtmKz0yKXt2YXIgZz1iW2ZdLGg9YltmKzFdO1wic3R5bGVcIj09PWc/c2UoYSxoKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1nP25lKGEsaCk6XCJjaGlsZHJlblwiPT09Zz9vZShhLGgpOnhjKGEsZyxoLGQpfXN3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpDYyhhLGUpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmhlKGEsZSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9YS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlLGEuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWUubXVsdGlwbGUsYz1lLnZhbHVlLG51bGwhPWM/ZWUoYSwhIWUubXVsdGlwbGUsYywhMSk6YiE9PSEhZS5tdWx0aXBsZSYmKG51bGwhPWUuZGVmYXVsdFZhbHVlP2VlKGEsISFlLm11bHRpcGxlLGUuZGVmYXVsdFZhbHVlLFxuITApOmVlKGEsISFlLm11bHRpcGxlLGUubXVsdGlwbGU/W106XCJcIiwhMSkpfX1mdW5jdGlvbiBIZShhKXtmb3IoYT1hLm5leHRTaWJsaW5nO2EmJjEhPT1hLm5vZGVUeXBlJiYzIT09YS5ub2RlVHlwZTspYT1hLm5leHRTaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIEllKGEpe2ZvcihhPWEuZmlyc3RDaGlsZDthJiYxIT09YS5ub2RlVHlwZSYmMyE9PWEubm9kZVR5cGU7KWE9YS5uZXh0U2libGluZztyZXR1cm4gYX1uZXcgU2V0O3ZhciBKZT1bXSxLZT0tMTtmdW5jdGlvbiBJKGEpezA+S2V8fChhLmN1cnJlbnQ9SmVbS2VdLEplW0tlXT1udWxsLEtlLS0pfWZ1bmN0aW9uIEooYSxiKXtLZSsrO0plW0tlXT1hLmN1cnJlbnQ7YS5jdXJyZW50PWJ9dmFyIExlPXt9LEs9e2N1cnJlbnQ6TGV9LEw9e2N1cnJlbnQ6ITF9LE1lPUxlO1xuZnVuY3Rpb24gT2UoYSxiKXt2YXIgYz1hLnR5cGUuY29udGV4dFR5cGVzO2lmKCFjKXJldHVybiBMZTt2YXIgZD1hLnN0YXRlTm9kZTtpZihkJiZkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9PT1iKXJldHVybiBkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0O3ZhciBlPXt9LGY7Zm9yKGYgaW4gYyllW2ZdPWJbZl07ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWIsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1lKTtyZXR1cm4gZX1mdW5jdGlvbiBNKGEpe2E9YS5jaGlsZENvbnRleHRUeXBlcztyZXR1cm4gbnVsbCE9PWEmJnZvaWQgMCE9PWF9ZnVuY3Rpb24gUGUoYSl7SShMLGEpO0koSyxhKX1mdW5jdGlvbiBRZShhKXtJKEwsYSk7SShLLGEpfVxuZnVuY3Rpb24gUmUoYSxiLGMpe0suY3VycmVudCE9PUxlP3QoXCIxNjhcIik6dm9pZCAwO0ooSyxiLGEpO0ooTCxjLGEpfWZ1bmN0aW9uIFNlKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTthPWIuY2hpbGRDb250ZXh0VHlwZXM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuZ2V0Q2hpbGRDb250ZXh0KXJldHVybiBjO2Q9ZC5nZXRDaGlsZENvbnRleHQoKTtmb3IodmFyIGUgaW4gZCllIGluIGE/dm9pZCAwOnQoXCIxMDhcIixtYyhiKXx8XCJVbmtub3duXCIsZSk7cmV0dXJuIHAoe30sYyxkKX1mdW5jdGlvbiBUZShhKXt2YXIgYj1hLnN0YXRlTm9kZTtiPWImJmIuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fExlO01lPUsuY3VycmVudDtKKEssYixhKTtKKEwsTC5jdXJyZW50LGEpO3JldHVybiEwfVxuZnVuY3Rpb24gVWUoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2Q/dm9pZCAwOnQoXCIxNjlcIik7Yz8oYj1TZShhLGIsTWUpLGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9YixJKEwsYSksSShLLGEpLEooSyxiLGEpKTpJKEwsYSk7SihMLGMsYSl9dmFyIFZlPW51bGwsV2U9bnVsbDtmdW5jdGlvbiBYZShhKXtyZXR1cm4gZnVuY3Rpb24oYil7dHJ5e3JldHVybiBhKGIpfWNhdGNoKGMpe319fVxuZnVuY3Rpb24gWWUoYSl7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pcmV0dXJuITE7dmFyIGI9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKGIuaXNEaXNhYmxlZHx8IWIuc3VwcG9ydHNGaWJlcilyZXR1cm4hMDt0cnl7dmFyIGM9Yi5pbmplY3QoYSk7VmU9WGUoZnVuY3Rpb24oYSl7cmV0dXJuIGIub25Db21taXRGaWJlclJvb3QoYyxhKX0pO1dlPVhlKGZ1bmN0aW9uKGEpe3JldHVybiBiLm9uQ29tbWl0RmliZXJVbm1vdW50KGMsYSl9KX1jYXRjaChkKXt9cmV0dXJuITB9XG5mdW5jdGlvbiBaZShhLGIsYyxkKXt0aGlzLnRhZz1hO3RoaXMua2V5PWM7dGhpcy5zaWJsaW5nPXRoaXMuY2hpbGQ9dGhpcy5yZXR1cm49dGhpcy5zdGF0ZU5vZGU9dGhpcy50eXBlPXRoaXMuZWxlbWVudFR5cGU9bnVsbDt0aGlzLmluZGV4PTA7dGhpcy5yZWY9bnVsbDt0aGlzLnBlbmRpbmdQcm9wcz1iO3RoaXMuY29udGV4dERlcGVuZGVuY2llcz10aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9bnVsbDt0aGlzLm1vZGU9ZDt0aGlzLmVmZmVjdFRhZz0wO3RoaXMubGFzdEVmZmVjdD10aGlzLmZpcnN0RWZmZWN0PXRoaXMubmV4dEVmZmVjdD1udWxsO3RoaXMuY2hpbGRFeHBpcmF0aW9uVGltZT10aGlzLmV4cGlyYXRpb25UaW1lPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1mdW5jdGlvbiBOKGEsYixjLGQpe3JldHVybiBuZXcgWmUoYSxiLGMsZCl9XG5mdW5jdGlvbiAkZShhKXthPWEucHJvdG90eXBlO3JldHVybiEoIWF8fCFhLmlzUmVhY3RDb21wb25lbnQpfWZ1bmN0aW9uIGFmKGEpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiAkZShhKT8xOjA7aWYodm9pZCAwIT09YSYmbnVsbCE9PWEpe2E9YS4kJHR5cGVvZjtpZihhPT09Z2MpcmV0dXJuIDExO2lmKGE9PT1pYylyZXR1cm4gMTR9cmV0dXJuIDJ9XG5mdW5jdGlvbiBiZihhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGw9PT1jPyhjPU4oYS50YWcsYixhLmtleSxhLm1vZGUpLGMuZWxlbWVudFR5cGU9YS5lbGVtZW50VHlwZSxjLnR5cGU9YS50eXBlLGMuc3RhdGVOb2RlPWEuc3RhdGVOb2RlLGMuYWx0ZXJuYXRlPWEsYS5hbHRlcm5hdGU9Yyk6KGMucGVuZGluZ1Byb3BzPWIsYy5lZmZlY3RUYWc9MCxjLm5leHRFZmZlY3Q9bnVsbCxjLmZpcnN0RWZmZWN0PW51bGwsYy5sYXN0RWZmZWN0PW51bGwpO2MuY2hpbGRFeHBpcmF0aW9uVGltZT1hLmNoaWxkRXhwaXJhdGlvblRpbWU7Yy5leHBpcmF0aW9uVGltZT1hLmV4cGlyYXRpb25UaW1lO2MuY2hpbGQ9YS5jaGlsZDtjLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2MubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7Yy51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2MuY29udGV4dERlcGVuZGVuY2llcz1hLmNvbnRleHREZXBlbmRlbmNpZXM7Yy5zaWJsaW5nPWEuc2libGluZztcbmMuaW5kZXg9YS5pbmRleDtjLnJlZj1hLnJlZjtyZXR1cm4gY31cbmZ1bmN0aW9uIGNmKGEsYixjLGQsZSxmKXt2YXIgZz0yO2Q9YTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSkkZShhKSYmKGc9MSk7ZWxzZSBpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpZz01O2Vsc2UgYTpzd2l0Y2goYSl7Y2FzZSBhYzpyZXR1cm4gZGYoYy5jaGlsZHJlbixlLGYsYik7Y2FzZSBmYzpyZXR1cm4gZWYoYyxlfDMsZixiKTtjYXNlIGJjOnJldHVybiBlZihjLGV8MixmLGIpO2Nhc2UgY2M6cmV0dXJuIGE9TigxMixjLGIsZXw0KSxhLmVsZW1lbnRUeXBlPWNjLGEudHlwZT1jYyxhLmV4cGlyYXRpb25UaW1lPWYsYTtjYXNlIGhjOnJldHVybiBhPU4oMTMsYyxiLGUpLGEuZWxlbWVudFR5cGU9aGMsYS50eXBlPWhjLGEuZXhwaXJhdGlvblRpbWU9ZixhO2RlZmF1bHQ6aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBkYzpnPTEwO2JyZWFrIGE7Y2FzZSBlYzpnPTk7YnJlYWsgYTtjYXNlIGdjOmc9MTE7YnJlYWsgYTtjYXNlIGljOmc9XG4xNDticmVhayBhO2Nhc2UgamM6Zz0xNjtkPW51bGw7YnJlYWsgYX10KFwiMTMwXCIsbnVsbD09YT9hOnR5cGVvZiBhLFwiXCIpfWI9TihnLGMsYixlKTtiLmVsZW1lbnRUeXBlPWE7Yi50eXBlPWQ7Yi5leHBpcmF0aW9uVGltZT1mO3JldHVybiBifWZ1bmN0aW9uIGRmKGEsYixjLGQpe2E9Tig3LGEsZCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9ZnVuY3Rpb24gZWYoYSxiLGMsZCl7YT1OKDgsYSxkLGIpO2I9MD09PShiJjEpP2JjOmZjO2EuZWxlbWVudFR5cGU9YjthLnR5cGU9YjthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9ZnVuY3Rpb24gZmYoYSxiLGMpe2E9Tig2LGEsbnVsbCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9XG5mdW5jdGlvbiBnZihhLGIsYyl7Yj1OKDQsbnVsbCE9PWEuY2hpbGRyZW4/YS5jaGlsZHJlbjpbXSxhLmtleSxiKTtiLmV4cGlyYXRpb25UaW1lPWM7Yi5zdGF0ZU5vZGU9e2NvbnRhaW5lckluZm86YS5jb250YWluZXJJbmZvLHBlbmRpbmdDaGlsZHJlbjpudWxsLGltcGxlbWVudGF0aW9uOmEuaW1wbGVtZW50YXRpb259O3JldHVybiBifWZ1bmN0aW9uIGhmKGEsYil7YS5kaWRFcnJvcj0hMTt2YXIgYz1hLmVhcmxpZXN0UGVuZGluZ1RpbWU7MD09PWM/YS5lYXJsaWVzdFBlbmRpbmdUaW1lPWEubGF0ZXN0UGVuZGluZ1RpbWU9YjpjPGI/YS5lYXJsaWVzdFBlbmRpbmdUaW1lPWI6YS5sYXRlc3RQZW5kaW5nVGltZT5iJiYoYS5sYXRlc3RQZW5kaW5nVGltZT1iKTtqZihiLGEpfVxuZnVuY3Rpb24ga2YoYSxiKXthLmRpZEVycm9yPSExO2EubGF0ZXN0UGluZ2VkVGltZT49YiYmKGEubGF0ZXN0UGluZ2VkVGltZT0wKTt2YXIgYz1hLmVhcmxpZXN0UGVuZGluZ1RpbWUsZD1hLmxhdGVzdFBlbmRpbmdUaW1lO2M9PT1iP2EuZWFybGllc3RQZW5kaW5nVGltZT1kPT09Yj9hLmxhdGVzdFBlbmRpbmdUaW1lPTA6ZDpkPT09YiYmKGEubGF0ZXN0UGVuZGluZ1RpbWU9Yyk7Yz1hLmVhcmxpZXN0U3VzcGVuZGVkVGltZTtkPWEubGF0ZXN0U3VzcGVuZGVkVGltZTswPT09Yz9hLmVhcmxpZXN0U3VzcGVuZGVkVGltZT1hLmxhdGVzdFN1c3BlbmRlZFRpbWU9YjpjPGI/YS5lYXJsaWVzdFN1c3BlbmRlZFRpbWU9YjpkPmImJihhLmxhdGVzdFN1c3BlbmRlZFRpbWU9Yik7amYoYixhKX1mdW5jdGlvbiBsZihhLGIpe3ZhciBjPWEuZWFybGllc3RQZW5kaW5nVGltZTthPWEuZWFybGllc3RTdXNwZW5kZWRUaW1lO2M+YiYmKGI9Yyk7YT5iJiYoYj1hKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGpmKGEsYil7dmFyIGM9Yi5lYXJsaWVzdFN1c3BlbmRlZFRpbWUsZD1iLmxhdGVzdFN1c3BlbmRlZFRpbWUsZT1iLmVhcmxpZXN0UGVuZGluZ1RpbWUsZj1iLmxhdGVzdFBpbmdlZFRpbWU7ZT0wIT09ZT9lOmY7MD09PWUmJigwPT09YXx8ZDxhKSYmKGU9ZCk7YT1lOzAhPT1hJiZjPmEmJihhPWMpO2IubmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT249ZTtiLmV4cGlyYXRpb25UaW1lPWF9ZnVuY3Rpb24gUChhLGIpe2lmKGEmJmEuZGVmYXVsdFByb3BzKXtiPXAoe30sYik7YT1hLmRlZmF1bHRQcm9wcztmb3IodmFyIGMgaW4gYSl2b2lkIDA9PT1iW2NdJiYoYltjXT1hW2NdKX1yZXR1cm4gYn1cbmZ1bmN0aW9uIG1mKGEpe3ZhciBiPWEuX3Jlc3VsdDtzd2l0Y2goYS5fc3RhdHVzKXtjYXNlIDE6cmV0dXJuIGI7Y2FzZSAyOnRocm93IGI7Y2FzZSAwOnRocm93IGI7ZGVmYXVsdDphLl9zdGF0dXM9MDtiPWEuX2N0b3I7Yj1iKCk7Yi50aGVuKGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihiPWIuZGVmYXVsdCxhLl9zdGF0dXM9MSxhLl9yZXN1bHQ9Yil9LGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihhLl9zdGF0dXM9MixhLl9yZXN1bHQ9Yil9KTtzd2l0Y2goYS5fc3RhdHVzKXtjYXNlIDE6cmV0dXJuIGEuX3Jlc3VsdDtjYXNlIDI6dGhyb3cgYS5fcmVzdWx0O31hLl9yZXN1bHQ9Yjt0aHJvdyBiO319dmFyIG5mPShuZXcgYWEuQ29tcG9uZW50KS5yZWZzO1xuZnVuY3Rpb24gb2YoYSxiLGMsZCl7Yj1hLm1lbW9pemVkU3RhdGU7Yz1jKGQsYik7Yz1udWxsPT09Y3x8dm9pZCAwPT09Yz9iOnAoe30sYixjKTthLm1lbW9pemVkU3RhdGU9YztkPWEudXBkYXRlUXVldWU7bnVsbCE9PWQmJjA9PT1hLmV4cGlyYXRpb25UaW1lJiYoZC5iYXNlU3RhdGU9Yyl9XG52YXIgeGY9e2lzTW91bnRlZDpmdW5jdGlvbihhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFsRmliZXIpPzI9PT1rZChhKTohMX0sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgZD1wZigpO2Q9cWYoZCxhKTt2YXIgZT1yZihkKTtlLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGUuY2FsbGJhY2s9Yyk7c2YoKTt0ZihhLGUpO3VmKGEsZCl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBkPXBmKCk7ZD1xZihkLGEpO3ZhciBlPXJmKGQpO2UudGFnPXZmO2UucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZS5jYWxsYmFjaz1jKTtzZigpO3RmKGEsZSk7dWYoYSxkKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsYil7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGM9cGYoKTtjPXFmKGMsYSk7dmFyIGQ9cmYoYyk7ZC50YWc9XG53Zjt2b2lkIDAhPT1iJiZudWxsIT09YiYmKGQuY2FsbGJhY2s9Yik7c2YoKTt0ZihhLGQpO3VmKGEsYyl9fTtmdW5jdGlvbiB5ZihhLGIsYyxkLGUsZixnKXthPWEuc3RhdGVOb2RlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnNob3VsZENvbXBvbmVudFVwZGF0ZT9hLnNob3VsZENvbXBvbmVudFVwZGF0ZShkLGYsZyk6Yi5wcm90b3R5cGUmJmIucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFoZChjLGQpfHwhaGQoZSxmKTohMH1cbmZ1bmN0aW9uIHpmKGEsYixjKXt2YXIgZD0hMSxlPUxlO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9mPUFmKGYpOihlPU0oYik/TWU6Sy5jdXJyZW50LGQ9Yi5jb250ZXh0VHlwZXMsZj0oZD1udWxsIT09ZCYmdm9pZCAwIT09ZCk/T2UoYSxlKTpMZSk7Yj1uZXcgYihjLGYpO2EubWVtb2l6ZWRTdGF0ZT1udWxsIT09Yi5zdGF0ZSYmdm9pZCAwIT09Yi5zdGF0ZT9iLnN0YXRlOm51bGw7Yi51cGRhdGVyPXhmO2Euc3RhdGVOb2RlPWI7Yi5fcmVhY3RJbnRlcm5hbEZpYmVyPWE7ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1mKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIEJmKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO2Iuc3RhdGUhPT1hJiZ4Zi5lbnF1ZXVlUmVwbGFjZVN0YXRlKGIsYi5zdGF0ZSxudWxsKX1cbmZ1bmN0aW9uIENmKGEsYixjLGQpe3ZhciBlPWEuc3RhdGVOb2RlO2UucHJvcHM9YztlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtlLnJlZnM9bmY7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2UuY29udGV4dD1BZihmKTooZj1NKGIpP01lOksuY3VycmVudCxlLmNvbnRleHQ9T2UoYSxmKSk7Zj1hLnVwZGF0ZVF1ZXVlO251bGwhPT1mJiYoRGYoYSxmLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7Zj1iLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmKG9mKGEsYixmLGMpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT1cbnR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudHx8KGI9ZS5zdGF0ZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnQmJmUuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksYiE9PWUuc3RhdGUmJnhmLmVucXVldWVSZXBsYWNlU3RhdGUoZSxlLnN0YXRlLG51bGwpLGY9YS51cGRhdGVRdWV1ZSxudWxsIT09ZiYmKERmKGEsZixjLGUsZCksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnREaWRNb3VudCYmKGEuZWZmZWN0VGFnfD00KX12YXIgRWY9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIEZmKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjt2YXIgZD12b2lkIDA7YyYmKDEhPT1jLnRhZz90KFwiMzA5XCIpOnZvaWQgMCxkPWMuc3RhdGVOb2RlKTtkP3ZvaWQgMDp0KFwiMTQ3XCIsYSk7dmFyIGU9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWUpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZC5yZWZzO2I9PT1uZiYmKGI9ZC5yZWZzPXt9KTtudWxsPT09YT9kZWxldGUgYltlXTpiW2VdPWF9O2IuX3N0cmluZ1JlZj1lO3JldHVybiBifVwic3RyaW5nXCIhPT10eXBlb2YgYT90KFwiMjg0XCIpOnZvaWQgMDtjLl9vd25lcj92b2lkIDA6dChcIjI5MFwiLGEpfXJldHVybiBhfVxuZnVuY3Rpb24gR2YoYSxiKXtcInRleHRhcmVhXCIhPT1hLnR5cGUmJnQoXCIzMVwiLFwiW29iamVjdCBPYmplY3RdXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYik/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhiKS5qb2luKFwiLCBcIikrXCJ9XCI6YixcIlwiKX1cbmZ1bmN0aW9uIEhmKGEpe2Z1bmN0aW9uIGIoYixjKXtpZihhKXt2YXIgZD1iLmxhc3RFZmZlY3Q7bnVsbCE9PWQ/KGQubmV4dEVmZmVjdD1jLGIubGFzdEVmZmVjdD1jKTpiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1jO2MubmV4dEVmZmVjdD1udWxsO2MuZWZmZWN0VGFnPTh9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiLGMpe2E9YmYoYSxiLGMpO2EuaW5kZXg9MDthLnNpYmxpbmc9bnVsbDtyZXR1cm4gYX1mdW5jdGlvbiBmKGIsYyxkKXtiLmluZGV4PWQ7aWYoIWEpcmV0dXJuIGM7ZD1iLmFsdGVybmF0ZTtpZihudWxsIT09ZClyZXR1cm4gZD1kLmluZGV4LGQ8Yz8oYi5lZmZlY3RUYWc9XG4yLGMpOmQ7Yi5lZmZlY3RUYWc9MjtyZXR1cm4gY31mdW5jdGlvbiBnKGIpe2EmJm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZWZmZWN0VGFnPTIpO3JldHVybiBifWZ1bmN0aW9uIGgoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDYhPT1iLnRhZylyZXR1cm4gYj1mZihjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYyxkKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIGwoYSxiLGMsZCl7aWYobnVsbCE9PWImJmIuZWxlbWVudFR5cGU9PT1jLnR5cGUpcmV0dXJuIGQ9ZShiLGMucHJvcHMsZCksZC5yZWY9RmYoYSxiLGMpLGQucmV0dXJuPWEsZDtkPWNmKGMudHlwZSxjLmtleSxjLnByb3BzLG51bGwsYS5tb2RlLGQpO2QucmVmPUZmKGEsYixjKTtkLnJldHVybj1hO3JldHVybiBkfWZ1bmN0aW9uIGsoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDQhPT1iLnRhZ3x8Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyE9PWMuY29udGFpbmVySW5mb3x8Yi5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24hPT1cbmMuaW1wbGVtZW50YXRpb24pcmV0dXJuIGI9Z2YoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMuY2hpbGRyZW58fFtdLGQpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbShhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHw3IT09Yi50YWcpcmV0dXJuIGI9ZGYoYyxhLm1vZGUsZCxmKSxiLnJldHVybj1hLGI7Yj1lKGIsYyxkKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIHEoYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYnx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPWZmKFwiXCIrYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIFpiOnJldHVybiBjPWNmKGIudHlwZSxiLmtleSxiLnByb3BzLG51bGwsYS5tb2RlLGMpLGMucmVmPUZmKGEsbnVsbCxiKSxjLnJldHVybj1hLGM7Y2FzZSAkYjpyZXR1cm4gYj1nZihiLGEubW9kZSxjKSxiLnJldHVybj1hLGJ9aWYoRWYoYil8fFxubGMoYikpcmV0dXJuIGI9ZGYoYixhLm1vZGUsYyxudWxsKSxiLnJldHVybj1hLGI7R2YoYSxiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB4KGEsYixjLGQpe3ZhciBlPW51bGwhPT1iP2Iua2V5Om51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6aChhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIFpiOnJldHVybiBjLmtleT09PWU/Yy50eXBlPT09YWM/bShhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGUpOmwoYSxiLGMsZCk6bnVsbDtjYXNlICRiOnJldHVybiBjLmtleT09PWU/ayhhLGIsYyxkKTpudWxsfWlmKEVmKGMpfHxsYyhjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDptKGEsYixjLGQsbnVsbCk7R2YoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBDKGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkfHxcIm51bWJlclwiPT09dHlwZW9mIGQpcmV0dXJuIGE9XG5hLmdldChjKXx8bnVsbCxoKGIsYSxcIlwiK2QsZSk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2UgWmI6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGQudHlwZT09PWFjP20oYixhLGQucHJvcHMuY2hpbGRyZW4sZSxkLmtleSk6bChiLGEsZCxlKTtjYXNlICRiOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxrKGIsYSxkLGUpfWlmKEVmKGQpfHxsYyhkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxtKGIsYSxkLGUsbnVsbCk7R2YoYixkKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB3KGUsZyxoLGspe2Zvcih2YXIgbD1udWxsLG09bnVsbCxuPWcsdT1nPTAscj1udWxsO251bGwhPT1uJiZ1PGgubGVuZ3RoO3UrKyl7bi5pbmRleD51PyhyPW4sbj1udWxsKTpyPW4uc2libGluZzt2YXIgdj14KGUsbixoW3VdLGspO2lmKG51bGw9PT12KXtudWxsPT09biYmKG49cik7YnJlYWt9YSYmXG5uJiZudWxsPT09di5hbHRlcm5hdGUmJmIoZSxuKTtnPWYodixnLHUpO251bGw9PT1tP2w9djptLnNpYmxpbmc9djttPXY7bj1yfWlmKHU9PT1oLmxlbmd0aClyZXR1cm4gYyhlLG4pLGw7aWYobnVsbD09PW4pe2Zvcig7dTxoLmxlbmd0aDt1KyspaWYobj1xKGUsaFt1XSxrKSlnPWYobixnLHUpLG51bGw9PT1tP2w9bjptLnNpYmxpbmc9bixtPW47cmV0dXJuIGx9Zm9yKG49ZChlLG4pO3U8aC5sZW5ndGg7dSsrKWlmKHI9QyhuLGUsdSxoW3VdLGspKWEmJm51bGwhPT1yLmFsdGVybmF0ZSYmbi5kZWxldGUobnVsbD09PXIua2V5P3U6ci5rZXkpLGc9ZihyLGcsdSksbnVsbD09PW0/bD1yOm0uc2libGluZz1yLG09cjthJiZuLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfWZ1bmN0aW9uIEUoZSxnLGgsayl7dmFyIGw9bGMoaCk7XCJmdW5jdGlvblwiIT09dHlwZW9mIGw/dChcIjE1MFwiKTp2b2lkIDA7aD1sLmNhbGwoaCk7bnVsbD09aD90KFwiMTUxXCIpOnZvaWQgMDtcbmZvcih2YXIgbT1sPW51bGwsbj1nLHU9Zz0wLHI9bnVsbCx2PWgubmV4dCgpO251bGwhPT1uJiYhdi5kb25lO3UrKyx2PWgubmV4dCgpKXtuLmluZGV4PnU/KHI9bixuPW51bGwpOnI9bi5zaWJsaW5nO3ZhciB6PXgoZSxuLHYudmFsdWUsayk7aWYobnVsbD09PXope258fChuPXIpO2JyZWFrfWEmJm4mJm51bGw9PT16LmFsdGVybmF0ZSYmYihlLG4pO2c9Zih6LGcsdSk7bnVsbD09PW0/bD16Om0uc2libGluZz16O209ejtuPXJ9aWYodi5kb25lKXJldHVybiBjKGUsbiksbDtpZihudWxsPT09bil7Zm9yKDshdi5kb25lO3UrKyx2PWgubmV4dCgpKXY9cShlLHYudmFsdWUsayksbnVsbCE9PXYmJihnPWYodixnLHUpLG51bGw9PT1tP2w9djptLnNpYmxpbmc9dixtPXYpO3JldHVybiBsfWZvcihuPWQoZSxuKTshdi5kb25lO3UrKyx2PWgubmV4dCgpKXY9QyhuLGUsdSx2LnZhbHVlLGspLG51bGwhPT12JiYoYSYmbnVsbCE9PXYuYWx0ZXJuYXRlJiZuLmRlbGV0ZShudWxsPT09di5rZXk/dTpcbnYua2V5KSxnPWYodixnLHUpLG51bGw9PT1tP2w9djptLnNpYmxpbmc9dixtPXYpO2EmJm4uZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGx9cmV0dXJuIGZ1bmN0aW9uKGEsZCxmLGgpe3ZhciBrPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PWFjJiZudWxsPT09Zi5rZXk7ayYmKGY9Zi5wcm9wcy5jaGlsZHJlbik7dmFyIGw9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZjtpZihsKXN3aXRjaChmLiQkdHlwZW9mKXtjYXNlIFpiOmE6e2w9Zi5rZXk7Zm9yKGs9ZDtudWxsIT09azspe2lmKGsua2V5PT09bClpZig3PT09ay50YWc/Zi50eXBlPT09YWM6ay5lbGVtZW50VHlwZT09PWYudHlwZSl7YyhhLGsuc2libGluZyk7ZD1lKGssZi50eXBlPT09YWM/Zi5wcm9wcy5jaGlsZHJlbjpmLnByb3BzLGgpO2QucmVmPUZmKGEsayxmKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGspO2JyZWFrfWVsc2UgYihhLGspO2s9XG5rLnNpYmxpbmd9Zi50eXBlPT09YWM/KGQ9ZGYoZi5wcm9wcy5jaGlsZHJlbixhLm1vZGUsaCxmLmtleSksZC5yZXR1cm49YSxhPWQpOihoPWNmKGYudHlwZSxmLmtleSxmLnByb3BzLG51bGwsYS5tb2RlLGgpLGgucmVmPUZmKGEsZCxmKSxoLnJldHVybj1hLGE9aCl9cmV0dXJuIGcoYSk7Y2FzZSAkYjphOntmb3Ioaz1mLmtleTtudWxsIT09ZDspe2lmKGQua2V5PT09aylpZig0PT09ZC50YWcmJmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm89PT1mLmNvbnRhaW5lckluZm8mJmQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uPT09Zi5pbXBsZW1lbnRhdGlvbil7YyhhLGQuc2libGluZyk7ZD1lKGQsZi5jaGlsZHJlbnx8W10saCk7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPWQuc2libGluZ31kPWdmKGYsYS5tb2RlLGgpO2QucmV0dXJuPWE7YT1kfXJldHVybiBnKGEpfWlmKFwic3RyaW5nXCI9PT10eXBlb2YgZnx8XCJudW1iZXJcIj09PXR5cGVvZiBmKXJldHVybiBmPVxuXCJcIitmLG51bGwhPT1kJiY2PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYsaCksZC5yZXR1cm49YSxhPWQpOihjKGEsZCksZD1mZihmLGEubW9kZSxoKSxkLnJldHVybj1hLGE9ZCksZyhhKTtpZihFZihmKSlyZXR1cm4gdyhhLGQsZixoKTtpZihsYyhmKSlyZXR1cm4gRShhLGQsZixoKTtsJiZHZihhLGYpO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgZiYmIWspc3dpdGNoKGEudGFnKXtjYXNlIDE6Y2FzZSAwOmg9YS50eXBlLHQoXCIxNTJcIixoLmRpc3BsYXlOYW1lfHxoLm5hbWV8fFwiQ29tcG9uZW50XCIpfXJldHVybiBjKGEsZCl9fXZhciBJZj1IZighMCksSmY9SGYoITEpLEtmPXt9LExmPXtjdXJyZW50OktmfSxNZj17Y3VycmVudDpLZn0sTmY9e2N1cnJlbnQ6S2Z9O2Z1bmN0aW9uIE9mKGEpe2E9PT1LZj90KFwiMTc0XCIpOnZvaWQgMDtyZXR1cm4gYX1cbmZ1bmN0aW9uIFBmKGEsYil7SihOZixiLGEpO0ooTWYsYSxhKTtKKExmLEtmLGEpO3ZhciBjPWIubm9kZVR5cGU7c3dpdGNoKGMpe2Nhc2UgOTpjYXNlIDExOmI9KGI9Yi5kb2N1bWVudEVsZW1lbnQpP2IubmFtZXNwYWNlVVJJOmxlKG51bGwsXCJcIik7YnJlYWs7ZGVmYXVsdDpjPTg9PT1jP2IucGFyZW50Tm9kZTpiLGI9Yy5uYW1lc3BhY2VVUkl8fG51bGwsYz1jLnRhZ05hbWUsYj1sZShiLGMpfUkoTGYsYSk7SihMZixiLGEpfWZ1bmN0aW9uIFFmKGEpe0koTGYsYSk7SShNZixhKTtJKE5mLGEpfWZ1bmN0aW9uIFJmKGEpe09mKE5mLmN1cnJlbnQpO3ZhciBiPU9mKExmLmN1cnJlbnQpO3ZhciBjPWxlKGIsYS50eXBlKTtiIT09YyYmKEooTWYsYSxhKSxKKExmLGMsYSkpfWZ1bmN0aW9uIFNmKGEpe01mLmN1cnJlbnQ9PT1hJiYoSShMZixhKSxJKE1mLGEpKX1cbnZhciBUZj0wLFVmPTIsVmY9NCxXZj04LFhmPTE2LFlmPTMyLFpmPTY0LCRmPTEyOCxhZz1YYi5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGJnPTAsY2c9bnVsbCxRPW51bGwsZGc9bnVsbCxlZz1udWxsLFI9bnVsbCxmZz1udWxsLGdnPTAsaGc9bnVsbCxpZz0wLGpnPSExLGtnPW51bGwsbGc9MDtmdW5jdGlvbiBtZygpe3QoXCIzMDdcIil9ZnVuY3Rpb24gbmcoYSxiKXtpZihudWxsPT09YilyZXR1cm4hMTtmb3IodmFyIGM9MDtjPGIubGVuZ3RoJiZjPGEubGVuZ3RoO2MrKylpZighZmQoYVtjXSxiW2NdKSlyZXR1cm4hMTtyZXR1cm4hMH1cbmZ1bmN0aW9uIG9nKGEsYixjLGQsZSxmKXtiZz1mO2NnPWI7ZGc9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGw7YWcuY3VycmVudD1udWxsPT09ZGc/cGc6cWc7Yj1jKGQsZSk7aWYoamcpe2RvIGpnPSExLGxnKz0xLGRnPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsLGZnPWVnLGhnPVI9UT1udWxsLGFnLmN1cnJlbnQ9cWcsYj1jKGQsZSk7d2hpbGUoamcpO2tnPW51bGw7bGc9MH1hZy5jdXJyZW50PXJnO2E9Y2c7YS5tZW1vaXplZFN0YXRlPWVnO2EuZXhwaXJhdGlvblRpbWU9Z2c7YS51cGRhdGVRdWV1ZT1oZzthLmVmZmVjdFRhZ3w9aWc7YT1udWxsIT09USYmbnVsbCE9PVEubmV4dDtiZz0wO2ZnPVI9ZWc9ZGc9UT1jZz1udWxsO2dnPTA7aGc9bnVsbDtpZz0wO2E/dChcIjMwMFwiKTp2b2lkIDA7cmV0dXJuIGJ9XG5mdW5jdGlvbiBzZygpe2FnLmN1cnJlbnQ9cmc7Ymc9MDtmZz1SPWVnPWRnPVE9Y2c9bnVsbDtnZz0wO2hnPW51bGw7aWc9MDtqZz0hMTtrZz1udWxsO2xnPTB9ZnVuY3Rpb24gdGcoKXt2YXIgYT17bWVtb2l6ZWRTdGF0ZTpudWxsLGJhc2VTdGF0ZTpudWxsLHF1ZXVlOm51bGwsYmFzZVVwZGF0ZTpudWxsLG5leHQ6bnVsbH07bnVsbD09PVI/ZWc9Uj1hOlI9Ui5uZXh0PWE7cmV0dXJuIFJ9ZnVuY3Rpb24gdWcoKXtpZihudWxsIT09ZmcpUj1mZyxmZz1SLm5leHQsUT1kZyxkZz1udWxsIT09UT9RLm5leHQ6bnVsbDtlbHNle251bGw9PT1kZz90KFwiMzEwXCIpOnZvaWQgMDtRPWRnO3ZhciBhPXttZW1vaXplZFN0YXRlOlEubWVtb2l6ZWRTdGF0ZSxiYXNlU3RhdGU6US5iYXNlU3RhdGUscXVldWU6US5xdWV1ZSxiYXNlVXBkYXRlOlEuYmFzZVVwZGF0ZSxuZXh0Om51bGx9O1I9bnVsbD09PVI/ZWc9YTpSLm5leHQ9YTtkZz1RLm5leHR9cmV0dXJuIFJ9XG5mdW5jdGlvbiB2ZyhhLGIpe3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBiP2IoYSk6Yn1cbmZ1bmN0aW9uIHdnKGEpe3ZhciBiPXVnKCksYz1iLnF1ZXVlO251bGw9PT1jP3QoXCIzMTFcIik6dm9pZCAwO2lmKDA8bGcpe3ZhciBkPWMuZGlzcGF0Y2g7aWYobnVsbCE9PWtnKXt2YXIgZT1rZy5nZXQoYyk7aWYodm9pZCAwIT09ZSl7a2cuZGVsZXRlKGMpO3ZhciBmPWIubWVtb2l6ZWRTdGF0ZTtkbyBmPWEoZixlLmFjdGlvbiksZT1lLm5leHQ7d2hpbGUobnVsbCE9PWUpO2ZkKGYsYi5tZW1vaXplZFN0YXRlKXx8KHhnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtiLmJhc2VVcGRhdGU9PT1jLmxhc3QmJihiLmJhc2VTdGF0ZT1mKTtyZXR1cm5bZixkXX19cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxkXX1kPWMubGFzdDt2YXIgZz1iLmJhc2VVcGRhdGU7Zj1iLmJhc2VTdGF0ZTtudWxsIT09Zz8obnVsbCE9PWQmJihkLm5leHQ9bnVsbCksZD1nLm5leHQpOmQ9bnVsbCE9PWQ/ZC5uZXh0Om51bGw7aWYobnVsbCE9PWQpe3ZhciBoPWU9bnVsbCxsPWQsaz0hMTtkb3t2YXIgbT1sLmV4cGlyYXRpb25UaW1lO1xubTxiZz8oa3x8KGs9ITAsaD1nLGU9ZiksbT5nZyYmKGdnPW0pKTpmPWwuZWFnZXJSZWR1Y2VyPT09YT9sLmVhZ2VyU3RhdGU6YShmLGwuYWN0aW9uKTtnPWw7bD1sLm5leHR9d2hpbGUobnVsbCE9PWwmJmwhPT1kKTtrfHwoaD1nLGU9Zik7ZmQoZixiLm1lbW9pemVkU3RhdGUpfHwoeGc9ITApO2IubWVtb2l6ZWRTdGF0ZT1mO2IuYmFzZVVwZGF0ZT1oO2IuYmFzZVN0YXRlPWU7Yy5lYWdlclJlZHVjZXI9YTtjLmVhZ2VyU3RhdGU9Zn1yZXR1cm5bYi5tZW1vaXplZFN0YXRlLGMuZGlzcGF0Y2hdfVxuZnVuY3Rpb24geWcoYSxiLGMsZCl7YT17dGFnOmEsY3JlYXRlOmIsZGVzdHJveTpjLGRlcHM6ZCxuZXh0Om51bGx9O251bGw9PT1oZz8oaGc9e2xhc3RFZmZlY3Q6bnVsbH0saGcubGFzdEVmZmVjdD1hLm5leHQ9YSk6KGI9aGcubGFzdEVmZmVjdCxudWxsPT09Yj9oZy5sYXN0RWZmZWN0PWEubmV4dD1hOihjPWIubmV4dCxiLm5leHQ9YSxhLm5leHQ9YyxoZy5sYXN0RWZmZWN0PWEpKTtyZXR1cm4gYX1mdW5jdGlvbiB6ZyhhLGIsYyxkKXt2YXIgZT10ZygpO2lnfD1hO2UubWVtb2l6ZWRTdGF0ZT15ZyhiLGMsdm9pZCAwLHZvaWQgMD09PWQ/bnVsbDpkKX1cbmZ1bmN0aW9uIEJnKGEsYixjLGQpe3ZhciBlPXVnKCk7ZD12b2lkIDA9PT1kP251bGw6ZDt2YXIgZj12b2lkIDA7aWYobnVsbCE9PVEpe3ZhciBnPVEubWVtb2l6ZWRTdGF0ZTtmPWcuZGVzdHJveTtpZihudWxsIT09ZCYmbmcoZCxnLmRlcHMpKXt5ZyhUZixjLGYsZCk7cmV0dXJufX1pZ3w9YTtlLm1lbW9pemVkU3RhdGU9eWcoYixjLGYsZCl9ZnVuY3Rpb24gQ2coYSxiKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYT1hKCksYihhKSxmdW5jdGlvbigpe2IobnVsbCl9O2lmKG51bGwhPT1iJiZ2b2lkIDAhPT1iKXJldHVybiBhPWEoKSxiLmN1cnJlbnQ9YSxmdW5jdGlvbigpe2IuY3VycmVudD1udWxsfX1mdW5jdGlvbiBEZygpe31cbmZ1bmN0aW9uIEVnKGEsYixjKXsyNT5sZz92b2lkIDA6dChcIjMwMVwiKTt2YXIgZD1hLmFsdGVybmF0ZTtpZihhPT09Y2d8fG51bGwhPT1kJiZkPT09Y2cpaWYoamc9ITAsYT17ZXhwaXJhdGlvblRpbWU6YmcsYWN0aW9uOmMsZWFnZXJSZWR1Y2VyOm51bGwsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH0sbnVsbD09PWtnJiYoa2c9bmV3IE1hcCksYz1rZy5nZXQoYiksdm9pZCAwPT09YylrZy5zZXQoYixhKTtlbHNle2ZvcihiPWM7bnVsbCE9PWIubmV4dDspYj1iLm5leHQ7Yi5uZXh0PWF9ZWxzZXtzZigpO3ZhciBlPXBmKCk7ZT1xZihlLGEpO3ZhciBmPXtleHBpcmF0aW9uVGltZTplLGFjdGlvbjpjLGVhZ2VyUmVkdWNlcjpudWxsLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9LGc9Yi5sYXN0O2lmKG51bGw9PT1nKWYubmV4dD1mO2Vsc2V7dmFyIGg9Zy5uZXh0O251bGwhPT1oJiYoZi5uZXh0PWgpO2cubmV4dD1mfWIubGFzdD1mO2lmKDA9PT1hLmV4cGlyYXRpb25UaW1lJiYobnVsbD09PVxuZHx8MD09PWQuZXhwaXJhdGlvblRpbWUpJiYoZD1iLmVhZ2VyUmVkdWNlcixudWxsIT09ZCkpdHJ5e3ZhciBsPWIuZWFnZXJTdGF0ZSxrPWQobCxjKTtmLmVhZ2VyUmVkdWNlcj1kO2YuZWFnZXJTdGF0ZT1rO2lmKGZkKGssbCkpcmV0dXJufWNhdGNoKG0pe31maW5hbGx5e311ZihhLGUpfX1cbnZhciByZz17cmVhZENvbnRleHQ6QWYsdXNlQ2FsbGJhY2s6bWcsdXNlQ29udGV4dDptZyx1c2VFZmZlY3Q6bWcsdXNlSW1wZXJhdGl2ZUhhbmRsZTptZyx1c2VMYXlvdXRFZmZlY3Q6bWcsdXNlTWVtbzptZyx1c2VSZWR1Y2VyOm1nLHVzZVJlZjptZyx1c2VTdGF0ZTptZyx1c2VEZWJ1Z1ZhbHVlOm1nfSxwZz17cmVhZENvbnRleHQ6QWYsdXNlQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiKXt0ZygpLm1lbW9pemVkU3RhdGU9W2Esdm9pZCAwPT09Yj9udWxsOmJdO3JldHVybiBhfSx1c2VDb250ZXh0OkFmLHVzZUVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiB6Zyg1MTYsJGZ8WmYsYSxiKX0sdXNlSW1wZXJhdGl2ZUhhbmRsZTpmdW5jdGlvbihhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOlthXTtyZXR1cm4gemcoNCxWZnxZZixDZy5iaW5kKG51bGwsYixhKSxjKX0sdXNlTGF5b3V0RWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIHpnKDQsVmZ8WWYsYSxiKX0sXG51c2VNZW1vOmZ1bmN0aW9uKGEsYil7dmFyIGM9dGcoKTtiPXZvaWQgMD09PWI/bnVsbDpiO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX0sdXNlUmVkdWNlcjpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9dGcoKTtiPXZvaWQgMCE9PWM/YyhiKTpiO2QubWVtb2l6ZWRTdGF0ZT1kLmJhc2VTdGF0ZT1iO2E9ZC5xdWV1ZT17bGFzdDpudWxsLGRpc3BhdGNoOm51bGwsZWFnZXJSZWR1Y2VyOmEsZWFnZXJTdGF0ZTpifTthPWEuZGlzcGF0Y2g9RWcuYmluZChudWxsLGNnLGEpO3JldHVybltkLm1lbW9pemVkU3RhdGUsYV19LHVzZVJlZjpmdW5jdGlvbihhKXt2YXIgYj10ZygpO2E9e2N1cnJlbnQ6YX07cmV0dXJuIGIubWVtb2l6ZWRTdGF0ZT1hfSx1c2VTdGF0ZTpmdW5jdGlvbihhKXt2YXIgYj10ZygpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBhJiYoYT1hKCkpO2IubWVtb2l6ZWRTdGF0ZT1iLmJhc2VTdGF0ZT1hO2E9Yi5xdWV1ZT17bGFzdDpudWxsLGRpc3BhdGNoOm51bGwsZWFnZXJSZWR1Y2VyOnZnLFxuZWFnZXJTdGF0ZTphfTthPWEuZGlzcGF0Y2g9RWcuYmluZChudWxsLGNnLGEpO3JldHVybltiLm1lbW9pemVkU3RhdGUsYV19LHVzZURlYnVnVmFsdWU6RGd9LHFnPXtyZWFkQ29udGV4dDpBZix1c2VDYWxsYmFjazpmdW5jdGlvbihhLGIpe3ZhciBjPXVnKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZuZyhiLGRbMV0pKXJldHVybiBkWzBdO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX0sdXNlQ29udGV4dDpBZix1c2VFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gQmcoNTE2LCRmfFpmLGEsYil9LHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpbYV07cmV0dXJuIEJnKDQsVmZ8WWYsQ2cuYmluZChudWxsLGIsYSksYyl9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBCZyg0LFZmfFlmLGEsYil9LFxudXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPXVnKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZuZyhiLGRbMV0pKXJldHVybiBkWzBdO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX0sdXNlUmVkdWNlcjp3Zyx1c2VSZWY6ZnVuY3Rpb24oKXtyZXR1cm4gdWcoKS5tZW1vaXplZFN0YXRlfSx1c2VTdGF0ZTpmdW5jdGlvbihhKXtyZXR1cm4gd2codmcsYSl9LHVzZURlYnVnVmFsdWU6RGd9LEZnPW51bGwsR2c9bnVsbCxIZz0hMTtcbmZ1bmN0aW9uIElnKGEsYil7dmFyIGM9Tig1LG51bGwsbnVsbCwwKTtjLmVsZW1lbnRUeXBlPVwiREVMRVRFRFwiO2MudHlwZT1cIkRFTEVURURcIjtjLnN0YXRlTm9kZT1iO2MucmV0dXJuPWE7Yy5lZmZlY3RUYWc9ODtudWxsIT09YS5sYXN0RWZmZWN0PyhhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGEubGFzdEVmZmVjdD1jKTphLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1jfWZ1bmN0aW9uIEpnKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDU6dmFyIGM9YS50eXBlO2I9MSE9PWIubm9kZVR5cGV8fGMudG9Mb3dlckNhc2UoKSE9PWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmI7cmV0dXJuIG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9XCJcIj09PWEucGVuZGluZ1Byb3BzfHwzIT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gS2coYSl7aWYoSGcpe3ZhciBiPUdnO2lmKGIpe3ZhciBjPWI7aWYoIUpnKGEsYikpe2I9SGUoYyk7aWYoIWJ8fCFKZyhhLGIpKXthLmVmZmVjdFRhZ3w9MjtIZz0hMTtGZz1hO3JldHVybn1JZyhGZyxjKX1GZz1hO0dnPUllKGIpfWVsc2UgYS5lZmZlY3RUYWd8PTIsSGc9ITEsRmc9YX19ZnVuY3Rpb24gTGcoYSl7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWEmJjUhPT1hLnRhZyYmMyE9PWEudGFnOylhPWEucmV0dXJuO0ZnPWF9ZnVuY3Rpb24gTWcoYSl7aWYoYSE9PUZnKXJldHVybiExO2lmKCFIZylyZXR1cm4gTGcoYSksSGc9ITAsITE7dmFyIGI9YS50eXBlO2lmKDUhPT1hLnRhZ3x8XCJoZWFkXCIhPT1iJiZcImJvZHlcIiE9PWImJiFCZShiLGEubWVtb2l6ZWRQcm9wcykpZm9yKGI9R2c7YjspSWcoYSxiKSxiPUhlKGIpO0xnKGEpO0dnPUZnP0hlKGEuc3RhdGVOb2RlKTpudWxsO3JldHVybiEwfWZ1bmN0aW9uIE5nKCl7R2c9Rmc9bnVsbDtIZz0hMX1cbnZhciBPZz1YYi5SZWFjdEN1cnJlbnRPd25lcix4Zz0hMTtmdW5jdGlvbiBTKGEsYixjLGQpe2IuY2hpbGQ9bnVsbD09PWE/SmYoYixudWxsLGMsZCk6SWYoYixhLmNoaWxkLGMsZCl9ZnVuY3Rpb24gUGcoYSxiLGMsZCxlKXtjPWMucmVuZGVyO3ZhciBmPWIucmVmO1FnKGIsZSk7ZD1vZyhhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiF4ZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZWZmZWN0VGFnJj0tNTE3LGEuZXhwaXJhdGlvblRpbWU8PWUmJihhLmV4cGlyYXRpb25UaW1lPTApLFJnKGEsYixlKTtiLmVmZmVjdFRhZ3w9MTtTKGEsYixkLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gU2coYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hKXt2YXIgZz1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJiEkZShnKSYmdm9pZCAwPT09Zy5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUmJnZvaWQgMD09PWMuZGVmYXVsdFByb3BzKXJldHVybiBiLnRhZz0xNSxiLnR5cGU9ZyxUZyhhLGIsZyxkLGUsZik7YT1jZihjLnR5cGUsbnVsbCxkLG51bGwsYi5tb2RlLGYpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1nPWEuY2hpbGQ7aWYoZTxmJiYoZT1nLm1lbW9pemVkUHJvcHMsYz1jLmNvbXBhcmUsYz1udWxsIT09Yz9jOmhkLGMoZSxkKSYmYS5yZWY9PT1iLnJlZikpcmV0dXJuIFJnKGEsYixmKTtiLmVmZmVjdFRhZ3w9MTthPWJmKGcsZCxmKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9XG5mdW5jdGlvbiBUZyhhLGIsYyxkLGUsZil7cmV0dXJuIG51bGwhPT1hJiZoZChhLm1lbW9pemVkUHJvcHMsZCkmJmEucmVmPT09Yi5yZWYmJih4Zz0hMSxlPGYpP1JnKGEsYixmKTpVZyhhLGIsYyxkLGYpfWZ1bmN0aW9uIFZnKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZWZmZWN0VGFnfD0xMjh9ZnVuY3Rpb24gVWcoYSxiLGMsZCxlKXt2YXIgZj1NKGMpP01lOksuY3VycmVudDtmPU9lKGIsZik7UWcoYixlKTtjPW9nKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIXhnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5lZmZlY3RUYWcmPS01MTcsYS5leHBpcmF0aW9uVGltZTw9ZSYmKGEuZXhwaXJhdGlvblRpbWU9MCksUmcoYSxiLGUpO2IuZWZmZWN0VGFnfD0xO1MoYSxiLGMsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBXZyhhLGIsYyxkLGUpe2lmKE0oYykpe3ZhciBmPSEwO1RlKGIpfWVsc2UgZj0hMTtRZyhiLGUpO2lmKG51bGw9PT1iLnN0YXRlTm9kZSludWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9MiksemYoYixjLGQsZSksQ2YoYixjLGQsZSksZD0hMDtlbHNlIGlmKG51bGw9PT1hKXt2YXIgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcztnLnByb3BzPWg7dmFyIGw9Zy5jb250ZXh0LGs9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGsmJm51bGwhPT1rP2s9QWYoayk6KGs9TShjKT9NZTpLLmN1cnJlbnQsaz1PZShiLGspKTt2YXIgbT1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyxxPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBtfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZTtxfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXG5cImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PWR8fGwhPT1rKSYmQmYoYixnLGQsayk7WGc9ITE7dmFyIHg9Yi5tZW1vaXplZFN0YXRlO2w9Zy5zdGF0ZT14O3ZhciBDPWIudXBkYXRlUXVldWU7bnVsbCE9PUMmJihEZihiLEMsZCxnLGUpLGw9Yi5tZW1vaXplZFN0YXRlKTtoIT09ZHx8eCE9PWx8fEwuY3VycmVudHx8WGc/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBtJiYob2YoYixjLG0sZCksbD1iLm1lbW9pemVkU3RhdGUpLChoPVhnfHx5ZihiLGMsaCxkLHgsbCxrKSk/KHF8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudHx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudCYmZy5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcbmcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1sKSxnLnByb3BzPWQsZy5zdGF0ZT1sLGcuY29udGV4dD1rLGQ9aCk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpLGQ9ITEpfWVsc2UgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcyxnLnByb3BzPWIudHlwZT09PWIuZWxlbWVudFR5cGU/aDpQKGIudHlwZSxoKSxsPWcuY29udGV4dCxrPWMuY29udGV4dFR5cGUsXCJvYmplY3RcIj09PXR5cGVvZiBrJiZudWxsIT09az9rPUFmKGspOihrPU0oYyk/TWU6Sy5jdXJyZW50LGs9T2UoYixrKSksbT1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcywocT1cImZ1bmN0aW9uXCI9PT1cbnR5cGVvZiBtfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PWR8fGwhPT1rKSYmQmYoYixnLGQsayksWGc9ITEsbD1iLm1lbW9pemVkU3RhdGUseD1nLnN0YXRlPWwsQz1iLnVwZGF0ZVF1ZXVlLG51bGwhPT1DJiYoRGYoYixDLGQsZyxlKSx4PWIubWVtb2l6ZWRTdGF0ZSksaCE9PWR8fGwhPT14fHxMLmN1cnJlbnR8fFhnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbSYmKG9mKGIsYyxtLGQpLHg9Yi5tZW1vaXplZFN0YXRlKSwobT1YZ3x8eWYoYixjLGgsZCxsLHgsaykpPyhxfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZXx8KFwiZnVuY3Rpb25cIj09PVxudHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5jb21wb25lbnRXaWxsVXBkYXRlKGQseCxrKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShkLHgsaykpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZSYmKGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSYmKGIuZWZmZWN0VGFnfD0yNTYpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZsPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZsPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTI1NiksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPVxueCksZy5wcm9wcz1kLGcuc3RhdGU9eCxnLmNvbnRleHQ9ayxkPW0pOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJmw9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJmw9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjU2KSxkPSExKTtyZXR1cm4gWWcoYSxiLGMsZCxmLGUpfVxuZnVuY3Rpb24gWWcoYSxiLGMsZCxlLGYpe1ZnKGEsYik7dmFyIGc9MCE9PShiLmVmZmVjdFRhZyY2NCk7aWYoIWQmJiFnKXJldHVybiBlJiZVZShiLGMsITEpLFJnKGEsYixmKTtkPWIuc3RhdGVOb2RlO09nLmN1cnJlbnQ9Yjt2YXIgaD1nJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I/bnVsbDpkLnJlbmRlcigpO2IuZWZmZWN0VGFnfD0xO251bGwhPT1hJiZnPyhiLmNoaWxkPUlmKGIsYS5jaGlsZCxudWxsLGYpLGIuY2hpbGQ9SWYoYixudWxsLGgsZikpOlMoYSxiLGgsZik7Yi5tZW1vaXplZFN0YXRlPWQuc3RhdGU7ZSYmVWUoYixjLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBaZyhhKXt2YXIgYj1hLnN0YXRlTm9kZTtiLnBlbmRpbmdDb250ZXh0P1JlKGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJlJlKGEsYi5jb250ZXh0LCExKTtQZihhLGIuY29udGFpbmVySW5mbyl9XG5mdW5jdGlvbiAkZyhhLGIsYyl7dmFyIGQ9Yi5tb2RlLGU9Yi5wZW5kaW5nUHJvcHMsZj1iLm1lbW9pemVkU3RhdGU7aWYoMD09PShiLmVmZmVjdFRhZyY2NCkpe2Y9bnVsbDt2YXIgZz0hMX1lbHNlIGY9e3RpbWVkT3V0QXQ6bnVsbCE9PWY/Zi50aW1lZE91dEF0OjB9LGc9ITAsYi5lZmZlY3RUYWcmPS02NTtpZihudWxsPT09YSlpZihnKXt2YXIgaD1lLmZhbGxiYWNrO2E9ZGYobnVsbCxkLDAsbnVsbCk7MD09PShiLm1vZGUmMSkmJihhLmNoaWxkPW51bGwhPT1iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkKTtkPWRmKGgsZCxjLG51bGwpO2Euc2libGluZz1kO2M9YTtjLnJldHVybj1kLnJldHVybj1ifWVsc2UgYz1kPUpmKGIsbnVsbCxlLmNoaWxkcmVuLGMpO2Vsc2UgbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZT8oZD1hLmNoaWxkLGg9ZC5zaWJsaW5nLGc/KGM9ZS5mYWxsYmFjayxlPWJmKGQsZC5wZW5kaW5nUHJvcHMsMCksMD09PShiLm1vZGUmMSkmJihnPW51bGwhPT1cbmIubWVtb2l6ZWRTdGF0ZT9iLmNoaWxkLmNoaWxkOmIuY2hpbGQsZyE9PWQuY2hpbGQmJihlLmNoaWxkPWcpKSxkPWUuc2libGluZz1iZihoLGMsaC5leHBpcmF0aW9uVGltZSksYz1lLGUuY2hpbGRFeHBpcmF0aW9uVGltZT0wLGMucmV0dXJuPWQucmV0dXJuPWIpOmM9ZD1JZihiLGQuY2hpbGQsZS5jaGlsZHJlbixjKSk6KGg9YS5jaGlsZCxnPyhnPWUuZmFsbGJhY2ssZT1kZihudWxsLGQsMCxudWxsKSxlLmNoaWxkPWgsMD09PShiLm1vZGUmMSkmJihlLmNoaWxkPW51bGwhPT1iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkKSxkPWUuc2libGluZz1kZihnLGQsYyxudWxsKSxkLmVmZmVjdFRhZ3w9MixjPWUsZS5jaGlsZEV4cGlyYXRpb25UaW1lPTAsYy5yZXR1cm49ZC5yZXR1cm49Yik6ZD1jPUlmKGIsaCxlLmNoaWxkcmVuLGMpKSxiLnN0YXRlTm9kZT1hLnN0YXRlTm9kZTtiLm1lbW9pemVkU3RhdGU9ZjtiLmNoaWxkPWM7cmV0dXJuIGR9XG5mdW5jdGlvbiBSZyhhLGIsYyl7bnVsbCE9PWEmJihiLmNvbnRleHREZXBlbmRlbmNpZXM9YS5jb250ZXh0RGVwZW5kZW5jaWVzKTtpZihiLmNoaWxkRXhwaXJhdGlvblRpbWU8YylyZXR1cm4gbnVsbDtudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQ/dChcIjE1M1wiKTp2b2lkIDA7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDtjPWJmKGEsYS5wZW5kaW5nUHJvcHMsYS5leHBpcmF0aW9uVGltZSk7Yi5jaGlsZD1jO2ZvcihjLnJldHVybj1iO251bGwhPT1hLnNpYmxpbmc7KWE9YS5zaWJsaW5nLGM9Yy5zaWJsaW5nPWJmKGEsYS5wZW5kaW5nUHJvcHMsYS5leHBpcmF0aW9uVGltZSksYy5yZXR1cm49YjtjLnNpYmxpbmc9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGFoKGEsYixjKXt2YXIgZD1iLmV4cGlyYXRpb25UaW1lO2lmKG51bGwhPT1hKWlmKGEubWVtb2l6ZWRQcm9wcyE9PWIucGVuZGluZ1Byb3BzfHxMLmN1cnJlbnQpeGc9ITA7ZWxzZXtpZihkPGMpe3hnPSExO3N3aXRjaChiLnRhZyl7Y2FzZSAzOlpnKGIpO05nKCk7YnJlYWs7Y2FzZSA1OlJmKGIpO2JyZWFrO2Nhc2UgMTpNKGIudHlwZSkmJlRlKGIpO2JyZWFrO2Nhc2UgNDpQZihiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO2JyZWFrO2Nhc2UgMTA6YmgoYixiLm1lbW9pemVkUHJvcHMudmFsdWUpO2JyZWFrO2Nhc2UgMTM6aWYobnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSl7ZD1iLmNoaWxkLmNoaWxkRXhwaXJhdGlvblRpbWU7aWYoMCE9PWQmJmQ+PWMpcmV0dXJuICRnKGEsYixjKTtiPVJnKGEsYixjKTtyZXR1cm4gbnVsbCE9PWI/Yi5zaWJsaW5nOm51bGx9fXJldHVybiBSZyhhLGIsYyl9fWVsc2UgeGc9ITE7Yi5leHBpcmF0aW9uVGltZT0wO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmQ9XG5iLmVsZW1lbnRUeXBlO251bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKTthPWIucGVuZGluZ1Byb3BzO3ZhciBlPU9lKGIsSy5jdXJyZW50KTtRZyhiLGMpO2U9b2cobnVsbCxiLGQsYSxlLGMpO2IuZWZmZWN0VGFnfD0xO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZSYmbnVsbCE9PWUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLnJlbmRlciYmdm9pZCAwPT09ZS4kJHR5cGVvZil7Yi50YWc9MTtzZygpO2lmKE0oZCkpe3ZhciBmPSEwO1RlKGIpfWVsc2UgZj0hMTtiLm1lbW9pemVkU3RhdGU9bnVsbCE9PWUuc3RhdGUmJnZvaWQgMCE9PWUuc3RhdGU/ZS5zdGF0ZTpudWxsO3ZhciBnPWQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBnJiZvZihiLGQsZyxhKTtlLnVwZGF0ZXI9eGY7Yi5zdGF0ZU5vZGU9ZTtlLl9yZWFjdEludGVybmFsRmliZXI9YjtDZihiLGQsYSxjKTtiPVlnKG51bGwsYixkLCEwLGYsXG5jKX1lbHNlIGIudGFnPTAsUyhudWxsLGIsZSxjKSxiPWIuY2hpbGQ7cmV0dXJuIGI7Y2FzZSAxNjplPWIuZWxlbWVudFR5cGU7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpO2Y9Yi5wZW5kaW5nUHJvcHM7YT1tZihlKTtiLnR5cGU9YTtlPWIudGFnPWFmKGEpO2Y9UChhLGYpO2c9dm9pZCAwO3N3aXRjaChlKXtjYXNlIDA6Zz1VZyhudWxsLGIsYSxmLGMpO2JyZWFrO2Nhc2UgMTpnPVdnKG51bGwsYixhLGYsYyk7YnJlYWs7Y2FzZSAxMTpnPVBnKG51bGwsYixhLGYsYyk7YnJlYWs7Y2FzZSAxNDpnPVNnKG51bGwsYixhLFAoYS50eXBlLGYpLGQsYyk7YnJlYWs7ZGVmYXVsdDp0KFwiMzA2XCIsYSxcIlwiKX1yZXR1cm4gZztjYXNlIDA6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOlAoZCxlKSxVZyhhLGIsZCxlLGMpO2Nhc2UgMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxcbmU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpQKGQsZSksV2coYSxiLGQsZSxjKTtjYXNlIDM6WmcoYik7ZD1iLnVwZGF0ZVF1ZXVlO251bGw9PT1kP3QoXCIyODJcIik6dm9pZCAwO2U9Yi5tZW1vaXplZFN0YXRlO2U9bnVsbCE9PWU/ZS5lbGVtZW50Om51bGw7RGYoYixkLGIucGVuZGluZ1Byb3BzLG51bGwsYyk7ZD1iLm1lbW9pemVkU3RhdGUuZWxlbWVudDtpZihkPT09ZSlOZygpLGI9UmcoYSxiLGMpO2Vsc2V7ZT1iLnN0YXRlTm9kZTtpZihlPShudWxsPT09YXx8bnVsbD09PWEuY2hpbGQpJiZlLmh5ZHJhdGUpR2c9SWUoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksRmc9YixlPUhnPSEwO2U/KGIuZWZmZWN0VGFnfD0yLGIuY2hpbGQ9SmYoYixudWxsLGQsYykpOihTKGEsYixkLGMpLE5nKCkpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDU6cmV0dXJuIFJmKGIpLG51bGw9PT1hJiZLZyhiKSxkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGY9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOm51bGwsXG5nPWUuY2hpbGRyZW4sQmUoZCxlKT9nPW51bGw6bnVsbCE9PWYmJkJlKGQsZikmJihiLmVmZmVjdFRhZ3w9MTYpLFZnKGEsYiksMSE9PWMmJmIubW9kZSYxJiZlLmhpZGRlbj8oYi5leHBpcmF0aW9uVGltZT1iLmNoaWxkRXhwaXJhdGlvblRpbWU9MSxiPW51bGwpOihTKGEsYixnLGMpLGI9Yi5jaGlsZCksYjtjYXNlIDY6cmV0dXJuIG51bGw9PT1hJiZLZyhiKSxudWxsO2Nhc2UgMTM6cmV0dXJuICRnKGEsYixjKTtjYXNlIDQ6cmV0dXJuIFBmKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksZD1iLnBlbmRpbmdQcm9wcyxudWxsPT09YT9iLmNoaWxkPUlmKGIsbnVsbCxkLGMpOlMoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDExOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpQKGQsZSksUGcoYSxiLGQsZSxjKTtjYXNlIDc6cmV0dXJuIFMoYSxiLGIucGVuZGluZ1Byb3BzLGMpLGIuY2hpbGQ7Y2FzZSA4OnJldHVybiBTKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixcbmMpLGIuY2hpbGQ7Y2FzZSAxMjpyZXR1cm4gUyhhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEwOmE6e2Q9Yi50eXBlLl9jb250ZXh0O2U9Yi5wZW5kaW5nUHJvcHM7Zz1iLm1lbW9pemVkUHJvcHM7Zj1lLnZhbHVlO2JoKGIsZik7aWYobnVsbCE9PWcpe3ZhciBoPWcudmFsdWU7Zj1mZChoLGYpPzA6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLl9jYWxjdWxhdGVDaGFuZ2VkQml0cz9kLl9jYWxjdWxhdGVDaGFuZ2VkQml0cyhoLGYpOjEwNzM3NDE4MjMpfDA7aWYoMD09PWYpe2lmKGcuY2hpbGRyZW49PT1lLmNoaWxkcmVuJiYhTC5jdXJyZW50KXtiPVJnKGEsYixjKTticmVhayBhfX1lbHNlIGZvcihoPWIuY2hpbGQsbnVsbCE9PWgmJihoLnJldHVybj1iKTtudWxsIT09aDspe3ZhciBsPWguY29udGV4dERlcGVuZGVuY2llcztpZihudWxsIT09bCl7Zz1oLmNoaWxkO2Zvcih2YXIgaz1sLmZpcnN0O251bGwhPT1rOyl7aWYoay5jb250ZXh0PT09ZCYmMCE9PVxuKGsub2JzZXJ2ZWRCaXRzJmYpKXsxPT09aC50YWcmJihrPXJmKGMpLGsudGFnPXdmLHRmKGgsaykpO2guZXhwaXJhdGlvblRpbWU8YyYmKGguZXhwaXJhdGlvblRpbWU9Yyk7az1oLmFsdGVybmF0ZTtudWxsIT09ayYmay5leHBpcmF0aW9uVGltZTxjJiYoay5leHBpcmF0aW9uVGltZT1jKTtmb3IodmFyIG09aC5yZXR1cm47bnVsbCE9PW07KXtrPW0uYWx0ZXJuYXRlO2lmKG0uY2hpbGRFeHBpcmF0aW9uVGltZTxjKW0uY2hpbGRFeHBpcmF0aW9uVGltZT1jLG51bGwhPT1rJiZrLmNoaWxkRXhwaXJhdGlvblRpbWU8YyYmKGsuY2hpbGRFeHBpcmF0aW9uVGltZT1jKTtlbHNlIGlmKG51bGwhPT1rJiZrLmNoaWxkRXhwaXJhdGlvblRpbWU8YylrLmNoaWxkRXhwaXJhdGlvblRpbWU9YztlbHNlIGJyZWFrO209bS5yZXR1cm59bC5leHBpcmF0aW9uVGltZTxjJiYobC5leHBpcmF0aW9uVGltZT1jKTticmVha31rPWsubmV4dH19ZWxzZSBnPTEwPT09aC50YWc/aC50eXBlPT09Yi50eXBlP251bGw6XG5oLmNoaWxkOmguY2hpbGQ7aWYobnVsbCE9PWcpZy5yZXR1cm49aDtlbHNlIGZvcihnPWg7bnVsbCE9PWc7KXtpZihnPT09Yil7Zz1udWxsO2JyZWFrfWg9Zy5zaWJsaW5nO2lmKG51bGwhPT1oKXtoLnJldHVybj1nLnJldHVybjtnPWg7YnJlYWt9Zz1nLnJldHVybn1oPWd9fVMoYSxiLGUuY2hpbGRyZW4sYyk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgOTpyZXR1cm4gZT1iLnR5cGUsZj1iLnBlbmRpbmdQcm9wcyxkPWYuY2hpbGRyZW4sUWcoYixjKSxlPUFmKGUsZi51bnN0YWJsZV9vYnNlcnZlZEJpdHMpLGQ9ZChlKSxiLmVmZmVjdFRhZ3w9MSxTKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxNDpyZXR1cm4gZT1iLnR5cGUsZj1QKGUsYi5wZW5kaW5nUHJvcHMpLGY9UChlLnR5cGUsZiksU2coYSxiLGUsZixkLGMpO2Nhc2UgMTU6cmV0dXJuIFRnKGEsYixiLnR5cGUsYi5wZW5kaW5nUHJvcHMsZCxjKTtjYXNlIDE3OnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PVxuZD9lOlAoZCxlKSxudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9MiksYi50YWc9MSxNKGQpPyhhPSEwLFRlKGIpKTphPSExLFFnKGIsYyksemYoYixkLGUsYyksQ2YoYixkLGUsYyksWWcobnVsbCxiLGQsITAsYSxjKTtkZWZhdWx0OnQoXCIxNTZcIil9fXZhciBjaD17Y3VycmVudDpudWxsfSxkaD1udWxsLGVoPW51bGwsZmg9bnVsbDtmdW5jdGlvbiBiaChhLGIpe3ZhciBjPWEudHlwZS5fY29udGV4dDtKKGNoLGMuX2N1cnJlbnRWYWx1ZSxhKTtjLl9jdXJyZW50VmFsdWU9Yn1mdW5jdGlvbiBnaChhKXt2YXIgYj1jaC5jdXJyZW50O0koY2gsYSk7YS50eXBlLl9jb250ZXh0Ll9jdXJyZW50VmFsdWU9Yn1mdW5jdGlvbiBRZyhhLGIpe2RoPWE7Zmg9ZWg9bnVsbDt2YXIgYz1hLmNvbnRleHREZXBlbmRlbmNpZXM7bnVsbCE9PWMmJmMuZXhwaXJhdGlvblRpbWU+PWImJih4Zz0hMCk7YS5jb250ZXh0RGVwZW5kZW5jaWVzPW51bGx9XG5mdW5jdGlvbiBBZihhLGIpe2lmKGZoIT09YSYmITEhPT1iJiYwIT09Yil7aWYoXCJudW1iZXJcIiE9PXR5cGVvZiBifHwxMDczNzQxODIzPT09YilmaD1hLGI9MTA3Mzc0MTgyMztiPXtjb250ZXh0OmEsb2JzZXJ2ZWRCaXRzOmIsbmV4dDpudWxsfTtudWxsPT09ZWg/KG51bGw9PT1kaD90KFwiMzA4XCIpOnZvaWQgMCxlaD1iLGRoLmNvbnRleHREZXBlbmRlbmNpZXM9e2ZpcnN0OmIsZXhwaXJhdGlvblRpbWU6MH0pOmVoPWVoLm5leHQ9Yn1yZXR1cm4gYS5fY3VycmVudFZhbHVlfXZhciBoaD0wLHZmPTEsd2Y9MixpaD0zLFhnPSExO2Z1bmN0aW9uIGpoKGEpe3JldHVybntiYXNlU3RhdGU6YSxmaXJzdFVwZGF0ZTpudWxsLGxhc3RVcGRhdGU6bnVsbCxmaXJzdENhcHR1cmVkVXBkYXRlOm51bGwsbGFzdENhcHR1cmVkVXBkYXRlOm51bGwsZmlyc3RFZmZlY3Q6bnVsbCxsYXN0RWZmZWN0Om51bGwsZmlyc3RDYXB0dXJlZEVmZmVjdDpudWxsLGxhc3RDYXB0dXJlZEVmZmVjdDpudWxsfX1cbmZ1bmN0aW9uIGtoKGEpe3JldHVybntiYXNlU3RhdGU6YS5iYXNlU3RhdGUsZmlyc3RVcGRhdGU6YS5maXJzdFVwZGF0ZSxsYXN0VXBkYXRlOmEubGFzdFVwZGF0ZSxmaXJzdENhcHR1cmVkVXBkYXRlOm51bGwsbGFzdENhcHR1cmVkVXBkYXRlOm51bGwsZmlyc3RFZmZlY3Q6bnVsbCxsYXN0RWZmZWN0Om51bGwsZmlyc3RDYXB0dXJlZEVmZmVjdDpudWxsLGxhc3RDYXB0dXJlZEVmZmVjdDpudWxsfX1mdW5jdGlvbiByZihhKXtyZXR1cm57ZXhwaXJhdGlvblRpbWU6YSx0YWc6aGgscGF5bG9hZDpudWxsLGNhbGxiYWNrOm51bGwsbmV4dDpudWxsLG5leHRFZmZlY3Q6bnVsbH19ZnVuY3Rpb24gbGgoYSxiKXtudWxsPT09YS5sYXN0VXBkYXRlP2EuZmlyc3RVcGRhdGU9YS5sYXN0VXBkYXRlPWI6KGEubGFzdFVwZGF0ZS5uZXh0PWIsYS5sYXN0VXBkYXRlPWIpfVxuZnVuY3Rpb24gdGYoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtpZihudWxsPT09Yyl7dmFyIGQ9YS51cGRhdGVRdWV1ZTt2YXIgZT1udWxsO251bGw9PT1kJiYoZD1hLnVwZGF0ZVF1ZXVlPWpoKGEubWVtb2l6ZWRTdGF0ZSkpfWVsc2UgZD1hLnVwZGF0ZVF1ZXVlLGU9Yy51cGRhdGVRdWV1ZSxudWxsPT09ZD9udWxsPT09ZT8oZD1hLnVwZGF0ZVF1ZXVlPWpoKGEubWVtb2l6ZWRTdGF0ZSksZT1jLnVwZGF0ZVF1ZXVlPWpoKGMubWVtb2l6ZWRTdGF0ZSkpOmQ9YS51cGRhdGVRdWV1ZT1raChlKTpudWxsPT09ZSYmKGU9Yy51cGRhdGVRdWV1ZT1raChkKSk7bnVsbD09PWV8fGQ9PT1lP2xoKGQsYik6bnVsbD09PWQubGFzdFVwZGF0ZXx8bnVsbD09PWUubGFzdFVwZGF0ZT8obGgoZCxiKSxsaChlLGIpKToobGgoZCxiKSxlLmxhc3RVcGRhdGU9Yil9XG5mdW5jdGlvbiBtaChhLGIpe3ZhciBjPWEudXBkYXRlUXVldWU7Yz1udWxsPT09Yz9hLnVwZGF0ZVF1ZXVlPWpoKGEubWVtb2l6ZWRTdGF0ZSk6bmgoYSxjKTtudWxsPT09Yy5sYXN0Q2FwdHVyZWRVcGRhdGU/Yy5maXJzdENhcHR1cmVkVXBkYXRlPWMubGFzdENhcHR1cmVkVXBkYXRlPWI6KGMubGFzdENhcHR1cmVkVXBkYXRlLm5leHQ9YixjLmxhc3RDYXB0dXJlZFVwZGF0ZT1iKX1mdW5jdGlvbiBuaChhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiZiPT09Yy51cGRhdGVRdWV1ZSYmKGI9YS51cGRhdGVRdWV1ZT1raChiKSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiBvaChhLGIsYyxkLGUsZil7c3dpdGNoKGMudGFnKXtjYXNlIHZmOnJldHVybiBhPWMucGF5bG9hZCxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hLmNhbGwoZixkLGUpOmE7Y2FzZSBpaDphLmVmZmVjdFRhZz1hLmVmZmVjdFRhZyYtMjA0OXw2NDtjYXNlIGhoOmE9Yy5wYXlsb2FkO2U9XCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YS5jYWxsKGYsZCxlKTphO2lmKG51bGw9PT1lfHx2b2lkIDA9PT1lKWJyZWFrO3JldHVybiBwKHt9LGQsZSk7Y2FzZSB3ZjpYZz0hMH1yZXR1cm4gZH1cbmZ1bmN0aW9uIERmKGEsYixjLGQsZSl7WGc9ITE7Yj1uaChhLGIpO2Zvcih2YXIgZj1iLmJhc2VTdGF0ZSxnPW51bGwsaD0wLGw9Yi5maXJzdFVwZGF0ZSxrPWY7bnVsbCE9PWw7KXt2YXIgbT1sLmV4cGlyYXRpb25UaW1lO208ZT8obnVsbD09PWcmJihnPWwsZj1rKSxoPG0mJihoPW0pKTooaz1vaChhLGIsbCxrLGMsZCksbnVsbCE9PWwuY2FsbGJhY2smJihhLmVmZmVjdFRhZ3w9MzIsbC5uZXh0RWZmZWN0PW51bGwsbnVsbD09PWIubGFzdEVmZmVjdD9iLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1sOihiLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1sLGIubGFzdEVmZmVjdD1sKSkpO2w9bC5uZXh0fW09bnVsbDtmb3IobD1iLmZpcnN0Q2FwdHVyZWRVcGRhdGU7bnVsbCE9PWw7KXt2YXIgcT1sLmV4cGlyYXRpb25UaW1lO3E8ZT8obnVsbD09PW0mJihtPWwsbnVsbD09PWcmJihmPWspKSxoPHEmJihoPXEpKTooaz1vaChhLGIsbCxrLGMsZCksbnVsbCE9PWwuY2FsbGJhY2smJihhLmVmZmVjdFRhZ3w9XG4zMixsLm5leHRFZmZlY3Q9bnVsbCxudWxsPT09Yi5sYXN0Q2FwdHVyZWRFZmZlY3Q/Yi5maXJzdENhcHR1cmVkRWZmZWN0PWIubGFzdENhcHR1cmVkRWZmZWN0PWw6KGIubGFzdENhcHR1cmVkRWZmZWN0Lm5leHRFZmZlY3Q9bCxiLmxhc3RDYXB0dXJlZEVmZmVjdD1sKSkpO2w9bC5uZXh0fW51bGw9PT1nJiYoYi5sYXN0VXBkYXRlPW51bGwpO251bGw9PT1tP2IubGFzdENhcHR1cmVkVXBkYXRlPW51bGw6YS5lZmZlY3RUYWd8PTMyO251bGw9PT1nJiZudWxsPT09bSYmKGY9ayk7Yi5iYXNlU3RhdGU9ZjtiLmZpcnN0VXBkYXRlPWc7Yi5maXJzdENhcHR1cmVkVXBkYXRlPW07YS5leHBpcmF0aW9uVGltZT1oO2EubWVtb2l6ZWRTdGF0ZT1rfVxuZnVuY3Rpb24gcGgoYSxiLGMpe251bGwhPT1iLmZpcnN0Q2FwdHVyZWRVcGRhdGUmJihudWxsIT09Yi5sYXN0VXBkYXRlJiYoYi5sYXN0VXBkYXRlLm5leHQ9Yi5maXJzdENhcHR1cmVkVXBkYXRlLGIubGFzdFVwZGF0ZT1iLmxhc3RDYXB0dXJlZFVwZGF0ZSksYi5maXJzdENhcHR1cmVkVXBkYXRlPWIubGFzdENhcHR1cmVkVXBkYXRlPW51bGwpO3FoKGIuZmlyc3RFZmZlY3QsYyk7Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9bnVsbDtxaChiLmZpcnN0Q2FwdHVyZWRFZmZlY3QsYyk7Yi5maXJzdENhcHR1cmVkRWZmZWN0PWIubGFzdENhcHR1cmVkRWZmZWN0PW51bGx9ZnVuY3Rpb24gcWgoYSxiKXtmb3IoO251bGwhPT1hOyl7dmFyIGM9YS5jYWxsYmFjaztpZihudWxsIT09Yyl7YS5jYWxsYmFjaz1udWxsO3ZhciBkPWI7XCJmdW5jdGlvblwiIT09dHlwZW9mIGM/dChcIjE5MVwiLGMpOnZvaWQgMDtjLmNhbGwoZCl9YT1hLm5leHRFZmZlY3R9fVxuZnVuY3Rpb24gcmgoYSxiKXtyZXR1cm57dmFsdWU6YSxzb3VyY2U6YixzdGFjazpuYyhiKX19ZnVuY3Rpb24gc2goYSl7YS5lZmZlY3RUYWd8PTR9dmFyIHdoPXZvaWQgMCx4aD12b2lkIDAseWg9dm9pZCAwLHpoPXZvaWQgMDt3aD1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1iLmNoaWxkO251bGwhPT1jOyl7aWYoNT09PWMudGFnfHw2PT09Yy50YWcpYS5hcHBlbmRDaGlsZChjLnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09Yy50YWcmJm51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YilicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YilyZXR1cm47Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX07eGg9ZnVuY3Rpb24oKXt9O1xueWg9ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1hLm1lbW9pemVkUHJvcHM7aWYoZiE9PWQpe3ZhciBnPWIuc3RhdGVOb2RlO09mKExmLmN1cnJlbnQpO2E9bnVsbDtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6Zj16YyhnLGYpO2Q9emMoZyxkKTthPVtdO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpmPWRlKGcsZik7ZD1kZShnLGQpO2E9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmY9cCh7fSxmLHt2YWx1ZTp2b2lkIDB9KTtkPXAoe30sZCx7dmFsdWU6dm9pZCAwfSk7YT1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpmPWZlKGcsZik7ZD1mZShnLGQpO2E9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgZi5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoZy5vbmNsaWNrPXhlKX11ZShjLGQpO2c9Yz12b2lkIDA7dmFyIGg9bnVsbDtmb3IoYyBpbiBmKWlmKCFkLmhhc093blByb3BlcnR5KGMpJiZmLmhhc093blByb3BlcnR5KGMpJiZudWxsIT1mW2NdKWlmKFwic3R5bGVcIj09PVxuYyl7dmFyIGw9ZltjXTtmb3IoZyBpbiBsKWwuaGFzT3duUHJvcGVydHkoZykmJihofHwoaD17fSksaFtnXT1cIlwiKX1lbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09YyYmXCJjaGlsZHJlblwiIT09YyYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWMmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1jJiZcImF1dG9Gb2N1c1wiIT09YyYmKHRhLmhhc093blByb3BlcnR5KGMpP2F8fChhPVtdKTooYT1hfHxbXSkucHVzaChjLG51bGwpKTtmb3IoYyBpbiBkKXt2YXIgaz1kW2NdO2w9bnVsbCE9Zj9mW2NdOnZvaWQgMDtpZihkLmhhc093blByb3BlcnR5KGMpJiZrIT09bCYmKG51bGwhPWt8fG51bGwhPWwpKWlmKFwic3R5bGVcIj09PWMpaWYobCl7Zm9yKGcgaW4gbCkhbC5oYXNPd25Qcm9wZXJ0eShnKXx8ayYmay5oYXNPd25Qcm9wZXJ0eShnKXx8KGh8fChoPXt9KSxoW2ddPVwiXCIpO2ZvcihnIGluIGspay5oYXNPd25Qcm9wZXJ0eShnKSYmbFtnXSE9PWtbZ10mJihofHxcbihoPXt9KSxoW2ddPWtbZ10pfWVsc2UgaHx8KGF8fChhPVtdKSxhLnB1c2goYyxoKSksaD1rO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1jPyhrPWs/ay5fX2h0bWw6dm9pZCAwLGw9bD9sLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmbCE9PWsmJihhPWF8fFtdKS5wdXNoKGMsXCJcIitrKSk6XCJjaGlsZHJlblwiPT09Yz9sPT09a3x8XCJzdHJpbmdcIiE9PXR5cGVvZiBrJiZcIm51bWJlclwiIT09dHlwZW9mIGt8fChhPWF8fFtdKS5wdXNoKGMsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09YyYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWMmJih0YS5oYXNPd25Qcm9wZXJ0eShjKT8obnVsbCE9ayYmd2UoZSxjKSxhfHxsPT09a3x8KGE9W10pKTooYT1hfHxbXSkucHVzaChjLGspKX1oJiYoYT1hfHxbXSkucHVzaChcInN0eWxlXCIsaCk7ZT1hOyhiLnVwZGF0ZVF1ZXVlPWUpJiZzaChiKX19O3poPWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiZzaChiKX07XG52YXIgQWg9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtTZXQ/V2Vha1NldDpTZXQ7ZnVuY3Rpb24gQmgoYSxiKXt2YXIgYz1iLnNvdXJjZSxkPWIuc3RhY2s7bnVsbD09PWQmJm51bGwhPT1jJiYoZD1uYyhjKSk7bnVsbCE9PWMmJm1jKGMudHlwZSk7Yj1iLnZhbHVlO251bGwhPT1hJiYxPT09YS50YWcmJm1jKGEudHlwZSk7dHJ5e2NvbnNvbGUuZXJyb3IoYil9Y2F0Y2goZSl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGU7fSl9fWZ1bmN0aW9uIENoKGEpe3ZhciBiPWEucmVmO2lmKG51bGwhPT1iKWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXRyeXtiKG51bGwpfWNhdGNoKGMpe0RoKGEsYyl9ZWxzZSBiLmN1cnJlbnQ9bnVsbH1cbmZ1bmN0aW9uIEVoKGEsYixjKXtjPWMudXBkYXRlUXVldWU7Yz1udWxsIT09Yz9jLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yyl7dmFyIGQ9Yz1jLm5leHQ7ZG97aWYoKGQudGFnJmEpIT09VGYpe3ZhciBlPWQuZGVzdHJveTtkLmRlc3Ryb3k9dm9pZCAwO3ZvaWQgMCE9PWUmJmUoKX0oZC50YWcmYikhPT1UZiYmKGU9ZC5jcmVhdGUsZC5kZXN0cm95PWUoKSk7ZD1kLm5leHR9d2hpbGUoZCE9PWMpfX1cbmZ1bmN0aW9uIEZoKGEsYil7Zm9yKHZhciBjPWE7Oyl7aWYoNT09PWMudGFnKXt2YXIgZD1jLnN0YXRlTm9kZTtpZihiKWQuc3R5bGUuZGlzcGxheT1cIm5vbmVcIjtlbHNle2Q9Yy5zdGF0ZU5vZGU7dmFyIGU9Yy5tZW1vaXplZFByb3BzLnN0eWxlO2U9dm9pZCAwIT09ZSYmbnVsbCE9PWUmJmUuaGFzT3duUHJvcGVydHkoXCJkaXNwbGF5XCIpP2UuZGlzcGxheTpudWxsO2Quc3R5bGUuZGlzcGxheT1yZShcImRpc3BsYXlcIixlKX19ZWxzZSBpZig2PT09Yy50YWcpYy5zdGF0ZU5vZGUubm9kZVZhbHVlPWI/XCJcIjpjLm1lbW9pemVkUHJvcHM7ZWxzZSBpZigxMz09PWMudGFnJiZudWxsIT09Yy5tZW1vaXplZFN0YXRlKXtkPWMuY2hpbGQuc2libGluZztkLnJldHVybj1jO2M9ZDtjb250aW51ZX1lbHNlIGlmKG51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YSlicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fFxuYy5yZXR1cm49PT1hKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fVxuZnVuY3Rpb24gR2goYSl7XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlJiZXZShhKTtzd2l0Y2goYS50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTp2YXIgYj1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iJiYoYj1iLmxhc3RFZmZlY3QsbnVsbCE9PWIpKXt2YXIgYz1iPWIubmV4dDtkb3t2YXIgZD1jLmRlc3Ryb3k7aWYodm9pZCAwIT09ZCl7dmFyIGU9YTt0cnl7ZCgpfWNhdGNoKGYpe0RoKGUsZil9fWM9Yy5uZXh0fXdoaWxlKGMhPT1iKX1icmVhaztjYXNlIDE6Q2goYSk7Yj1hLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsVW5tb3VudCl0cnl7Yi5wcm9wcz1hLm1lbW9pemVkUHJvcHMsYi5zdGF0ZT1hLm1lbW9pemVkU3RhdGUsYi5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKGYpe0RoKGEsZil9YnJlYWs7Y2FzZSA1OkNoKGEpO2JyZWFrO2Nhc2UgNDpIaChhKX19XG5mdW5jdGlvbiBJaChhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31cbmZ1bmN0aW9uIEpoKGEpe2E6e2Zvcih2YXIgYj1hLnJldHVybjtudWxsIT09Yjspe2lmKEloKGIpKXt2YXIgYz1iO2JyZWFrIGF9Yj1iLnJldHVybn10KFwiMTYwXCIpO2M9dm9pZCAwfXZhciBkPWI9dm9pZCAwO3N3aXRjaChjLnRhZyl7Y2FzZSA1OmI9Yy5zdGF0ZU5vZGU7ZD0hMTticmVhaztjYXNlIDM6Yj1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7Y2FzZSA0OmI9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2RlZmF1bHQ6dChcIjE2MVwiKX1jLmVmZmVjdFRhZyYxNiYmKG9lKGIsXCJcIiksYy5lZmZlY3RUYWcmPS0xNyk7YTpiOmZvcihjPWE7Oyl7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxJaChjLnJldHVybikpe2M9bnVsbDticmVhayBhfWM9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtmb3IoYz1jLnNpYmxpbmc7NSE9PWMudGFnJiY2IT09Yy50YWc7KXtpZihjLmVmZmVjdFRhZyYyKWNvbnRpbnVlIGI7XG5pZihudWxsPT09Yy5jaGlsZHx8ND09PWMudGFnKWNvbnRpbnVlIGI7ZWxzZSBjLmNoaWxkLnJldHVybj1jLGM9Yy5jaGlsZH1pZighKGMuZWZmZWN0VGFnJjIpKXtjPWMuc3RhdGVOb2RlO2JyZWFrIGF9fWZvcih2YXIgZT1hOzspe2lmKDU9PT1lLnRhZ3x8Nj09PWUudGFnKWlmKGMpaWYoZCl7dmFyIGY9YixnPWUuc3RhdGVOb2RlLGg9Yzs4PT09Zi5ub2RlVHlwZT9mLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGcsaCk6Zi5pbnNlcnRCZWZvcmUoZyxoKX1lbHNlIGIuaW5zZXJ0QmVmb3JlKGUuc3RhdGVOb2RlLGMpO2Vsc2UgZD8oZz1iLGg9ZS5zdGF0ZU5vZGUsOD09PWcubm9kZVR5cGU/KGY9Zy5wYXJlbnROb2RlLGYuaW5zZXJ0QmVmb3JlKGgsZykpOihmPWcsZi5hcHBlbmRDaGlsZChoKSksZz1nLl9yZWFjdFJvb3RDb250YWluZXIsbnVsbCE9PWcmJnZvaWQgMCE9PWd8fG51bGwhPT1mLm9uY2xpY2t8fChmLm9uY2xpY2s9eGUpKTpiLmFwcGVuZENoaWxkKGUuc3RhdGVOb2RlKTtcbmVsc2UgaWYoNCE9PWUudGFnJiZudWxsIT09ZS5jaGlsZCl7ZS5jaGlsZC5yZXR1cm49ZTtlPWUuY2hpbGQ7Y29udGludWV9aWYoZT09PWEpYnJlYWs7Zm9yKDtudWxsPT09ZS5zaWJsaW5nOyl7aWYobnVsbD09PWUucmV0dXJufHxlLnJldHVybj09PWEpcmV0dXJuO2U9ZS5yZXR1cm59ZS5zaWJsaW5nLnJldHVybj1lLnJldHVybjtlPWUuc2libGluZ319XG5mdW5jdGlvbiBIaChhKXtmb3IodmFyIGI9YSxjPSExLGQ9dm9pZCAwLGU9dm9pZCAwOzspe2lmKCFjKXtjPWIucmV0dXJuO2E6Zm9yKDs7KXtudWxsPT09Yz90KFwiMTYwXCIpOnZvaWQgMDtzd2l0Y2goYy50YWcpe2Nhc2UgNTpkPWMuc3RhdGVOb2RlO2U9ITE7YnJlYWsgYTtjYXNlIDM6ZD1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2U9ITA7YnJlYWsgYTtjYXNlIDQ6ZD1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2U9ITA7YnJlYWsgYX1jPWMucmV0dXJufWM9ITB9aWYoNT09PWIudGFnfHw2PT09Yi50YWcpe2E6Zm9yKHZhciBmPWIsZz1mOzspaWYoR2goZyksbnVsbCE9PWcuY2hpbGQmJjQhPT1nLnRhZylnLmNoaWxkLnJldHVybj1nLGc9Zy5jaGlsZDtlbHNle2lmKGc9PT1mKWJyZWFrO2Zvcig7bnVsbD09PWcuc2libGluZzspe2lmKG51bGw9PT1nLnJldHVybnx8Zy5yZXR1cm49PT1mKWJyZWFrIGE7Zz1nLnJldHVybn1nLnNpYmxpbmcucmV0dXJuPWcucmV0dXJuO2c9Zy5zaWJsaW5nfWU/XG4oZj1kLGc9Yi5zdGF0ZU5vZGUsOD09PWYubm9kZVR5cGU/Zi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGcpOmYucmVtb3ZlQ2hpbGQoZykpOmQucmVtb3ZlQ2hpbGQoYi5zdGF0ZU5vZGUpfWVsc2UgaWYoND09PWIudGFnPyhkPWIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8sZT0hMCk6R2goYiksbnVsbCE9PWIuY2hpbGQpe2IuY2hpbGQucmV0dXJuPWI7Yj1iLmNoaWxkO2NvbnRpbnVlfWlmKGI9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybjtiPWIucmV0dXJuOzQ9PT1iLnRhZyYmKGM9ITEpfWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fVxuZnVuY3Rpb24gS2goYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpFaChWZixXZixiKTticmVhaztjYXNlIDE6YnJlYWs7Y2FzZSA1OnZhciBjPWIuc3RhdGVOb2RlO2lmKG51bGwhPWMpe3ZhciBkPWIubWVtb2l6ZWRQcm9wczthPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpkO3ZhciBlPWIudHlwZSxmPWIudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT1udWxsO251bGwhPT1mJiZHZShjLGYsZSxhLGQsYil9YnJlYWs7Y2FzZSA2Om51bGw9PT1iLnN0YXRlTm9kZT90KFwiMTYyXCIpOnZvaWQgMDtiLnN0YXRlTm9kZS5ub2RlVmFsdWU9Yi5tZW1vaXplZFByb3BzO2JyZWFrO2Nhc2UgMzpicmVhaztjYXNlIDEyOmJyZWFrO2Nhc2UgMTM6Yz1iLm1lbW9pemVkU3RhdGU7ZD12b2lkIDA7YT1iO251bGw9PT1jP2Q9ITE6KGQ9ITAsYT1iLmNoaWxkLDA9PT1jLnRpbWVkT3V0QXQmJihjLnRpbWVkT3V0QXQ9cGYoKSkpO251bGwhPT1hJiZGaChhLGQpO2M9XG5iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1jKXtiLnVwZGF0ZVF1ZXVlPW51bGw7dmFyIGc9Yi5zdGF0ZU5vZGU7bnVsbD09PWcmJihnPWIuc3RhdGVOb2RlPW5ldyBBaCk7Yy5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBjPUxoLmJpbmQobnVsbCxiLGEpO2cuaGFzKGEpfHwoZy5hZGQoYSksYS50aGVuKGMsYykpfSl9YnJlYWs7Y2FzZSAxNzpicmVhaztkZWZhdWx0OnQoXCIxNjNcIil9fXZhciBNaD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha01hcD9XZWFrTWFwOk1hcDtmdW5jdGlvbiBOaChhLGIsYyl7Yz1yZihjKTtjLnRhZz1paDtjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7T2goZCk7QmgoYSxiKX07cmV0dXJuIGN9XG5mdW5jdGlvbiBQaChhLGIsYyl7Yz1yZihjKTtjLnRhZz1paDt2YXIgZD1hLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgZT1iLnZhbHVlO2MucGF5bG9hZD1mdW5jdGlvbigpe3JldHVybiBkKGUpfX12YXIgZj1hLnN0YXRlTm9kZTtudWxsIT09ZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuY29tcG9uZW50RGlkQ2F0Y2gmJihjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7XCJmdW5jdGlvblwiIT09dHlwZW9mIGQmJihudWxsPT09UWg/UWg9bmV3IFNldChbdGhpc10pOlFoLmFkZCh0aGlzKSk7dmFyIGM9Yi52YWx1ZSxlPWIuc3RhY2s7QmgoYSxiKTt0aGlzLmNvbXBvbmVudERpZENhdGNoKGMse2NvbXBvbmVudFN0YWNrOm51bGwhPT1lP2U6XCJcIn0pfSk7cmV0dXJuIGN9XG5mdW5jdGlvbiBSaChhKXtzd2l0Y2goYS50YWcpe2Nhc2UgMTpNKGEudHlwZSkmJlBlKGEpO3ZhciBiPWEuZWZmZWN0VGFnO3JldHVybiBiJjIwNDg/KGEuZWZmZWN0VGFnPWImLTIwNDl8NjQsYSk6bnVsbDtjYXNlIDM6cmV0dXJuIFFmKGEpLFFlKGEpLGI9YS5lZmZlY3RUYWcsMCE9PShiJjY0KT90KFwiMjg1XCIpOnZvaWQgMCxhLmVmZmVjdFRhZz1iJi0yMDQ5fDY0LGE7Y2FzZSA1OnJldHVybiBTZihhKSxudWxsO2Nhc2UgMTM6cmV0dXJuIGI9YS5lZmZlY3RUYWcsYiYyMDQ4PyhhLmVmZmVjdFRhZz1iJi0yMDQ5fDY0LGEpOm51bGw7Y2FzZSA0OnJldHVybiBRZihhKSxudWxsO2Nhc2UgMTA6cmV0dXJuIGdoKGEpLG51bGw7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG52YXIgU2g9WGIuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixUaD1YYi5SZWFjdEN1cnJlbnRPd25lcixVaD0xMDczNzQxODIyLFZoPTAsV2g9ITEsVD1udWxsLFhoPW51bGwsVT0wLFloPS0xLFpoPSExLFY9bnVsbCwkaD0hMSxhaT1udWxsLGJpPW51bGwsY2k9bnVsbCxRaD1udWxsO2Z1bmN0aW9uIGRpKCl7aWYobnVsbCE9PVQpZm9yKHZhciBhPVQucmV0dXJuO251bGwhPT1hOyl7dmFyIGI9YTtzd2l0Y2goYi50YWcpe2Nhc2UgMTp2YXIgYz1iLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCE9PWMmJnZvaWQgMCE9PWMmJlBlKGIpO2JyZWFrO2Nhc2UgMzpRZihiKTtRZShiKTticmVhaztjYXNlIDU6U2YoYik7YnJlYWs7Y2FzZSA0OlFmKGIpO2JyZWFrO2Nhc2UgMTA6Z2goYil9YT1hLnJldHVybn1YaD1udWxsO1U9MDtZaD0tMTtaaD0hMTtUPW51bGx9XG5mdW5jdGlvbiBlaShhLGIpe2NpPWJpPWFpPW51bGw7dmFyIGM9VztXPSEwO2Rve2lmKGIuZWZmZWN0VGFnJjUxMil7dmFyIGQ9ITEsZT12b2lkIDA7dHJ5e3ZhciBmPWI7RWgoJGYsVGYsZik7RWgoVGYsWmYsZil9Y2F0Y2goZyl7ZD0hMCxlPWd9ZCYmRGgoYixlKX1iPWIubmV4dEVmZmVjdH13aGlsZShudWxsIT09Yik7Vz1jO2M9YS5leHBpcmF0aW9uVGltZTswIT09YyYmZmkoYSxjKX1mdW5jdGlvbiBzZigpe251bGwhPT1iaSYmRmUoYmkpO251bGwhPT1jaSYmY2koKX1cbmZ1bmN0aW9uIGdpKGEpe2Zvcig7Oyl7dmFyIGI9YS5hbHRlcm5hdGUsYz1hLnJldHVybixkPWEuc2libGluZztpZigwPT09KGEuZWZmZWN0VGFnJjEwMjQpKXtUPWE7YTp7dmFyIGU9YjtiPWE7dmFyIGY9VTt2YXIgZz1iLnBlbmRpbmdQcm9wcztzd2l0Y2goYi50YWcpe2Nhc2UgMjpicmVhaztjYXNlIDE2OmJyZWFrO2Nhc2UgMTU6Y2FzZSAwOmJyZWFrO2Nhc2UgMTpNKGIudHlwZSkmJlBlKGIpO2JyZWFrO2Nhc2UgMzpRZihiKTtRZShiKTtnPWIuc3RhdGVOb2RlO2cucGVuZGluZ0NvbnRleHQmJihnLmNvbnRleHQ9Zy5wZW5kaW5nQ29udGV4dCxnLnBlbmRpbmdDb250ZXh0PW51bGwpO2lmKG51bGw9PT1lfHxudWxsPT09ZS5jaGlsZClNZyhiKSxiLmVmZmVjdFRhZyY9LTM7eGgoYik7YnJlYWs7Y2FzZSA1OlNmKGIpO3ZhciBoPU9mKE5mLmN1cnJlbnQpO2Y9Yi50eXBlO2lmKG51bGwhPT1lJiZudWxsIT1iLnN0YXRlTm9kZSl5aChlLGIsZixnLGgpLGUucmVmIT09Yi5yZWYmJihiLmVmZmVjdFRhZ3w9XG4xMjgpO2Vsc2UgaWYoZyl7dmFyIGw9T2YoTGYuY3VycmVudCk7aWYoTWcoYikpe2c9YjtlPWcuc3RhdGVOb2RlO3ZhciBrPWcudHlwZSxtPWcubWVtb2l6ZWRQcm9wcyxxPWg7ZVtIYV09ZztlW0lhXT1tO2Y9dm9pZCAwO2g9aztzd2l0Y2goaCl7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpIKFwibG9hZFwiLGUpO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihrPTA7azxjYi5sZW5ndGg7aysrKUgoY2Jba10sZSk7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkgoXCJlcnJvclwiLGUpO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkgoXCJlcnJvclwiLGUpO0goXCJsb2FkXCIsZSk7YnJlYWs7Y2FzZSBcImZvcm1cIjpIKFwicmVzZXRcIixlKTtIKFwic3VibWl0XCIsZSk7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpIKFwidG9nZ2xlXCIsZSk7YnJlYWs7Y2FzZSBcImlucHV0XCI6QWMoZSxtKTtIKFwiaW52YWxpZFwiLGUpO3dlKHEsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwic2VsZWN0XCI6ZS5fd3JhcHBlclN0YXRlPVxue3dhc011bHRpcGxlOiEhbS5tdWx0aXBsZX07SChcImludmFsaWRcIixlKTt3ZShxLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6Z2UoZSxtKSxIKFwiaW52YWxpZFwiLGUpLHdlKHEsXCJvbkNoYW5nZVwiKX11ZShoLG0pO2s9bnVsbDtmb3IoZiBpbiBtKW0uaGFzT3duUHJvcGVydHkoZikmJihsPW1bZl0sXCJjaGlsZHJlblwiPT09Zj9cInN0cmluZ1wiPT09dHlwZW9mIGw/ZS50ZXh0Q29udGVudCE9PWwmJihrPVtcImNoaWxkcmVuXCIsbF0pOlwibnVtYmVyXCI9PT10eXBlb2YgbCYmZS50ZXh0Q29udGVudCE9PVwiXCIrbCYmKGs9W1wiY2hpbGRyZW5cIixcIlwiK2xdKTp0YS5oYXNPd25Qcm9wZXJ0eShmKSYmbnVsbCE9bCYmd2UocSxmKSk7c3dpdGNoKGgpe2Nhc2UgXCJpbnB1dFwiOlZiKGUpO0VjKGUsbSwhMCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6VmIoZSk7aWUoZSxtKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIG0ub25DbGljayYmXG4oZS5vbmNsaWNrPXhlKX1mPWs7Zy51cGRhdGVRdWV1ZT1mO2c9bnVsbCE9PWY/ITA6ITE7ZyYmc2goYil9ZWxzZXttPWI7ZT1mO3E9ZztrPTk9PT1oLm5vZGVUeXBlP2g6aC5vd25lckRvY3VtZW50O2w9PT1qZS5odG1sJiYobD1rZShlKSk7bD09PWplLmh0bWw/XCJzY3JpcHRcIj09PWU/KGU9ay5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGUuaW5uZXJIVE1MPVwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCIsaz1lLnJlbW92ZUNoaWxkKGUuZmlyc3RDaGlsZCkpOlwic3RyaW5nXCI9PT10eXBlb2YgcS5pcz9rPWsuY3JlYXRlRWxlbWVudChlLHtpczpxLmlzfSk6KGs9ay5jcmVhdGVFbGVtZW50KGUpLFwic2VsZWN0XCI9PT1lJiZxLm11bHRpcGxlJiYoay5tdWx0aXBsZT0hMCkpOms9ay5jcmVhdGVFbGVtZW50TlMobCxlKTtlPWs7ZVtIYV09bTtlW0lhXT1nO3doKGUsYiwhMSwhMSk7cT1lO2s9ZjttPWc7dmFyIHg9aCxDPXZlKGssbSk7c3dpdGNoKGspe2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6SChcImxvYWRcIixcbnEpO2g9bTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoaD0wO2g8Y2IubGVuZ3RoO2grKylIKGNiW2hdLHEpO2g9bTticmVhaztjYXNlIFwic291cmNlXCI6SChcImVycm9yXCIscSk7aD1tO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkgoXCJlcnJvclwiLHEpO0goXCJsb2FkXCIscSk7aD1tO2JyZWFrO2Nhc2UgXCJmb3JtXCI6SChcInJlc2V0XCIscSk7SChcInN1Ym1pdFwiLHEpO2g9bTticmVhaztjYXNlIFwiZGV0YWlsc1wiOkgoXCJ0b2dnbGVcIixxKTtoPW07YnJlYWs7Y2FzZSBcImlucHV0XCI6QWMocSxtKTtoPXpjKHEsbSk7SChcImludmFsaWRcIixxKTt3ZSh4LFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmg9ZGUocSxtKTticmVhaztjYXNlIFwic2VsZWN0XCI6cS5fd3JhcHBlclN0YXRlPXt3YXNNdWx0aXBsZTohIW0ubXVsdGlwbGV9O2g9cCh7fSxtLHt2YWx1ZTp2b2lkIDB9KTtIKFwiaW52YWxpZFwiLHEpO3dlKHgsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpnZShxLFxubSk7aD1mZShxLG0pO0goXCJpbnZhbGlkXCIscSk7d2UoeCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2RlZmF1bHQ6aD1tfXVlKGssaCk7bD12b2lkIDA7dmFyIHc9ayxFPXEsdj1oO2ZvcihsIGluIHYpaWYodi5oYXNPd25Qcm9wZXJ0eShsKSl7dmFyIG49dltsXTtcInN0eWxlXCI9PT1sP3NlKEUsbik6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09bD8obj1uP24uX19odG1sOnZvaWQgMCxudWxsIT1uJiZuZShFLG4pKTpcImNoaWxkcmVuXCI9PT1sP1wic3RyaW5nXCI9PT10eXBlb2Ygbj8oXCJ0ZXh0YXJlYVwiIT09d3x8XCJcIiE9PW4pJiZvZShFLG4pOlwibnVtYmVyXCI9PT10eXBlb2YgbiYmb2UoRSxcIlwiK24pOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1sJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09bCYmXCJhdXRvRm9jdXNcIiE9PWwmJih0YS5oYXNPd25Qcm9wZXJ0eShsKT9udWxsIT1uJiZ3ZSh4LGwpOm51bGwhPW4mJnhjKEUsbCxuLEMpKX1zd2l0Y2goayl7Y2FzZSBcImlucHV0XCI6VmIocSk7XG5FYyhxLG0sITEpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZiKHEpO2llKHEsbSk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOm51bGwhPW0udmFsdWUmJnEuc2V0QXR0cmlidXRlKFwidmFsdWVcIixcIlwiK3ljKG0udmFsdWUpKTticmVhaztjYXNlIFwic2VsZWN0XCI6aD1xO2gubXVsdGlwbGU9ISFtLm11bHRpcGxlO3E9bS52YWx1ZTtudWxsIT1xP2VlKGgsISFtLm11bHRpcGxlLHEsITEpOm51bGwhPW0uZGVmYXVsdFZhbHVlJiZlZShoLCEhbS5tdWx0aXBsZSxtLmRlZmF1bHRWYWx1ZSwhMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgaC5vbkNsaWNrJiYocS5vbmNsaWNrPXhlKX0oZz1BZShmLGcpKSYmc2goYik7Yi5zdGF0ZU5vZGU9ZX1udWxsIT09Yi5yZWYmJihiLmVmZmVjdFRhZ3w9MTI4KX1lbHNlIG51bGw9PT1iLnN0YXRlTm9kZT90KFwiMTY2XCIpOnZvaWQgMDticmVhaztjYXNlIDY6ZSYmbnVsbCE9Yi5zdGF0ZU5vZGU/emgoZSxiLGUubWVtb2l6ZWRQcm9wcyxnKTooXCJzdHJpbmdcIiE9PVxudHlwZW9mIGcmJihudWxsPT09Yi5zdGF0ZU5vZGU/dChcIjE2NlwiKTp2b2lkIDApLGU9T2YoTmYuY3VycmVudCksT2YoTGYuY3VycmVudCksTWcoYik/KGc9YixmPWcuc3RhdGVOb2RlLGU9Zy5tZW1vaXplZFByb3BzLGZbSGFdPWcsKGc9Zi5ub2RlVmFsdWUhPT1lKSYmc2goYikpOihmPWIsZz0oOT09PWUubm9kZVR5cGU/ZTplLm93bmVyRG9jdW1lbnQpLmNyZWF0ZVRleHROb2RlKGcpLGdbSGFdPWIsZi5zdGF0ZU5vZGU9ZykpO2JyZWFrO2Nhc2UgMTE6YnJlYWs7Y2FzZSAxMzpnPWIubWVtb2l6ZWRTdGF0ZTtpZigwIT09KGIuZWZmZWN0VGFnJjY0KSl7Yi5leHBpcmF0aW9uVGltZT1mO1Q9YjticmVhayBhfWc9bnVsbCE9PWc7Zj1udWxsIT09ZSYmbnVsbCE9PWUubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmIWcmJmYmJihlPWUuY2hpbGQuc2libGluZyxudWxsIT09ZSYmKGg9Yi5maXJzdEVmZmVjdCxudWxsIT09aD8oYi5maXJzdEVmZmVjdD1lLGUubmV4dEVmZmVjdD1oKTooYi5maXJzdEVmZmVjdD1cbmIubGFzdEVmZmVjdD1lLGUubmV4dEVmZmVjdD1udWxsKSxlLmVmZmVjdFRhZz04KSk7aWYoZ3x8ZiliLmVmZmVjdFRhZ3w9NDticmVhaztjYXNlIDc6YnJlYWs7Y2FzZSA4OmJyZWFrO2Nhc2UgMTI6YnJlYWs7Y2FzZSA0OlFmKGIpO3hoKGIpO2JyZWFrO2Nhc2UgMTA6Z2goYik7YnJlYWs7Y2FzZSA5OmJyZWFrO2Nhc2UgMTQ6YnJlYWs7Y2FzZSAxNzpNKGIudHlwZSkmJlBlKGIpO2JyZWFrO2RlZmF1bHQ6dChcIjE1NlwiKX1UPW51bGx9Yj1hO2lmKDE9PT1VfHwxIT09Yi5jaGlsZEV4cGlyYXRpb25UaW1lKXtnPTA7Zm9yKGY9Yi5jaGlsZDtudWxsIT09ZjspZT1mLmV4cGlyYXRpb25UaW1lLGg9Zi5jaGlsZEV4cGlyYXRpb25UaW1lLGU+ZyYmKGc9ZSksaD5nJiYoZz1oKSxmPWYuc2libGluZztiLmNoaWxkRXhwaXJhdGlvblRpbWU9Z31pZihudWxsIT09VClyZXR1cm4gVDtudWxsIT09YyYmMD09PShjLmVmZmVjdFRhZyYxMDI0KSYmKG51bGw9PT1jLmZpcnN0RWZmZWN0JiYoYy5maXJzdEVmZmVjdD1cbmEuZmlyc3RFZmZlY3QpLG51bGwhPT1hLmxhc3RFZmZlY3QmJihudWxsIT09Yy5sYXN0RWZmZWN0JiYoYy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YS5maXJzdEVmZmVjdCksYy5sYXN0RWZmZWN0PWEubGFzdEVmZmVjdCksMTxhLmVmZmVjdFRhZyYmKG51bGwhPT1jLmxhc3RFZmZlY3Q/Yy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YTpjLmZpcnN0RWZmZWN0PWEsYy5sYXN0RWZmZWN0PWEpKX1lbHNle2E9UmgoYSxVKTtpZihudWxsIT09YSlyZXR1cm4gYS5lZmZlY3RUYWcmPTEwMjMsYTtudWxsIT09YyYmKGMuZmlyc3RFZmZlY3Q9Yy5sYXN0RWZmZWN0PW51bGwsYy5lZmZlY3RUYWd8PTEwMjQpfWlmKG51bGwhPT1kKXJldHVybiBkO2lmKG51bGwhPT1jKWE9YztlbHNlIGJyZWFrfXJldHVybiBudWxsfVxuZnVuY3Rpb24gaGkoYSl7dmFyIGI9YWgoYS5hbHRlcm5hdGUsYSxVKTthLm1lbW9pemVkUHJvcHM9YS5wZW5kaW5nUHJvcHM7bnVsbD09PWImJihiPWdpKGEpKTtUaC5jdXJyZW50PW51bGw7cmV0dXJuIGJ9XG5mdW5jdGlvbiBpaShhLGIpe1doP3QoXCIyNDNcIik6dm9pZCAwO3NmKCk7V2g9ITA7dmFyIGM9U2guY3VycmVudDtTaC5jdXJyZW50PXJnO3ZhciBkPWEubmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT247aWYoZCE9PVV8fGEhPT1YaHx8bnVsbD09PVQpZGkoKSxYaD1hLFU9ZCxUPWJmKFhoLmN1cnJlbnQsbnVsbCxVKSxhLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT0wO3ZhciBlPSExO2Rve3RyeXtpZihiKWZvcig7bnVsbCE9PVQmJiFqaSgpOylUPWhpKFQpO2Vsc2UgZm9yKDtudWxsIT09VDspVD1oaShUKX1jYXRjaChFKXtpZihmaD1laD1kaD1udWxsLHNnKCksbnVsbD09PVQpZT0hMCxPaChFKTtlbHNle251bGw9PT1UP3QoXCIyNzFcIik6dm9pZCAwO3ZhciBmPVQsZz1mLnJldHVybjtpZihudWxsPT09ZyllPSEwLE9oKEUpO2Vsc2V7YTp7dmFyIGg9YSxsPWcsaz1mLG09RTtnPVU7ay5lZmZlY3RUYWd8PTEwMjQ7ay5maXJzdEVmZmVjdD1rLmxhc3RFZmZlY3Q9bnVsbDtpZihudWxsIT09XG5tJiZcIm9iamVjdFwiPT09dHlwZW9mIG0mJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBtLnRoZW4pe3ZhciBxPW07bT1sO3ZhciB4PS0xLEM9LTE7ZG97aWYoMTM9PT1tLnRhZyl7dmFyIHc9bS5hbHRlcm5hdGU7aWYobnVsbCE9PXcmJih3PXcubWVtb2l6ZWRTdGF0ZSxudWxsIT09dykpe0M9MTAqKDEwNzM3NDE4MjItdy50aW1lZE91dEF0KTticmVha313PW0ucGVuZGluZ1Byb3BzLm1heER1cmF0aW9uO2lmKFwibnVtYmVyXCI9PT10eXBlb2YgdylpZigwPj13KXg9MDtlbHNlIGlmKC0xPT09eHx8dzx4KXg9d31tPW0ucmV0dXJufXdoaWxlKG51bGwhPT1tKTttPWw7ZG97aWYodz0xMz09PW0udGFnKXc9dm9pZCAwPT09bS5tZW1vaXplZFByb3BzLmZhbGxiYWNrPyExOm51bGw9PT1tLm1lbW9pemVkU3RhdGU7aWYodyl7bD1tLnVwZGF0ZVF1ZXVlO251bGw9PT1sPyhsPW5ldyBTZXQsbC5hZGQocSksbS51cGRhdGVRdWV1ZT1sKTpsLmFkZChxKTtpZigwPT09KG0ubW9kZSYxKSl7bS5lZmZlY3RUYWd8PVxuNjQ7ay5lZmZlY3RUYWcmPS0xOTU3OzE9PT1rLnRhZyYmKG51bGw9PT1rLmFsdGVybmF0ZT9rLnRhZz0xNzooZz1yZigxMDczNzQxODIzKSxnLnRhZz13Zix0ZihrLGcpKSk7ay5leHBpcmF0aW9uVGltZT0xMDczNzQxODIzO2JyZWFrIGF9az1oLnBpbmdDYWNoZTtudWxsPT09az8oaz1oLnBpbmdDYWNoZT1uZXcgTWgsbD1uZXcgU2V0LGsuc2V0KHEsbCkpOihsPWsuZ2V0KHEpLHZvaWQgMD09PWwmJihsPW5ldyBTZXQsay5zZXQocSxsKSkpO2wuaGFzKGcpfHwobC5hZGQoZyksaz1raS5iaW5kKG51bGwsaCxxLGcpLHEudGhlbihrLGspKTstMT09PXg/aD0xMDczNzQxODIzOigtMT09PUMmJihDPTEwKigxMDczNzQxODIyLWxmKGgsZykpLTVFMyksaD1DK3gpOzA8PWgmJlloPGgmJihZaD1oKTttLmVmZmVjdFRhZ3w9MjA0ODttLmV4cGlyYXRpb25UaW1lPWc7YnJlYWsgYX1tPW0ucmV0dXJufXdoaWxlKG51bGwhPT1tKTttPUVycm9yKChtYyhrLnR5cGUpfHxcIkEgUmVhY3QgY29tcG9uZW50XCIpK1xuXCIgc3VzcGVuZGVkIHdoaWxlIHJlbmRlcmluZywgYnV0IG5vIGZhbGxiYWNrIFVJIHdhcyBzcGVjaWZpZWQuXFxuXFxuQWRkIGEgPFN1c3BlbnNlIGZhbGxiYWNrPS4uLj4gY29tcG9uZW50IGhpZ2hlciBpbiB0aGUgdHJlZSB0byBwcm92aWRlIGEgbG9hZGluZyBpbmRpY2F0b3Igb3IgcGxhY2Vob2xkZXIgdG8gZGlzcGxheS5cIituYyhrKSl9Wmg9ITA7bT1yaChtLGspO2g9bDtkb3tzd2l0Y2goaC50YWcpe2Nhc2UgMzpoLmVmZmVjdFRhZ3w9MjA0ODtoLmV4cGlyYXRpb25UaW1lPWc7Zz1OaChoLG0sZyk7bWgoaCxnKTticmVhayBhO2Nhc2UgMTppZihxPW0seD1oLnR5cGUsQz1oLnN0YXRlTm9kZSwwPT09KGguZWZmZWN0VGFnJjY0KSYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiB4LmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8bnVsbCE9PUMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBDLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVFofHwhUWguaGFzKEMpKSkpe2guZWZmZWN0VGFnfD0yMDQ4O1xuaC5leHBpcmF0aW9uVGltZT1nO2c9UGgoaCxxLGcpO21oKGgsZyk7YnJlYWsgYX19aD1oLnJldHVybn13aGlsZShudWxsIT09aCl9VD1naShmKTtjb250aW51ZX19fWJyZWFrfXdoaWxlKDEpO1doPSExO1NoLmN1cnJlbnQ9YztmaD1laD1kaD1udWxsO3NnKCk7aWYoZSlYaD1udWxsLGEuZmluaXNoZWRXb3JrPW51bGw7ZWxzZSBpZihudWxsIT09VClhLmZpbmlzaGVkV29yaz1udWxsO2Vsc2V7Yz1hLmN1cnJlbnQuYWx0ZXJuYXRlO251bGw9PT1jP3QoXCIyODFcIik6dm9pZCAwO1hoPW51bGw7aWYoWmgpe2U9YS5sYXRlc3RQZW5kaW5nVGltZTtmPWEubGF0ZXN0U3VzcGVuZGVkVGltZTtnPWEubGF0ZXN0UGluZ2VkVGltZTtpZigwIT09ZSYmZTxkfHwwIT09ZiYmZjxkfHwwIT09ZyYmZzxkKXtrZihhLGQpO2xpKGEsYyxkLGEuZXhwaXJhdGlvblRpbWUsLTEpO3JldHVybn1pZighYS5kaWRFcnJvciYmYil7YS5kaWRFcnJvcj0hMDtkPWEubmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT249ZDtcbmI9YS5leHBpcmF0aW9uVGltZT0xMDczNzQxODIzO2xpKGEsYyxkLGIsLTEpO3JldHVybn19YiYmLTEhPT1ZaD8oa2YoYSxkKSxiPTEwKigxMDczNzQxODIyLWxmKGEsZCkpLGI8WWgmJihZaD1iKSxiPTEwKigxMDczNzQxODIyLXBmKCkpLGI9WWgtYixsaShhLGMsZCxhLmV4cGlyYXRpb25UaW1lLDA+Yj8wOmIpKTooYS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9ZCxhLmZpbmlzaGVkV29yaz1jKX19XG5mdW5jdGlvbiBEaChhLGIpe2Zvcih2YXIgYz1hLnJldHVybjtudWxsIT09Yzspe3N3aXRjaChjLnRhZyl7Y2FzZSAxOnZhciBkPWMuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1RaHx8IVFoLmhhcyhkKSkpe2E9cmgoYixhKTthPVBoKGMsYSwxMDczNzQxODIzKTt0ZihjLGEpO3VmKGMsMTA3Mzc0MTgyMyk7cmV0dXJufWJyZWFrO2Nhc2UgMzphPXJoKGIsYSk7YT1OaChjLGEsMTA3Mzc0MTgyMyk7dGYoYyxhKTt1ZihjLDEwNzM3NDE4MjMpO3JldHVybn1jPWMucmV0dXJufTM9PT1hLnRhZyYmKGM9cmgoYixhKSxjPU5oKGEsYywxMDczNzQxODIzKSx0ZihhLGMpLHVmKGEsMTA3Mzc0MTgyMykpfVxuZnVuY3Rpb24gcWYoYSxiKXswIT09Vmg/YT1WaDpXaD9hPSRoPzEwNzM3NDE4MjM6VTpiLm1vZGUmMT8oYT1taT8xMDczNzQxODIyLTEwKigoKDEwNzM3NDE4MjItYSsxNSkvMTB8MCkrMSk6MTA3Mzc0MTgyMi0yNSooKCgxMDczNzQxODIyLWErNTAwKS8yNXwwKSsxKSxudWxsIT09WGgmJmE9PT1VJiYtLWEpOmE9MTA3Mzc0MTgyMzttaSYmKDA9PT1uaXx8YTxuaSkmJihuaT1hKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIGtpKGEsYixjKXt2YXIgZD1hLnBpbmdDYWNoZTtudWxsIT09ZCYmZC5kZWxldGUoYik7aWYobnVsbCE9PVhoJiZVPT09YylYaD1udWxsO2Vsc2UgaWYoYj1hLmVhcmxpZXN0U3VzcGVuZGVkVGltZSxkPWEubGF0ZXN0U3VzcGVuZGVkVGltZSwwIT09YiYmYzw9YiYmYz49ZCl7YS5kaWRFcnJvcj0hMTtiPWEubGF0ZXN0UGluZ2VkVGltZTtpZigwPT09Ynx8Yj5jKWEubGF0ZXN0UGluZ2VkVGltZT1jO2pmKGMsYSk7Yz1hLmV4cGlyYXRpb25UaW1lOzAhPT1jJiZmaShhLGMpfX1mdW5jdGlvbiBMaChhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO251bGwhPT1jJiZjLmRlbGV0ZShiKTtiPXBmKCk7Yj1xZihiLGEpO2E9b2koYSxiKTtudWxsIT09YSYmKGhmKGEsYiksYj1hLmV4cGlyYXRpb25UaW1lLDAhPT1iJiZmaShhLGIpKX1cbmZ1bmN0aW9uIG9pKGEsYil7YS5leHBpcmF0aW9uVGltZTxiJiYoYS5leHBpcmF0aW9uVGltZT1iKTt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmYy5leHBpcmF0aW9uVGltZTxiJiYoYy5leHBpcmF0aW9uVGltZT1iKTt2YXIgZD1hLnJldHVybixlPW51bGw7aWYobnVsbD09PWQmJjM9PT1hLnRhZyllPWEuc3RhdGVOb2RlO2Vsc2UgZm9yKDtudWxsIT09ZDspe2M9ZC5hbHRlcm5hdGU7ZC5jaGlsZEV4cGlyYXRpb25UaW1lPGImJihkLmNoaWxkRXhwaXJhdGlvblRpbWU9Yik7bnVsbCE9PWMmJmMuY2hpbGRFeHBpcmF0aW9uVGltZTxiJiYoYy5jaGlsZEV4cGlyYXRpb25UaW1lPWIpO2lmKG51bGw9PT1kLnJldHVybiYmMz09PWQudGFnKXtlPWQuc3RhdGVOb2RlO2JyZWFrfWQ9ZC5yZXR1cm59cmV0dXJuIGV9XG5mdW5jdGlvbiB1ZihhLGIpe2E9b2koYSxiKTtudWxsIT09YSYmKCFXaCYmMCE9PVUmJmI+VSYmZGkoKSxoZihhLGIpLFdoJiYhJGgmJlhoPT09YXx8ZmkoYSxhLmV4cGlyYXRpb25UaW1lKSxwaT5xaSYmKHBpPTAsdChcIjE4NVwiKSkpfWZ1bmN0aW9uIHJpKGEsYixjLGQsZSl7dmFyIGY9Vmg7Vmg9MTA3Mzc0MTgyMzt0cnl7cmV0dXJuIGEoYixjLGQsZSl9ZmluYWxseXtWaD1mfX12YXIgc2k9bnVsbCxYPW51bGwsdGk9MCx1aT12b2lkIDAsVz0hMSx2aT1udWxsLFk9MCxuaT0wLHdpPSExLHhpPW51bGwsWj0hMSx5aT0hMSxtaT0hMSx6aT1udWxsLEFpPWJhLnVuc3RhYmxlX25vdygpLEJpPTEwNzM3NDE4MjItKEFpLzEwfDApLENpPUJpLHFpPTUwLHBpPTAsRGk9bnVsbDtmdW5jdGlvbiBFaSgpe0JpPTEwNzM3NDE4MjItKChiYS51bnN0YWJsZV9ub3coKS1BaSkvMTB8MCl9XG5mdW5jdGlvbiBGaShhLGIpe2lmKDAhPT10aSl7aWYoYjx0aSlyZXR1cm47bnVsbCE9PXVpJiZiYS51bnN0YWJsZV9jYW5jZWxDYWxsYmFjayh1aSl9dGk9YjthPWJhLnVuc3RhYmxlX25vdygpLUFpO3VpPWJhLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2soR2kse3RpbWVvdXQ6MTAqKDEwNzM3NDE4MjItYiktYX0pfWZ1bmN0aW9uIGxpKGEsYixjLGQsZSl7YS5leHBpcmF0aW9uVGltZT1kOzAhPT1lfHxqaSgpPzA8ZSYmKGEudGltZW91dEhhbmRsZT1DZShIaS5iaW5kKG51bGwsYSxiLGMpLGUpKTooYS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9YyxhLmZpbmlzaGVkV29yaz1iKX1mdW5jdGlvbiBIaShhLGIsYyl7YS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9YzthLmZpbmlzaGVkV29yaz1iO0VpKCk7Q2k9Qmk7SWkoYSxjKX1mdW5jdGlvbiBwZigpe2lmKFcpcmV0dXJuIENpO0ppKCk7aWYoMD09PVl8fDE9PT1ZKUVpKCksQ2k9Qmk7cmV0dXJuIENpfVxuZnVuY3Rpb24gZmkoYSxiKXtudWxsPT09YS5uZXh0U2NoZWR1bGVkUm9vdD8oYS5leHBpcmF0aW9uVGltZT1iLG51bGw9PT1YPyhzaT1YPWEsYS5uZXh0U2NoZWR1bGVkUm9vdD1hKTooWD1YLm5leHRTY2hlZHVsZWRSb290PWEsWC5uZXh0U2NoZWR1bGVkUm9vdD1zaSkpOmI+YS5leHBpcmF0aW9uVGltZSYmKGEuZXhwaXJhdGlvblRpbWU9Yik7V3x8KFo/eWkmJih2aT1hLFk9MTA3Mzc0MTgyMyxLaShhLDEwNzM3NDE4MjMsITEpKToxMDczNzQxODIzPT09Yj9MaSgxMDczNzQxODIzLCExKTpGaShhLGIpKX1cbmZ1bmN0aW9uIEppKCl7dmFyIGE9MCxiPW51bGw7aWYobnVsbCE9PVgpZm9yKHZhciBjPVgsZD1zaTtudWxsIT09ZDspe3ZhciBlPWQuZXhwaXJhdGlvblRpbWU7aWYoMD09PWUpe251bGw9PT1jfHxudWxsPT09WD90KFwiMjQ0XCIpOnZvaWQgMDtpZihkPT09ZC5uZXh0U2NoZWR1bGVkUm9vdCl7c2k9WD1kLm5leHRTY2hlZHVsZWRSb290PW51bGw7YnJlYWt9ZWxzZSBpZihkPT09c2kpc2k9ZT1kLm5leHRTY2hlZHVsZWRSb290LFgubmV4dFNjaGVkdWxlZFJvb3Q9ZSxkLm5leHRTY2hlZHVsZWRSb290PW51bGw7ZWxzZSBpZihkPT09WCl7WD1jO1gubmV4dFNjaGVkdWxlZFJvb3Q9c2k7ZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2JyZWFrfWVsc2UgYy5uZXh0U2NoZWR1bGVkUm9vdD1kLm5leHRTY2hlZHVsZWRSb290LGQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDtkPWMubmV4dFNjaGVkdWxlZFJvb3R9ZWxzZXtlPmEmJihhPWUsYj1kKTtpZihkPT09WClicmVhaztpZigxMDczNzQxODIzPT09XG5hKWJyZWFrO2M9ZDtkPWQubmV4dFNjaGVkdWxlZFJvb3R9fXZpPWI7WT1hfXZhciBNaT0hMTtmdW5jdGlvbiBqaSgpe3JldHVybiBNaT8hMDpiYS51bnN0YWJsZV9zaG91bGRZaWVsZCgpP01pPSEwOiExfWZ1bmN0aW9uIEdpKCl7dHJ5e2lmKCFqaSgpJiZudWxsIT09c2kpe0VpKCk7dmFyIGE9c2k7ZG97dmFyIGI9YS5leHBpcmF0aW9uVGltZTswIT09YiYmQmk8PWImJihhLm5leHRFeHBpcmF0aW9uVGltZVRvV29ya09uPUJpKTthPWEubmV4dFNjaGVkdWxlZFJvb3R9d2hpbGUoYSE9PXNpKX1MaSgwLCEwKX1maW5hbGx5e01pPSExfX1cbmZ1bmN0aW9uIExpKGEsYil7SmkoKTtpZihiKWZvcihFaSgpLENpPUJpO251bGwhPT12aSYmMCE9PVkmJmE8PVkmJiEoTWkmJkJpPlkpOylLaSh2aSxZLEJpPlkpLEppKCksRWkoKSxDaT1CaTtlbHNlIGZvcig7bnVsbCE9PXZpJiYwIT09WSYmYTw9WTspS2kodmksWSwhMSksSmkoKTtiJiYodGk9MCx1aT1udWxsKTswIT09WSYmRmkodmksWSk7cGk9MDtEaT1udWxsO2lmKG51bGwhPT16aSlmb3IoYT16aSx6aT1udWxsLGI9MDtiPGEubGVuZ3RoO2IrKyl7dmFyIGM9YVtiXTt0cnl7Yy5fb25Db21wbGV0ZSgpfWNhdGNoKGQpe3dpfHwod2k9ITAseGk9ZCl9fWlmKHdpKXRocm93IGE9eGkseGk9bnVsbCx3aT0hMSxhO31mdW5jdGlvbiBJaShhLGIpe1c/dChcIjI1M1wiKTp2b2lkIDA7dmk9YTtZPWI7S2koYSxiLCExKTtMaSgxMDczNzQxODIzLCExKX1cbmZ1bmN0aW9uIEtpKGEsYixjKXtXP3QoXCIyNDVcIik6dm9pZCAwO1c9ITA7aWYoYyl7dmFyIGQ9YS5maW5pc2hlZFdvcms7bnVsbCE9PWQ/T2koYSxkLGIpOihhLmZpbmlzaGVkV29yaz1udWxsLGQ9YS50aW1lb3V0SGFuZGxlLC0xIT09ZCYmKGEudGltZW91dEhhbmRsZT0tMSxEZShkKSksaWkoYSxjKSxkPWEuZmluaXNoZWRXb3JrLG51bGwhPT1kJiYoamkoKT9hLmZpbmlzaGVkV29yaz1kOk9pKGEsZCxiKSkpfWVsc2UgZD1hLmZpbmlzaGVkV29yayxudWxsIT09ZD9PaShhLGQsYik6KGEuZmluaXNoZWRXb3JrPW51bGwsZD1hLnRpbWVvdXRIYW5kbGUsLTEhPT1kJiYoYS50aW1lb3V0SGFuZGxlPS0xLERlKGQpKSxpaShhLGMpLGQ9YS5maW5pc2hlZFdvcmssbnVsbCE9PWQmJk9pKGEsZCxiKSk7Vz0hMX1cbmZ1bmN0aW9uIE9pKGEsYixjKXt2YXIgZD1hLmZpcnN0QmF0Y2g7aWYobnVsbCE9PWQmJmQuX2V4cGlyYXRpb25UaW1lPj1jJiYobnVsbD09PXppP3ppPVtkXTp6aS5wdXNoKGQpLGQuX2RlZmVyKSl7YS5maW5pc2hlZFdvcms9YjthLmV4cGlyYXRpb25UaW1lPTA7cmV0dXJufWEuZmluaXNoZWRXb3JrPW51bGw7YT09PURpP3BpKys6KERpPWEscGk9MCk7JGg9V2g9ITA7YS5jdXJyZW50PT09Yj90KFwiMTc3XCIpOnZvaWQgMDtjPWEucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lOzA9PT1jP3QoXCIyNjFcIik6dm9pZCAwO2EucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPTA7ZD1iLmV4cGlyYXRpb25UaW1lO3ZhciBlPWIuY2hpbGRFeHBpcmF0aW9uVGltZTtkPWU+ZD9lOmQ7YS5kaWRFcnJvcj0hMTswPT09ZD8oYS5lYXJsaWVzdFBlbmRpbmdUaW1lPTAsYS5sYXRlc3RQZW5kaW5nVGltZT0wLGEuZWFybGllc3RTdXNwZW5kZWRUaW1lPTAsYS5sYXRlc3RTdXNwZW5kZWRUaW1lPTAsYS5sYXRlc3RQaW5nZWRUaW1lPVxuMCk6KGQ8YS5sYXRlc3RQaW5nZWRUaW1lJiYoYS5sYXRlc3RQaW5nZWRUaW1lPTApLGU9YS5sYXRlc3RQZW5kaW5nVGltZSwwIT09ZSYmKGU+ZD9hLmVhcmxpZXN0UGVuZGluZ1RpbWU9YS5sYXRlc3RQZW5kaW5nVGltZT0wOmEuZWFybGllc3RQZW5kaW5nVGltZT5kJiYoYS5lYXJsaWVzdFBlbmRpbmdUaW1lPWEubGF0ZXN0UGVuZGluZ1RpbWUpKSxlPWEuZWFybGllc3RTdXNwZW5kZWRUaW1lLDA9PT1lP2hmKGEsZCk6ZDxhLmxhdGVzdFN1c3BlbmRlZFRpbWU/KGEuZWFybGllc3RTdXNwZW5kZWRUaW1lPTAsYS5sYXRlc3RTdXNwZW5kZWRUaW1lPTAsYS5sYXRlc3RQaW5nZWRUaW1lPTAsaGYoYSxkKSk6ZD5lJiZoZihhLGQpKTtqZigwLGEpO1RoLmN1cnJlbnQ9bnVsbDsxPGIuZWZmZWN0VGFnP251bGwhPT1iLmxhc3RFZmZlY3Q/KGIubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWIsZD1iLmZpcnN0RWZmZWN0KTpkPWI6ZD1iLmZpcnN0RWZmZWN0O3llPUhkO2U9VGQoKTtpZihVZChlKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW5cbmUpdmFyIGY9e3N0YXJ0OmUuc2VsZWN0aW9uU3RhcnQsZW5kOmUuc2VsZWN0aW9uRW5kfTtlbHNlIGE6e2Y9KGY9ZS5vd25lckRvY3VtZW50KSYmZi5kZWZhdWx0Vmlld3x8d2luZG93O3ZhciBnPWYuZ2V0U2VsZWN0aW9uJiZmLmdldFNlbGVjdGlvbigpO2lmKGcmJjAhPT1nLnJhbmdlQ291bnQpe2Y9Zy5hbmNob3JOb2RlO3ZhciBoPWcuYW5jaG9yT2Zmc2V0LGw9Zy5mb2N1c05vZGU7Zz1nLmZvY3VzT2Zmc2V0O3RyeXtmLm5vZGVUeXBlLGwubm9kZVR5cGV9Y2F0Y2godWIpe2Y9bnVsbDticmVhayBhfXZhciBrPTAsbT0tMSxxPS0xLHg9MCxDPTAsdz1lLEU9bnVsbDtiOmZvcig7Oyl7Zm9yKHZhciB2Ozspe3chPT1mfHwwIT09aCYmMyE9PXcubm9kZVR5cGV8fChtPWsraCk7dyE9PWx8fDAhPT1nJiYzIT09dy5ub2RlVHlwZXx8KHE9aytnKTszPT09dy5ub2RlVHlwZSYmKGsrPXcubm9kZVZhbHVlLmxlbmd0aCk7aWYobnVsbD09PSh2PXcuZmlyc3RDaGlsZCkpYnJlYWs7RT13O3c9dn1mb3IoOzspe2lmKHc9PT1cbmUpYnJlYWsgYjtFPT09ZiYmKyt4PT09aCYmKG09ayk7RT09PWwmJisrQz09PWcmJihxPWspO2lmKG51bGwhPT0odj13Lm5leHRTaWJsaW5nKSlicmVhazt3PUU7RT13LnBhcmVudE5vZGV9dz12fWY9LTE9PT1tfHwtMT09PXE/bnVsbDp7c3RhcnQ6bSxlbmQ6cX19ZWxzZSBmPW51bGx9Zj1mfHx7c3RhcnQ6MCxlbmQ6MH19ZWxzZSBmPW51bGw7emU9e2ZvY3VzZWRFbGVtOmUsc2VsZWN0aW9uUmFuZ2U6Zn07SGQ9ITE7Zm9yKFY9ZDtudWxsIT09Vjspe2U9ITE7Zj12b2lkIDA7dHJ5e2Zvcig7bnVsbCE9PVY7KXtpZihWLmVmZmVjdFRhZyYyNTYpYTp7dmFyIG49Vi5hbHRlcm5hdGU7aD1WO3N3aXRjaChoLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpFaChVZixUZixoKTticmVhayBhO2Nhc2UgMTppZihoLmVmZmVjdFRhZyYyNTYmJm51bGwhPT1uKXt2YXIgdT1uLm1lbW9pemVkUHJvcHMsej1uLm1lbW9pemVkU3RhdGUsQWc9aC5zdGF0ZU5vZGUsTmk9QWcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoaC5lbGVtZW50VHlwZT09PVxuaC50eXBlP3U6UChoLnR5cGUsdSkseik7QWcuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGU9Tml9YnJlYWsgYTtjYXNlIDM6Y2FzZSA1OmNhc2UgNjpjYXNlIDQ6Y2FzZSAxNzpicmVhayBhO2RlZmF1bHQ6dChcIjE2M1wiKX19Vj1WLm5leHRFZmZlY3R9fWNhdGNoKHViKXtlPSEwLGY9dWJ9ZSYmKG51bGw9PT1WP3QoXCIxNzhcIik6dm9pZCAwLERoKFYsZiksbnVsbCE9PVYmJihWPVYubmV4dEVmZmVjdCkpfWZvcihWPWQ7bnVsbCE9PVY7KXtuPSExO3U9dm9pZCAwO3RyeXtmb3IoO251bGwhPT1WOyl7dmFyIHk9Vi5lZmZlY3RUYWc7eSYxNiYmb2UoVi5zdGF0ZU5vZGUsXCJcIik7aWYoeSYxMjgpe3ZhciBCPVYuYWx0ZXJuYXRlO2lmKG51bGwhPT1CKXt2YXIgcj1CLnJlZjtudWxsIT09ciYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiByP3IobnVsbCk6ci5jdXJyZW50PW51bGwpfX1zd2l0Y2goeSYxNCl7Y2FzZSAyOkpoKFYpO1YuZWZmZWN0VGFnJj0tMzticmVhaztjYXNlIDY6SmgoVik7XG5WLmVmZmVjdFRhZyY9LTM7S2goVi5hbHRlcm5hdGUsVik7YnJlYWs7Y2FzZSA0OktoKFYuYWx0ZXJuYXRlLFYpO2JyZWFrO2Nhc2UgODp6PVY7SGgoeik7ei5yZXR1cm49bnVsbDt6LmNoaWxkPW51bGw7ei5tZW1vaXplZFN0YXRlPW51bGw7ei51cGRhdGVRdWV1ZT1udWxsO3ZhciBPPXouYWx0ZXJuYXRlO251bGwhPT1PJiYoTy5yZXR1cm49bnVsbCxPLmNoaWxkPW51bGwsTy5tZW1vaXplZFN0YXRlPW51bGwsTy51cGRhdGVRdWV1ZT1udWxsKX1WPVYubmV4dEVmZmVjdH19Y2F0Y2godWIpe249ITAsdT11Yn1uJiYobnVsbD09PVY/dChcIjE3OFwiKTp2b2lkIDAsRGgoVix1KSxudWxsIT09ViYmKFY9Vi5uZXh0RWZmZWN0KSl9cj16ZTtCPVRkKCk7eT1yLmZvY3VzZWRFbGVtO249ci5zZWxlY3Rpb25SYW5nZTtpZihCIT09eSYmeSYmeS5vd25lckRvY3VtZW50JiZTZCh5Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LHkpKXtudWxsIT09biYmVWQoeSkmJihCPW4uc3RhcnQscj1uLmVuZCxcbnZvaWQgMD09PXImJihyPUIpLFwic2VsZWN0aW9uU3RhcnRcImluIHk/KHkuc2VsZWN0aW9uU3RhcnQ9Qix5LnNlbGVjdGlvbkVuZD1NYXRoLm1pbihyLHkudmFsdWUubGVuZ3RoKSk6KHI9KEI9eS5vd25lckRvY3VtZW50fHxkb2N1bWVudCkmJkIuZGVmYXVsdFZpZXd8fHdpbmRvdyxyLmdldFNlbGVjdGlvbiYmKHI9ci5nZXRTZWxlY3Rpb24oKSx1PXkudGV4dENvbnRlbnQubGVuZ3RoLE89TWF0aC5taW4obi5zdGFydCx1KSxuPXZvaWQgMD09PW4uZW5kP086TWF0aC5taW4obi5lbmQsdSksIXIuZXh0ZW5kJiZPPm4mJih1PW4sbj1PLE89dSksdT1SZCh5LE8pLHo9UmQoeSxuKSx1JiZ6JiYoMSE9PXIucmFuZ2VDb3VudHx8ci5hbmNob3JOb2RlIT09dS5ub2RlfHxyLmFuY2hvck9mZnNldCE9PXUub2Zmc2V0fHxyLmZvY3VzTm9kZSE9PXoubm9kZXx8ci5mb2N1c09mZnNldCE9PXoub2Zmc2V0KSYmKEI9Qi5jcmVhdGVSYW5nZSgpLEIuc2V0U3RhcnQodS5ub2RlLHUub2Zmc2V0KSxyLnJlbW92ZUFsbFJhbmdlcygpLFxuTz5uPyhyLmFkZFJhbmdlKEIpLHIuZXh0ZW5kKHoubm9kZSx6Lm9mZnNldCkpOihCLnNldEVuZCh6Lm5vZGUsei5vZmZzZXQpLHIuYWRkUmFuZ2UoQikpKSkpKTtCPVtdO2ZvcihyPXk7cj1yLnBhcmVudE5vZGU7KTE9PT1yLm5vZGVUeXBlJiZCLnB1c2goe2VsZW1lbnQ6cixsZWZ0OnIuc2Nyb2xsTGVmdCx0b3A6ci5zY3JvbGxUb3B9KTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgeS5mb2N1cyYmeS5mb2N1cygpO2Zvcih5PTA7eTxCLmxlbmd0aDt5Kyspcj1CW3ldLHIuZWxlbWVudC5zY3JvbGxMZWZ0PXIubGVmdCxyLmVsZW1lbnQuc2Nyb2xsVG9wPXIudG9wfXplPW51bGw7SGQ9ISF5ZTt5ZT1udWxsO2EuY3VycmVudD1iO2ZvcihWPWQ7bnVsbCE9PVY7KXt5PSExO0I9dm9pZCAwO3RyeXtmb3Iocj1hLE89YztudWxsIT09Vjspe3ZhciBxYT1WLmVmZmVjdFRhZztpZihxYSYzNil7dmFyIFJiPVYuYWx0ZXJuYXRlO249Vjt1PU87c3dpdGNoKG4udGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OkVoKFhmLFxuWWYsbik7YnJlYWs7Y2FzZSAxOnZhciBpZD1uLnN0YXRlTm9kZTtpZihuLmVmZmVjdFRhZyY0KWlmKG51bGw9PT1SYilpZC5jb21wb25lbnREaWRNb3VudCgpO2Vsc2V7dmFyIGRqPW4uZWxlbWVudFR5cGU9PT1uLnR5cGU/UmIubWVtb2l6ZWRQcm9wczpQKG4udHlwZSxSYi5tZW1vaXplZFByb3BzKTtpZC5jb21wb25lbnREaWRVcGRhdGUoZGosUmIubWVtb2l6ZWRTdGF0ZSxpZC5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSl9dmFyIHRoPW4udXBkYXRlUXVldWU7bnVsbCE9PXRoJiZwaChuLHRoLGlkLHUpO2JyZWFrO2Nhc2UgMzp2YXIgdWg9bi51cGRhdGVRdWV1ZTtpZihudWxsIT09dWgpe3o9bnVsbDtpZihudWxsIT09bi5jaGlsZClzd2l0Y2gobi5jaGlsZC50YWcpe2Nhc2UgNTp6PW4uY2hpbGQuc3RhdGVOb2RlO2JyZWFrO2Nhc2UgMTp6PW4uY2hpbGQuc3RhdGVOb2RlfXBoKG4sdWgseix1KX1icmVhaztjYXNlIDU6dmFyIGVqPW4uc3RhdGVOb2RlO251bGw9PT1cblJiJiZuLmVmZmVjdFRhZyY0JiZBZShuLnR5cGUsbi5tZW1vaXplZFByb3BzKSYmZWouZm9jdXMoKTticmVhaztjYXNlIDY6YnJlYWs7Y2FzZSA0OmJyZWFrO2Nhc2UgMTI6YnJlYWs7Y2FzZSAxMzpicmVhaztjYXNlIDE3OmJyZWFrO2RlZmF1bHQ6dChcIjE2M1wiKX19aWYocWEmMTI4KXt2YXIgamQ9Vi5yZWY7aWYobnVsbCE9PWpkKXt2YXIgdmg9Vi5zdGF0ZU5vZGU7c3dpdGNoKFYudGFnKXtjYXNlIDU6dmFyIE5lPXZoO2JyZWFrO2RlZmF1bHQ6TmU9dmh9XCJmdW5jdGlvblwiPT09dHlwZW9mIGpkP2pkKE5lKTpqZC5jdXJyZW50PU5lfX1xYSY1MTImJihhaT1yKTtWPVYubmV4dEVmZmVjdH19Y2F0Y2godWIpe3k9ITAsQj11Yn15JiYobnVsbD09PVY/dChcIjE3OFwiKTp2b2lkIDAsRGgoVixCKSxudWxsIT09ViYmKFY9Vi5uZXh0RWZmZWN0KSl9bnVsbCE9PWQmJm51bGwhPT1haSYmKHFhPWVpLmJpbmQobnVsbCxhLGQpLGJpPUVlKHFhKSxjaT1xYSk7V2g9JGg9ITE7XCJmdW5jdGlvblwiPT09XG50eXBlb2YgVmUmJlZlKGIuc3RhdGVOb2RlKTtxYT1iLmV4cGlyYXRpb25UaW1lO2I9Yi5jaGlsZEV4cGlyYXRpb25UaW1lO2I9Yj5xYT9iOnFhOzA9PT1iJiYoUWg9bnVsbCk7YS5leHBpcmF0aW9uVGltZT1iO2EuZmluaXNoZWRXb3JrPW51bGx9ZnVuY3Rpb24gT2goYSl7bnVsbD09PXZpP3QoXCIyNDZcIik6dm9pZCAwO3ZpLmV4cGlyYXRpb25UaW1lPTA7d2l8fCh3aT0hMCx4aT1hKX1mdW5jdGlvbiBQaShhLGIpe3ZhciBjPVo7Wj0hMDt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXsoWj1jKXx8V3x8TGkoMTA3Mzc0MTgyMywhMSl9fWZ1bmN0aW9uIFFpKGEsYil7aWYoWiYmIXlpKXt5aT0hMDt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXt5aT0hMX19cmV0dXJuIGEoYil9XG5mdW5jdGlvbiBSaShhLGIsYyl7aWYobWkpcmV0dXJuIGEoYixjKTtafHxXfHwwPT09bml8fChMaShuaSwhMSksbmk9MCk7dmFyIGQ9bWksZT1aO1o9bWk9ITA7dHJ5e3JldHVybiBhKGIsYyl9ZmluYWxseXttaT1kLChaPWUpfHxXfHxMaSgxMDczNzQxODIzLCExKX19XG5mdW5jdGlvbiBTaShhLGIsYyxkLGUpe3ZhciBmPWIuY3VycmVudDthOmlmKGMpe2M9Yy5fcmVhY3RJbnRlcm5hbEZpYmVyO2I6ezI9PT1rZChjKSYmMT09PWMudGFnP3ZvaWQgMDp0KFwiMTcwXCIpO3ZhciBnPWM7ZG97c3dpdGNoKGcudGFnKXtjYXNlIDM6Zz1nLnN0YXRlTm9kZS5jb250ZXh0O2JyZWFrIGI7Y2FzZSAxOmlmKE0oZy50eXBlKSl7Zz1nLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDticmVhayBifX1nPWcucmV0dXJufXdoaWxlKG51bGwhPT1nKTt0KFwiMTcxXCIpO2c9dm9pZCAwfWlmKDE9PT1jLnRhZyl7dmFyIGg9Yy50eXBlO2lmKE0oaCkpe2M9U2UoYyxoLGcpO2JyZWFrIGF9fWM9Z31lbHNlIGM9TGU7bnVsbD09PWIuY29udGV4dD9iLmNvbnRleHQ9YzpiLnBlbmRpbmdDb250ZXh0PWM7Yj1lO2U9cmYoZCk7ZS5wYXlsb2FkPXtlbGVtZW50OmF9O2I9dm9pZCAwPT09Yj9udWxsOmI7bnVsbCE9PWImJihlLmNhbGxiYWNrPWIpO1xuc2YoKTt0ZihmLGUpO3VmKGYsZCk7cmV0dXJuIGR9ZnVuY3Rpb24gVGkoYSxiLGMsZCl7dmFyIGU9Yi5jdXJyZW50LGY9cGYoKTtlPXFmKGYsZSk7cmV0dXJuIFNpKGEsYixjLGUsZCl9ZnVuY3Rpb24gVWkoYSl7YT1hLmN1cnJlbnQ7aWYoIWEuY2hpbGQpcmV0dXJuIG51bGw7c3dpdGNoKGEuY2hpbGQudGFnKXtjYXNlIDU6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlO2RlZmF1bHQ6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlfX1mdW5jdGlvbiBWaShhLGIsYyl7dmFyIGQ9Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7cmV0dXJueyQkdHlwZW9mOiRiLGtleTpudWxsPT1kP251bGw6XCJcIitkLGNoaWxkcmVuOmEsY29udGFpbmVySW5mbzpiLGltcGxlbWVudGF0aW9uOmN9fVxuRGI9ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpDYyhhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9Yy5wYXJlbnROb2RlO2M9Yy5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZT1cIitKU09OLnN0cmluZ2lmeShcIlwiK2IpKyddW3R5cGU9XCJyYWRpb1wiXScpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspe3ZhciBkPWNbYl07aWYoZCE9PWEmJmQuZm9ybT09PWEuZm9ybSl7dmFyIGU9TWEoZCk7ZT92b2lkIDA6dChcIjkwXCIpO1diKGQpO0NjKGQsZSl9fX1icmVhaztjYXNlIFwidGV4dGFyZWFcIjpoZShhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMudmFsdWUsbnVsbCE9YiYmZWUoYSwhIWMubXVsdGlwbGUsYiwhMSl9fTtcbmZ1bmN0aW9uIFdpKGEpe3ZhciBiPTEwNzM3NDE4MjItMjUqKCgoMTA3Mzc0MTgyMi1wZigpKzUwMCkvMjV8MCkrMSk7Yj49VWgmJihiPVVoLTEpO3RoaXMuX2V4cGlyYXRpb25UaW1lPVVoPWI7dGhpcy5fcm9vdD1hO3RoaXMuX2NhbGxiYWNrcz10aGlzLl9uZXh0PW51bGw7dGhpcy5faGFzQ2hpbGRyZW49dGhpcy5fZGlkQ29tcGxldGU9ITE7dGhpcy5fY2hpbGRyZW49bnVsbDt0aGlzLl9kZWZlcj0hMH1XaS5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEpe3RoaXMuX2RlZmVyP3ZvaWQgMDp0KFwiMjUwXCIpO3RoaXMuX2hhc0NoaWxkcmVuPSEwO3RoaXMuX2NoaWxkcmVuPWE7dmFyIGI9dGhpcy5fcm9vdC5faW50ZXJuYWxSb290LGM9dGhpcy5fZXhwaXJhdGlvblRpbWUsZD1uZXcgWGk7U2koYSxiLG51bGwsYyxkLl9vbkNvbW1pdCk7cmV0dXJuIGR9O1xuV2kucHJvdG90eXBlLnRoZW49ZnVuY3Rpb24oYSl7aWYodGhpcy5fZGlkQ29tcGxldGUpYSgpO2Vsc2V7dmFyIGI9dGhpcy5fY2FsbGJhY2tzO251bGw9PT1iJiYoYj10aGlzLl9jYWxsYmFja3M9W10pO2IucHVzaChhKX19O1xuV2kucHJvdG90eXBlLmNvbW1pdD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuX3Jvb3QuX2ludGVybmFsUm9vdCxiPWEuZmlyc3RCYXRjaDt0aGlzLl9kZWZlciYmbnVsbCE9PWI/dm9pZCAwOnQoXCIyNTFcIik7aWYodGhpcy5faGFzQ2hpbGRyZW4pe3ZhciBjPXRoaXMuX2V4cGlyYXRpb25UaW1lO2lmKGIhPT10aGlzKXt0aGlzLl9oYXNDaGlsZHJlbiYmKGM9dGhpcy5fZXhwaXJhdGlvblRpbWU9Yi5fZXhwaXJhdGlvblRpbWUsdGhpcy5yZW5kZXIodGhpcy5fY2hpbGRyZW4pKTtmb3IodmFyIGQ9bnVsbCxlPWI7ZSE9PXRoaXM7KWQ9ZSxlPWUuX25leHQ7bnVsbD09PWQ/dChcIjI1MVwiKTp2b2lkIDA7ZC5fbmV4dD1lLl9uZXh0O3RoaXMuX25leHQ9YjthLmZpcnN0QmF0Y2g9dGhpc310aGlzLl9kZWZlcj0hMTtJaShhLGMpO2I9dGhpcy5fbmV4dDt0aGlzLl9uZXh0PW51bGw7Yj1hLmZpcnN0QmF0Y2g9YjtudWxsIT09YiYmYi5faGFzQ2hpbGRyZW4mJmIucmVuZGVyKGIuX2NoaWxkcmVuKX1lbHNlIHRoaXMuX25leHQ9XG5udWxsLHRoaXMuX2RlZmVyPSExfTtXaS5wcm90b3R5cGUuX29uQ29tcGxldGU9ZnVuY3Rpb24oKXtpZighdGhpcy5fZGlkQ29tcGxldGUpe3RoaXMuX2RpZENvbXBsZXRlPSEwO3ZhciBhPXRoaXMuX2NhbGxiYWNrcztpZihudWxsIT09YSlmb3IodmFyIGI9MDtiPGEubGVuZ3RoO2IrKykoMCxhW2JdKSgpfX07ZnVuY3Rpb24gWGkoKXt0aGlzLl9jYWxsYmFja3M9bnVsbDt0aGlzLl9kaWRDb21taXQ9ITE7dGhpcy5fb25Db21taXQ9dGhpcy5fb25Db21taXQuYmluZCh0aGlzKX1YaS5wcm90b3R5cGUudGhlbj1mdW5jdGlvbihhKXtpZih0aGlzLl9kaWRDb21taXQpYSgpO2Vsc2V7dmFyIGI9dGhpcy5fY2FsbGJhY2tzO251bGw9PT1iJiYoYj10aGlzLl9jYWxsYmFja3M9W10pO2IucHVzaChhKX19O1xuWGkucHJvdG90eXBlLl9vbkNvbW1pdD1mdW5jdGlvbigpe2lmKCF0aGlzLl9kaWRDb21taXQpe3RoaXMuX2RpZENvbW1pdD0hMDt2YXIgYT10aGlzLl9jYWxsYmFja3M7aWYobnVsbCE9PWEpZm9yKHZhciBiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBjPWFbYl07XCJmdW5jdGlvblwiIT09dHlwZW9mIGM/dChcIjE5MVwiLGMpOnZvaWQgMDtjKCl9fX07XG5mdW5jdGlvbiBZaShhLGIsYyl7Yj1OKDMsbnVsbCxudWxsLGI/MzowKTthPXtjdXJyZW50OmIsY29udGFpbmVySW5mbzphLHBlbmRpbmdDaGlsZHJlbjpudWxsLHBpbmdDYWNoZTpudWxsLGVhcmxpZXN0UGVuZGluZ1RpbWU6MCxsYXRlc3RQZW5kaW5nVGltZTowLGVhcmxpZXN0U3VzcGVuZGVkVGltZTowLGxhdGVzdFN1c3BlbmRlZFRpbWU6MCxsYXRlc3RQaW5nZWRUaW1lOjAsZGlkRXJyb3I6ITEscGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lOjAsZmluaXNoZWRXb3JrOm51bGwsdGltZW91dEhhbmRsZTotMSxjb250ZXh0Om51bGwscGVuZGluZ0NvbnRleHQ6bnVsbCxoeWRyYXRlOmMsbmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT246MCxleHBpcmF0aW9uVGltZTowLGZpcnN0QmF0Y2g6bnVsbCxuZXh0U2NoZWR1bGVkUm9vdDpudWxsfTt0aGlzLl9pbnRlcm5hbFJvb3Q9Yi5zdGF0ZU5vZGU9YX1cbllpLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLl9pbnRlcm5hbFJvb3QsZD1uZXcgWGk7Yj12b2lkIDA9PT1iP251bGw6YjtudWxsIT09YiYmZC50aGVuKGIpO1RpKGEsYyxudWxsLGQuX29uQ29tbWl0KTtyZXR1cm4gZH07WWkucHJvdG90eXBlLnVubW91bnQ9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5faW50ZXJuYWxSb290LGM9bmV3IFhpO2E9dm9pZCAwPT09YT9udWxsOmE7bnVsbCE9PWEmJmMudGhlbihhKTtUaShudWxsLGIsbnVsbCxjLl9vbkNvbW1pdCk7cmV0dXJuIGN9O1lpLnByb3RvdHlwZS5sZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPXRoaXMuX2ludGVybmFsUm9vdCxlPW5ldyBYaTtjPXZvaWQgMD09PWM/bnVsbDpjO251bGwhPT1jJiZlLnRoZW4oYyk7VGkoYixkLGEsZS5fb25Db21taXQpO3JldHVybiBlfTtcbllpLnByb3RvdHlwZS5jcmVhdGVCYXRjaD1mdW5jdGlvbigpe3ZhciBhPW5ldyBXaSh0aGlzKSxiPWEuX2V4cGlyYXRpb25UaW1lLGM9dGhpcy5faW50ZXJuYWxSb290LGQ9Yy5maXJzdEJhdGNoO2lmKG51bGw9PT1kKWMuZmlyc3RCYXRjaD1hLGEuX25leHQ9bnVsbDtlbHNle2ZvcihjPW51bGw7bnVsbCE9PWQmJmQuX2V4cGlyYXRpb25UaW1lPj1iOyljPWQsZD1kLl9uZXh0O2EuX25leHQ9ZDtudWxsIT09YyYmKGMuX25leHQ9YSl9cmV0dXJuIGF9O2Z1bmN0aW9uIFppKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlJiYoOCE9PWEubm9kZVR5cGV8fFwiIHJlYWN0LW1vdW50LXBvaW50LXVuc3RhYmxlIFwiIT09YS5ub2RlVmFsdWUpKX1KYj1QaTtLYj1SaTtMYj1mdW5jdGlvbigpe1d8fDA9PT1uaXx8KExpKG5pLCExKSxuaT0wKX07XG5mdW5jdGlvbiAkaShhLGIpe2J8fChiPWE/OT09PWEubm9kZVR5cGU/YS5kb2N1bWVudEVsZW1lbnQ6YS5maXJzdENoaWxkOm51bGwsYj0hKCFifHwxIT09Yi5ub2RlVHlwZXx8IWIuaGFzQXR0cmlidXRlKFwiZGF0YS1yZWFjdHJvb3RcIikpKTtpZighYilmb3IodmFyIGM7Yz1hLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChjKTtyZXR1cm4gbmV3IFlpKGEsITEsYil9XG5mdW5jdGlvbiBhaihhLGIsYyxkLGUpe3ZhciBmPWMuX3JlYWN0Um9vdENvbnRhaW5lcjtpZihmKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGc9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9VWkoZi5faW50ZXJuYWxSb290KTtnLmNhbGwoYSl9fW51bGwhPWE/Zi5sZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIoYSxiLGUpOmYucmVuZGVyKGIsZSl9ZWxzZXtmPWMuX3JlYWN0Um9vdENvbnRhaW5lcj0kaShjLGQpO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaD1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1VaShmLl9pbnRlcm5hbFJvb3QpO2guY2FsbChhKX19UWkoZnVuY3Rpb24oKXtudWxsIT1hP2YubGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyKGEsYixlKTpmLnJlbmRlcihiLGUpfSl9cmV0dXJuIFVpKGYuX2ludGVybmFsUm9vdCl9XG5mdW5jdGlvbiBiaihhLGIpe3ZhciBjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO1ppKGIpP3ZvaWQgMDp0KFwiMjAwXCIpO3JldHVybiBWaShhLGIsbnVsbCxjKX1cbnZhciBmaj17Y3JlYXRlUG9ydGFsOmJqLGZpbmRET01Ob2RlOmZ1bmN0aW9uKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoMT09PWEubm9kZVR5cGUpcmV0dXJuIGE7dmFyIGI9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZvaWQgMD09PWImJihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXI/dChcIjE4OFwiKTp0KFwiMjY4XCIsT2JqZWN0LmtleXMoYSkpKTthPW5kKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZTtyZXR1cm4gYX0saHlkcmF0ZTpmdW5jdGlvbihhLGIsYyl7WmkoYik/dm9pZCAwOnQoXCIyMDBcIik7cmV0dXJuIGFqKG51bGwsYSxiLCEwLGMpfSxyZW5kZXI6ZnVuY3Rpb24oYSxiLGMpe1ppKGIpP3ZvaWQgMDp0KFwiMjAwXCIpO3JldHVybiBhaihudWxsLGEsYiwhMSxjKX0sdW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI6ZnVuY3Rpb24oYSxiLGMsZCl7WmkoYyk/dm9pZCAwOnQoXCIyMDBcIik7bnVsbD09YXx8dm9pZCAwPT09YS5fcmVhY3RJbnRlcm5hbEZpYmVyP1xudChcIjM4XCIpOnZvaWQgMDtyZXR1cm4gYWooYSxiLGMsITEsZCl9LHVubW91bnRDb21wb25lbnRBdE5vZGU6ZnVuY3Rpb24oYSl7WmkoYSk/dm9pZCAwOnQoXCI0MFwiKTtyZXR1cm4gYS5fcmVhY3RSb290Q29udGFpbmVyPyhRaShmdW5jdGlvbigpe2FqKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGx9KX0pLCEwKTohMX0sdW5zdGFibGVfY3JlYXRlUG9ydGFsOmZ1bmN0aW9uKCl7cmV0dXJuIGJqLmFwcGx5KHZvaWQgMCxhcmd1bWVudHMpfSx1bnN0YWJsZV9iYXRjaGVkVXBkYXRlczpQaSx1bnN0YWJsZV9pbnRlcmFjdGl2ZVVwZGF0ZXM6UmksZmx1c2hTeW5jOmZ1bmN0aW9uKGEsYil7Vz90KFwiMTg3XCIpOnZvaWQgMDt2YXIgYz1aO1o9ITA7dHJ5e3JldHVybiByaShhLGIpfWZpbmFsbHl7Wj1jLExpKDEwNzM3NDE4MjMsITEpfX0sdW5zdGFibGVfY3JlYXRlUm9vdDpjaix1bnN0YWJsZV9mbHVzaENvbnRyb2xsZWQ6ZnVuY3Rpb24oYSl7dmFyIGI9XG5aO1o9ITA7dHJ5e3JpKGEpfWZpbmFsbHl7KFo9Yil8fFd8fExpKDEwNzM3NDE4MjMsITEpfX0sX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ6e0V2ZW50czpbS2EsTGEsTWEsRGEuaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lLHJhLFNhLGZ1bmN0aW9uKGEpe0FhKGEsUmEpfSxIYixJYixKZCxGYV19fTtmdW5jdGlvbiBjaihhLGIpe1ppKGEpP3ZvaWQgMDp0KFwiMjk5XCIsXCJ1bnN0YWJsZV9jcmVhdGVSb290XCIpO3JldHVybiBuZXcgWWkoYSwhMCxudWxsIT1iJiYhMD09PWIuaHlkcmF0ZSl9XG4oZnVuY3Rpb24oYSl7dmFyIGI9YS5maW5kRmliZXJCeUhvc3RJbnN0YW5jZTtyZXR1cm4gWWUocCh7fSxhLHtvdmVycmlkZVByb3BzOm51bGwsY3VycmVudERpc3BhdGNoZXJSZWY6WGIuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixmaW5kSG9zdEluc3RhbmNlQnlGaWJlcjpmdW5jdGlvbihhKXthPW5kKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfSxmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTpmdW5jdGlvbihhKXtyZXR1cm4gYj9iKGEpOm51bGx9fSkpfSkoe2ZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOkphLGJ1bmRsZVR5cGU6MCx2ZXJzaW9uOlwiMTYuOC4wXCIscmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifSk7dmFyIGdqPXtkZWZhdWx0OmZqfSxoaj1naiYmZmp8fGdqO21vZHVsZS5leHBvcnRzPWhqLmRlZmF1bHR8fGhqO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MC4xMy42XG4gKiBzY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGQ9bnVsbCxlPSExLGc9MyxrPS0xLGw9LTEsbT0hMSxuPSExO2Z1bmN0aW9uIHAoKXtpZighbSl7dmFyIGE9ZC5leHBpcmF0aW9uVGltZTtuP3EoKTpuPSEwO3IodCxhKX19XG5mdW5jdGlvbiB1KCl7dmFyIGE9ZCxiPWQubmV4dDtpZihkPT09YilkPW51bGw7ZWxzZXt2YXIgYz1kLnByZXZpb3VzO2Q9Yy5uZXh0PWI7Yi5wcmV2aW91cz1jfWEubmV4dD1hLnByZXZpb3VzPW51bGw7Yz1hLmNhbGxiYWNrO2I9YS5leHBpcmF0aW9uVGltZTthPWEucHJpb3JpdHlMZXZlbDt2YXIgZj1nLFE9bDtnPWE7bD1iO3RyeXt2YXIgaD1jKCl9ZmluYWxseXtnPWYsbD1RfWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBoKWlmKGg9e2NhbGxiYWNrOmgscHJpb3JpdHlMZXZlbDphLGV4cGlyYXRpb25UaW1lOmIsbmV4dDpudWxsLHByZXZpb3VzOm51bGx9LG51bGw9PT1kKWQ9aC5uZXh0PWgucHJldmlvdXM9aDtlbHNle2M9bnVsbDthPWQ7ZG97aWYoYS5leHBpcmF0aW9uVGltZT49Yil7Yz1hO2JyZWFrfWE9YS5uZXh0fXdoaWxlKGEhPT1kKTtudWxsPT09Yz9jPWQ6Yz09PWQmJihkPWgscCgpKTtiPWMucHJldmlvdXM7Yi5uZXh0PWMucHJldmlvdXM9aDtoLm5leHQ9YztoLnByZXZpb3VzPVxuYn19ZnVuY3Rpb24gdigpe2lmKC0xPT09ayYmbnVsbCE9PWQmJjE9PT1kLnByaW9yaXR5TGV2ZWwpe209ITA7dHJ5e2RvIHUoKTt3aGlsZShudWxsIT09ZCYmMT09PWQucHJpb3JpdHlMZXZlbCl9ZmluYWxseXttPSExLG51bGwhPT1kP3AoKTpuPSExfX19ZnVuY3Rpb24gdChhKXttPSEwO3ZhciBiPWU7ZT1hO3RyeXtpZihhKWZvcig7bnVsbCE9PWQ7KXt2YXIgYz1leHBvcnRzLnVuc3RhYmxlX25vdygpO2lmKGQuZXhwaXJhdGlvblRpbWU8PWMpe2RvIHUoKTt3aGlsZShudWxsIT09ZCYmZC5leHBpcmF0aW9uVGltZTw9Yyl9ZWxzZSBicmVha31lbHNlIGlmKG51bGwhPT1kKXtkbyB1KCk7d2hpbGUobnVsbCE9PWQmJiF3KCkpfX1maW5hbGx5e209ITEsZT1iLG51bGwhPT1kP3AoKTpuPSExLHYoKX19XG52YXIgeD1EYXRlLHk9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAsej1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDp2b2lkIDAsQT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgcmVxdWVzdEFuaW1hdGlvbkZyYW1lP3JlcXVlc3RBbmltYXRpb25GcmFtZTp2b2lkIDAsQj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2FuY2VsQW5pbWF0aW9uRnJhbWU/Y2FuY2VsQW5pbWF0aW9uRnJhbWU6dm9pZCAwLEMsRDtmdW5jdGlvbiBFKGEpe0M9QShmdW5jdGlvbihiKXt6KEQpO2EoYil9KTtEPXkoZnVuY3Rpb24oKXtCKEMpO2EoZXhwb3J0cy51bnN0YWJsZV9ub3coKSl9LDEwMCl9XG5pZihcIm9iamVjdFwiPT09dHlwZW9mIHBlcmZvcm1hbmNlJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgcGVyZm9ybWFuY2Uubm93KXt2YXIgRj1wZXJmb3JtYW5jZTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBGLm5vdygpfX1lbHNlIGV4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHgubm93KCl9O3ZhciByLHEsdyxHPW51bGw7XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiB3aW5kb3c/Rz13aW5kb3c6XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBnbG9iYWwmJihHPWdsb2JhbCk7XG5pZihHJiZHLl9zY2hlZE1vY2spe3ZhciBIPUcuX3NjaGVkTW9jaztyPUhbMF07cT1IWzFdO3c9SFsyXTtleHBvcnRzLnVuc3RhYmxlX25vdz1IWzNdfWVsc2UgaWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBNZXNzYWdlQ2hhbm5lbCl7dmFyIEk9bnVsbCxKPWZ1bmN0aW9uKGEpe2lmKG51bGwhPT1JKXRyeXtJKGEpfWZpbmFsbHl7ST1udWxsfX07cj1mdW5jdGlvbihhKXtudWxsIT09ST9zZXRUaW1lb3V0KHIsMCxhKTooST1hLHNldFRpbWVvdXQoSiwwLCExKSl9O3E9ZnVuY3Rpb24oKXtJPW51bGx9O3c9ZnVuY3Rpb24oKXtyZXR1cm4hMX19ZWxzZXtcInVuZGVmaW5lZFwiIT09dHlwZW9mIGNvbnNvbGUmJihcImZ1bmN0aW9uXCIhPT10eXBlb2YgQSYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgcmVxdWVzdEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL2ZiLm1lL3JlYWN0LXBvbHlmaWxsc1wiKSxcblwiZnVuY3Rpb25cIiE9PXR5cGVvZiBCJiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBjYW5jZWxBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9mYi5tZS9yZWFjdC1wb2x5ZmlsbHNcIikpO3ZhciBLPW51bGwsTD0hMSxNPS0xLE49ITEsTz0hMSxQPTAsUj0zMyxTPTMzO3c9ZnVuY3Rpb24oKXtyZXR1cm4gUDw9ZXhwb3J0cy51bnN0YWJsZV9ub3coKX07dmFyIFQ9bmV3IE1lc3NhZ2VDaGFubmVsLFU9VC5wb3J0MjtULnBvcnQxLm9ubWVzc2FnZT1mdW5jdGlvbigpe0w9ITE7dmFyIGE9SyxiPU07Sz1udWxsO009LTE7dmFyIGM9ZXhwb3J0cy51bnN0YWJsZV9ub3coKSxmPSExO2lmKDA+PVAtYylpZigtMSE9PWImJmI8PWMpZj0hMDtlbHNle058fChOPSEwLEUoVikpO0s9YTtNPWI7cmV0dXJufWlmKG51bGwhPT1hKXtPPSEwO3RyeXthKGYpfWZpbmFsbHl7Tz0hMX19fTtcbnZhciBWPWZ1bmN0aW9uKGEpe2lmKG51bGwhPT1LKXtFKFYpO3ZhciBiPWEtUCtTO2I8UyYmUjxTPyg4PmImJihiPTgpLFM9YjxSP1I6Yik6Uj1iO1A9YStTO0x8fChMPSEwLFUucG9zdE1lc3NhZ2Uodm9pZCAwKSl9ZWxzZSBOPSExfTtyPWZ1bmN0aW9uKGEsYil7Sz1hO009YjtPfHwwPmI/VS5wb3N0TWVzc2FnZSh2b2lkIDApOk58fChOPSEwLEUoVikpfTtxPWZ1bmN0aW9uKCl7Sz1udWxsO0w9ITE7TT0tMX19ZXhwb3J0cy51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eT0xO2V4cG9ydHMudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHk9MjtleHBvcnRzLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5PTM7ZXhwb3J0cy51bnN0YWJsZV9JZGxlUHJpb3JpdHk9NTtleHBvcnRzLnVuc3RhYmxlX0xvd1ByaW9yaXR5PTQ7XG5leHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eT1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmJyZWFrO2RlZmF1bHQ6YT0zfXZhciBjPWcsZj1rO2c9YTtrPWV4cG9ydHMudW5zdGFibGVfbm93KCk7dHJ5e3JldHVybiBiKCl9ZmluYWxseXtnPWMsaz1mLHYoKX19O2V4cG9ydHMudW5zdGFibGVfbmV4dD1mdW5jdGlvbihhKXtzd2l0Y2goZyl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6dmFyIGI9MzticmVhaztkZWZhdWx0OmI9Z312YXIgYz1nLGY9aztnPWI7az1leHBvcnRzLnVuc3RhYmxlX25vdygpO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7Zz1jLGs9Zix2KCl9fTtcbmV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjaz1mdW5jdGlvbihhLGIpe3ZhciBjPS0xIT09az9rOmV4cG9ydHMudW5zdGFibGVfbm93KCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09YiYmXCJudW1iZXJcIj09PXR5cGVvZiBiLnRpbWVvdXQpYj1jK2IudGltZW91dDtlbHNlIHN3aXRjaChnKXtjYXNlIDE6Yj1jKy0xO2JyZWFrO2Nhc2UgMjpiPWMrMjUwO2JyZWFrO2Nhc2UgNTpiPWMrMTA3Mzc0MTgyMzticmVhaztjYXNlIDQ6Yj1jKzFFNDticmVhaztkZWZhdWx0OmI9Yys1RTN9YT17Y2FsbGJhY2s6YSxwcmlvcml0eUxldmVsOmcsZXhwaXJhdGlvblRpbWU6YixuZXh0Om51bGwscHJldmlvdXM6bnVsbH07aWYobnVsbD09PWQpZD1hLm5leHQ9YS5wcmV2aW91cz1hLHAoKTtlbHNle2M9bnVsbDt2YXIgZj1kO2Rve2lmKGYuZXhwaXJhdGlvblRpbWU+Yil7Yz1mO2JyZWFrfWY9Zi5uZXh0fXdoaWxlKGYhPT1kKTtudWxsPT09Yz9jPWQ6Yz09PWQmJihkPWEscCgpKTtcbmI9Yy5wcmV2aW91cztiLm5leHQ9Yy5wcmV2aW91cz1hO2EubmV4dD1jO2EucHJldmlvdXM9Yn1yZXR1cm4gYX07ZXhwb3J0cy51bnN0YWJsZV9jYW5jZWxDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj1hLm5leHQ7aWYobnVsbCE9PWIpe2lmKGI9PT1hKWQ9bnVsbDtlbHNle2E9PT1kJiYoZD1iKTt2YXIgYz1hLnByZXZpb3VzO2MubmV4dD1iO2IucHJldmlvdXM9Y31hLm5leHQ9YS5wcmV2aW91cz1udWxsfX07ZXhwb3J0cy51bnN0YWJsZV93cmFwQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7dmFyIGI9ZztyZXR1cm4gZnVuY3Rpb24oKXt2YXIgYz1nLGY9aztnPWI7az1leHBvcnRzLnVuc3RhYmxlX25vdygpO3RyeXtyZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZmluYWxseXtnPWMsaz1mLHYoKX19fTtleHBvcnRzLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsPWZ1bmN0aW9uKCl7cmV0dXJuIGd9O1xuZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1mdW5jdGlvbigpe3JldHVybiFlJiYobnVsbCE9PWQmJmQuZXhwaXJhdGlvblRpbWU8bHx8dygpKX07ZXhwb3J0cy51bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbj1mdW5jdGlvbigpe251bGwhPT1kJiZwKCl9O2V4cG9ydHMudW5zdGFibGVfcGF1c2VFeGVjdXRpb249ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGU9ZnVuY3Rpb24oKXtyZXR1cm4gZH07XG4iLCJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vcmVzZXQuY3NzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscyB8fCB7fTsiLCIvLyBJbXBvcnRzXG52YXIgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIik7XG5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiaHRtbCxcXG5ib2R5LFxcbmRpdixcXG5zcGFuLFxcbmFwcGxldCxcXG5vYmplY3QsXFxuaWZyYW1lLFxcbmgxLFxcbmgyLFxcbmgzLFxcbmg0LFxcbmg1LFxcbmg2LFxcbnAsXFxuYmxvY2txdW90ZSxcXG5wcmUsXFxuYSxcXG5hYmJyLFxcbmFjcm9ueW0sXFxuYWRkcmVzcyxcXG5iaWcsXFxuY2l0ZSxcXG5jb2RlLFxcbmRlbCxcXG5kZm4sXFxuZW0sXFxuaW1nLFxcbmlucyxcXG5rYmQsXFxucSxcXG5zLFxcbnNhbXAsXFxuc21hbGwsXFxuc3RyaWtlLFxcbnN0cm9uZyxcXG5zdWIsXFxuc3VwLFxcbnR0LFxcbmIsXFxudSxcXG5pLFxcbmNlbnRlcixcXG5kbCxcXG5kdCxcXG5kZCxcXG5vbCxcXG51bCxcXG5saSxcXG5maWVsZHNldCxcXG5mb3JtLFxcbmxhYmVsLFxcbmxlZ2VuZCxcXG50YWJsZSxcXG5jYXB0aW9uLFxcbnRib2R5LFxcbnRmb290LFxcbnRoZWFkLFxcbnRyLFxcbnRoLFxcbnRkLFxcbmFydGljbGUsXFxuYXNpZGUsXFxuY2FudmFzLFxcbmRldGFpbHMsXFxuZW1iZWQsXFxuZmlndXJlLFxcbmZpZ2NhcHRpb24sXFxuZm9vdGVyLFxcbmhlYWRlcixcXG5oZ3JvdXAsXFxubWVudSxcXG5uYXYsXFxub3V0cHV0LFxcbnJ1YnksXFxuc2VjdGlvbixcXG5zdW1tYXJ5LFxcbnRpbWUsXFxubWFyayxcXG5hdWRpbyxcXG52aWRlbyB7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiAwO1xcbiAgYm9yZGVyOiAwO1xcbiAgZm9udC1zaXplOiAxMDAlO1xcbiAgZm9udDogaW5oZXJpdDtcXG4gIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTtcXG59XFxuXFxuLyogSFRNTDUgZGlzcGxheS1yb2xlIHJlc2V0IGZvciBvbGRlciBicm93c2VycyAqL1xcbmFydGljbGUsXFxuYXNpZGUsXFxuZGV0YWlscyxcXG5maWdjYXB0aW9uLFxcbmZpZ3VyZSxcXG5mb290ZXIsXFxuaGVhZGVyLFxcbmhncm91cCxcXG5tZW51LFxcbm5hdixcXG5zZWN0aW9uIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbn1cXG5cXG5ib2R5IHtcXG4gIGxpbmUtaGVpZ2h0OiAxO1xcbn1cXG5cXG5vbCxcXG51bCB7XFxuICBsaXN0LXN0eWxlOiBub25lO1xcbn1cXG5cXG5ibG9ja3F1b3RlLFxcbnEge1xcbiAgcXVvdGVzOiBub25lO1xcbn1cXG5cXG5ibG9ja3F1b3RlOmJlZm9yZSxcXG5ibG9ja3F1b3RlOmFmdGVyLFxcbnE6YmVmb3JlLFxcbnE6YWZ0ZXIge1xcbiAgY29udGVudDogXFxcIlxcXCI7XFxuICBjb250ZW50OiBub25lO1xcbn1cXG5cXG50YWJsZSB7XFxuICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xcbiAgYm9yZGVyLXNwYWNpbmc6IDA7XFxufVxcblwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHM7XG4iLCJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscyB8fCB7fTsiLCIvLyBJbXBvcnRzXG52YXIgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIik7XG5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiYm9keSB7XFxuICBmb250LWZhbWlseTogUm9ib3RvIFNsYWI7XFxuICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoLTE1MGRlZywgIzI0YzdmOSwgIzA3YjBlMyk7XFxufVxcblxcbmgxIHtcXG4gIHBhZGRpbmc6IDA7XFxuICBtYXJnaW4tYm90dG9tOiAyMHB4O1xcbiAgZm9udC1zaXplOiA0MHB4O1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICBsaW5lLWhlaWdodDogMTtcXG59XFxuXFxuLndyYXAge1xcbiAgZm9udC1zaXplOiAyMDAlO1xcbiAgcGFkZGluZzogNTBweDtcXG4gIG1hcmdpbjogNTBweCBhdXRvO1xcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xcbiAgYmFja2dyb3VuZDogI2ZlZmVmZTtcXG4gIHdpZHRoOiA4MCU7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBib3gtc2hhZG93OiAwIDAgMTBweCByZ2JhKDYsIDE1NywgMjAzLCAwLjUpO1xcbn1cXG5cXG4uaW5wdXQge1xcbiAgcGFkZGluZzogMCAxMHB4IDAgMzZweDtcXG4gIGhlaWdodDogNDVweDtcXG4gIG1hcmdpbi1yaWdodDogMjBweDtcXG4gIHdpZHRoOiAyNSU7XFxuICBmb250LXNpemU6IDE2cHg7XFxuICBjb2xvcjogIzczNzM3MztcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxuICBiYWNrZ3JvdW5kLWNsaXA6IHBhZGRpbmctYm94O1xcbiAgYm9yZGVyOiAxcHggc29saWQgIzM4ODNmYTtcXG4gIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gIHRyYW5zaXRpb246IGJvcmRlci1jb2xvciAwLjE1cyBlYXNlLWluLW91dCwgYm94LXNoYWRvdyAwLjE1cyBlYXNlLWluLW91dDtcXG59XFxuXFxuLmJ1dHRvbiB7XFxuICBjb2xvcjogI2ZmZjdmNztcXG4gIGZvbnQtc2l6ZTogMTZweDtcXG4gIGJvcmRlci1yYWRpdXM6IDhweDtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGJhY2tncm91bmQ6ICMzZGJkNGY7XFxuICBwYWRkaW5nOiA5cHggNXB4O1xcbiAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDYwbXMgZWFzZS1vdXQ7XFxuICBtYXJnaW46IDAgMTBweDtcXG4gIHdpZHRoOiAxNDBweDtcXG4gIGJvcmRlcjogMnB4IHNvbGlkIHRyYW5zcGFyZW50O1xcbiAgZm9udC1zaXplOiAyMHB4O1xcbn1cXG5cXG5pbnB1dDpmb2N1cyB7XFxuICBvdXRsaW5lOiAjZmZmO1xcbn1cXG5cXG4uZGVsZXRlQnRuIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlMTU1NTU7XFxufVxcblxcbi5lZGl0QnRuIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMzODgzZmE7XFxufVxcblxcbi50b0RvbGlzdCB7XFxuICBtYXJnaW4tdG9wOiAzMHB4O1xcbn1cXG5cXG4udG9Eb2xpc3RJdGVtIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgY29sb3I6ICNmZmY7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjRjN2Y5O1xcbiAgYm9yZGVyLWNvbG9yOiAjYjhkYWZmO1xcbiAgdGV4dC1hbGlnbjogbGVmdDtcXG4gIHBhZGRpbmc6IDEycHggMjBweDtcXG4gIG1hcmdpbi1ib3R0b206IDE2cHg7XFxuICBib3JkZXI6IDFweCBzb2xpZCB0cmFuc3BhcmVudDtcXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcXG59XFxuXFxuLnRvRG9saXN0VGV4dCB7XFxuICBmbGV4LWdyb3c6IDE7XFxufVxcblwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHM7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGVtcHR5RnVuY3Rpb24gPSByZXF1aXJlKCdmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uJyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBzaGltKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgaWYgKHNlY3JldCA9PT0gUmVhY3RQcm9wVHlwZXNTZWNyZXQpIHtcbiAgICAgIC8vIEl0IGlzIHN0aWxsIHNhZmUgd2hlbiBjYWxsZWQgZnJvbSBSZWFjdC5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaW52YXJpYW50KFxuICAgICAgZmFsc2UsXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICB9O1xuICBzaGltLmlzUmVxdWlyZWQgPSBzaGltO1xuICBmdW5jdGlvbiBnZXRTaGltKCkge1xuICAgIHJldHVybiBzaGltO1xuICB9O1xuICAvLyBJbXBvcnRhbnQhXG4gIC8vIEtlZXAgdGhpcyBsaXN0IGluIHN5bmMgd2l0aCBwcm9kdWN0aW9uIHZlcnNpb24gaW4gYC4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMuanNgLlxuICB2YXIgUmVhY3RQcm9wVHlwZXMgPSB7XG4gICAgYXJyYXk6IHNoaW0sXG4gICAgYm9vbDogc2hpbSxcbiAgICBmdW5jOiBzaGltLFxuICAgIG51bWJlcjogc2hpbSxcbiAgICBvYmplY3Q6IHNoaW0sXG4gICAgc3RyaW5nOiBzaGltLFxuICAgIHN5bWJvbDogc2hpbSxcblxuICAgIGFueTogc2hpbSxcbiAgICBhcnJheU9mOiBnZXRTaGltLFxuICAgIGVsZW1lbnQ6IHNoaW0sXG4gICAgaW5zdGFuY2VPZjogZ2V0U2hpbSxcbiAgICBub2RlOiBzaGltLFxuICAgIG9iamVjdE9mOiBnZXRTaGltLFxuICAgIG9uZU9mOiBnZXRTaGltLFxuICAgIG9uZU9mVHlwZTogZ2V0U2hpbSxcbiAgICBzaGFwZTogZ2V0U2hpbSxcbiAgICBleGFjdDogZ2V0U2hpbVxuICB9O1xuXG4gIFJlYWN0UHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzID0gZW1wdHlGdW5jdGlvbjtcbiAgUmVhY3RQcm9wVHlwZXMuUHJvcFR5cGVzID0gUmVhY3RQcm9wVHlwZXM7XG5cbiAgcmV0dXJuIFJlYWN0UHJvcFR5cGVzO1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICovXG5cbmZ1bmN0aW9uIG1ha2VFbXB0eUZ1bmN0aW9uKGFyZykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBhcmc7XG4gIH07XG59XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBhY2NlcHRzIGFuZCBkaXNjYXJkcyBpbnB1dHM7IGl0IGhhcyBubyBzaWRlIGVmZmVjdHMuIFRoaXMgaXNcbiAqIHByaW1hcmlseSB1c2VmdWwgaWRpb21hdGljYWxseSBmb3Igb3ZlcnJpZGFibGUgZnVuY3Rpb24gZW5kcG9pbnRzIHdoaWNoXG4gKiBhbHdheXMgbmVlZCB0byBiZSBjYWxsYWJsZSwgc2luY2UgSlMgbGFja3MgYSBudWxsLWNhbGwgaWRpb20gYWxhIENvY29hLlxuICovXG52YXIgZW1wdHlGdW5jdGlvbiA9IGZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fTtcblxuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJucyA9IG1ha2VFbXB0eUZ1bmN0aW9uO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0ZhbHNlID0gbWFrZUVtcHR5RnVuY3Rpb24oZmFsc2UpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RydWUgPSBtYWtlRW1wdHlGdW5jdGlvbih0cnVlKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNOdWxsID0gbWFrZUVtcHR5RnVuY3Rpb24obnVsbCk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVGhpcyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXM7XG59O1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0FyZ3VtZW50ID0gZnVuY3Rpb24gKGFyZykge1xuICByZXR1cm4gYXJnO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBlbXB0eUZ1bmN0aW9uOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVc2UgaW52YXJpYW50KCkgdG8gYXNzZXJ0IHN0YXRlIHdoaWNoIHlvdXIgcHJvZ3JhbSBhc3N1bWVzIHRvIGJlIHRydWUuXG4gKlxuICogUHJvdmlkZSBzcHJpbnRmLXN0eWxlIGZvcm1hdCAob25seSAlcyBpcyBzdXBwb3J0ZWQpIGFuZCBhcmd1bWVudHNcbiAqIHRvIHByb3ZpZGUgaW5mb3JtYXRpb24gYWJvdXQgd2hhdCBicm9rZSBhbmQgd2hhdCB5b3Ugd2VyZVxuICogZXhwZWN0aW5nLlxuICpcbiAqIFRoZSBpbnZhcmlhbnQgbWVzc2FnZSB3aWxsIGJlIHN0cmlwcGVkIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgaW52YXJpYW50XG4gKiB3aWxsIHJlbWFpbiB0byBlbnN1cmUgbG9naWMgZG9lcyBub3QgZGlmZmVyIGluIHByb2R1Y3Rpb24uXG4gKi9cblxudmFyIHZhbGlkYXRlRm9ybWF0ID0gZnVuY3Rpb24gdmFsaWRhdGVGb3JtYXQoZm9ybWF0KSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFsaWRhdGVGb3JtYXQgPSBmdW5jdGlvbiB2YWxpZGF0ZUZvcm1hdChmb3JtYXQpIHtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YXJpYW50IHJlcXVpcmVzIGFuIGVycm9yIG1lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGludmFyaWFudChjb25kaXRpb24sIGZvcm1hdCwgYSwgYiwgYywgZCwgZSwgZikge1xuICB2YWxpZGF0ZUZvcm1hdChmb3JtYXQpO1xuXG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgdmFyIGVycm9yO1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoJ01pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50ICcgKyAnZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFyZ3MgPSBbYSwgYiwgYywgZCwgZSwgZl07XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gICAgICB9KSk7XG4gICAgICBlcnJvci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIH1cblxuICAgIGVycm9yLmZyYW1lc1RvUG9wID0gMTsgLy8gd2UgZG9uJ3QgY2FyZSBhYm91dCBpbnZhcmlhbnQncyBvd24gZnJhbWVcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGludmFyaWFudDsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlc1NlY3JldDtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob3JpZ2luYWxNb2R1bGUpIHtcblx0aWYgKCFvcmlnaW5hbE1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHR2YXIgbW9kdWxlID0gT2JqZWN0LmNyZWF0ZShvcmlnaW5hbE1vZHVsZSk7XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiZXhwb3J0c1wiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlXG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iLCJpbXBvcnQgeyB1c2VSZWYgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCB7IGFkZFRvZG8sIGVkaXRJdGVtLCBkZWxldGVJdGVtLCBzZXRFZGl0IH0gZnJvbSBcIi4uL2FjdGlvbnNcIjtcbmltcG9ydCBJbnB1dCBmcm9tIFwiLi9JbnB1dFwiO1xuaW1wb3J0IEFkZEZvcm0gZnJvbSBcIi4vQWRkRm9ybVwiO1xuXG5jb25zdCBBZGRUb2RvID0gKHsgdG9kb3MsIGFkZEl0ZW0sIGVkaXRJdGVtLCBzZXRFZGl0LCBkZWxldGVJdGVtIH0pID0+IHtcbiAgY29uc3QgdXBkYXRlZElucHV0ID0gdXNlUmVmKCk7XG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJ3cmFwXCI+XG4gICAgICA8aDE+UmVhY3QtUmVkdXggVE9ETyBBcHA8L2gxPlxuICAgICAgPEFkZEZvcm0gYWRkSXRlbT17dmFsdWUgPT4gYWRkSXRlbSh2YWx1ZSl9IC8+XG4gICAgICA8dWwgY2xhc3NOYW1lPVwidG9Eb2xpc3RcIj5cbiAgICAgICAge3RvZG9zLmxlbmd0aCA/IChcbiAgICAgICAgICBfLm1hcCh0b2RvcywgKHRvZG8sIGtleSkgPT4gKFxuICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT1cInRvRG9saXN0SXRlbVwiIGtleT17a2V5fT5cbiAgICAgICAgICAgICAge3RvZG8uaXNFZGl0ID8gKFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidG9Eb2xpc3RUZXh0XCI+XG4gICAgICAgICAgICAgICAgICA8SW5wdXQgcmVmcz17dXBkYXRlZElucHV0fSB2YWx1ZT17dG9kby50ZXh0fSAvPlxuICAgICAgICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJidXR0b25cIlxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PlxuICAgICAgICAgICAgICAgICAgICAgIGVkaXRJdGVtKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogdXBkYXRlZElucHV0LmN1cnJlbnQudmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIHN1Ym1pdFxuICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwidG9Eb2xpc3RUZXh0XCI+XG4gICAgICAgICAgICAgICAgICB7a2V5ICsgMX0pe3RvZG8udGV4dH1cbiAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIDxidXR0b24gb25DbGljaz17KCkgPT4gc2V0RWRpdChrZXkpfSBjbGFzc05hbWU9XCJidXR0b24gZWRpdEJ0blwiPlxuICAgICAgICAgICAgICAgIEVkaXRcbiAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBkZWxldGVJdGVtKGtleSl9XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYnV0dG9uIGRlbGV0ZUJ0blwiXG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICBEZWxldGVcbiAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICkpXG4gICAgICAgICkgOiAoXG4gICAgICAgICAgPHA+bm8gaXRlbXMgYWRkZWQuPC9wPlxuICAgICAgICApfVxuICAgICAgPC91bD5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbkFkZFRvZG8uZGVmYXVsdFByb3BzID0ge1xuICB0b2RvczogW10sXG4gIGFkZEl0ZW06ICgpID0+IHt9LFxuICBlZGl0SXRlbTogKCkgPT4ge30sXG4gIGRlbGV0ZUl0ZW06ICgpID0+IHt9LFxuICBzZXRFZGl0OiAoKSA9PiB7fVxufTtcblxuQWRkVG9kby5wcm9wVHlwZXMgPSB7XG4gIGFkZEl0ZW06IFByb3BUeXBlcy5mdW5jLFxuICBlZGl0SXRlbTogUHJvcFR5cGVzLmZ1bmMsXG4gIGRlbGV0ZUl0ZW06IFByb3BUeXBlcy5mdW5jLFxuICBzZXRFZGl0OiBQcm9wVHlwZXMuZnVuYyxcbiAgdG9kb3M6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vYmplY3QpXG59O1xuXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSBzdGF0ZSA9PiB7XG4gIHJldHVybiB7IHRvZG9zOiBzdGF0ZS5Ub0RvSXRlbSB9O1xufTtcblxuY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0gZGlzcGF0Y2ggPT4ge1xuICByZXR1cm4ge1xuICAgIGFkZEl0ZW06IHRleHQgPT4ge1xuICAgICAgZGlzcGF0Y2goYWRkVG9kbyh0ZXh0KSk7XG4gICAgfSxcbiAgICBlZGl0SXRlbTogdXBkYXRlZEl0ZW0gPT4ge1xuICAgICAgZGlzcGF0Y2goZWRpdEl0ZW0odXBkYXRlZEl0ZW0pKTtcbiAgICAgIGRpc3BhdGNoKHNldEVkaXQoKSk7XG4gICAgfSxcbiAgICBkZWxldGVJdGVtOiBrZXkgPT4ge1xuICAgICAgZGlzcGF0Y2goZGVsZXRlSXRlbShrZXkpKTtcbiAgICB9LFxuICAgIHNldEVkaXQ6IGtleSA9PiB7XG4gICAgICBkaXNwYXRjaChzZXRFZGl0KGtleSkpO1xuICAgIH1cbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMpKEFkZFRvZG8pO1xuIiwiLy8gICAgIFVuZGVyc2NvcmUuanMgMS45LjBcbi8vICAgICBodHRwOi8vdW5kZXJzY29yZWpzLm9yZ1xuLy8gICAgIChjKSAyMDA5LTIwMTggSmVyZW15IEFzaGtlbmFzLCBEb2N1bWVudENsb3VkIGFuZCBJbnZlc3RpZ2F0aXZlIFJlcG9ydGVycyAmIEVkaXRvcnNcbi8vICAgICBVbmRlcnNjb3JlIG1heSBiZSBmcmVlbHkgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuXG4oZnVuY3Rpb24oKSB7XG5cbiAgLy8gQmFzZWxpbmUgc2V0dXBcbiAgLy8gLS0tLS0tLS0tLS0tLS1cblxuICAvLyBFc3RhYmxpc2ggdGhlIHJvb3Qgb2JqZWN0LCBgd2luZG93YCAoYHNlbGZgKSBpbiB0aGUgYnJvd3NlciwgYGdsb2JhbGBcbiAgLy8gb24gdGhlIHNlcnZlciwgb3IgYHRoaXNgIGluIHNvbWUgdmlydHVhbCBtYWNoaW5lcy4gV2UgdXNlIGBzZWxmYFxuICAvLyBpbnN0ZWFkIG9mIGB3aW5kb3dgIGZvciBgV2ViV29ya2VyYCBzdXBwb3J0LlxuICB2YXIgcm9vdCA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYuc2VsZiA9PT0gc2VsZiAmJiBzZWxmIHx8XG4gICAgICAgICAgICB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbC5nbG9iYWwgPT09IGdsb2JhbCAmJiBnbG9iYWwgfHxcbiAgICAgICAgICAgIHRoaXMgfHxcbiAgICAgICAgICAgIHt9O1xuXG4gIC8vIFNhdmUgdGhlIHByZXZpb3VzIHZhbHVlIG9mIHRoZSBgX2AgdmFyaWFibGUuXG4gIHZhciBwcmV2aW91c1VuZGVyc2NvcmUgPSByb290Ll87XG5cbiAgLy8gU2F2ZSBieXRlcyBpbiB0aGUgbWluaWZpZWQgKGJ1dCBub3QgZ3ppcHBlZCkgdmVyc2lvbjpcbiAgdmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGUsIE9ialByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgdmFyIFN5bWJvbFByb3RvID0gdHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgPyBTeW1ib2wucHJvdG90eXBlIDogbnVsbDtcblxuICAvLyBDcmVhdGUgcXVpY2sgcmVmZXJlbmNlIHZhcmlhYmxlcyBmb3Igc3BlZWQgYWNjZXNzIHRvIGNvcmUgcHJvdG90eXBlcy5cbiAgdmFyIHB1c2ggPSBBcnJheVByb3RvLnB1c2gsXG4gICAgICBzbGljZSA9IEFycmF5UHJvdG8uc2xpY2UsXG4gICAgICB0b1N0cmluZyA9IE9ialByb3RvLnRvU3RyaW5nLFxuICAgICAgaGFzT3duUHJvcGVydHkgPSBPYmpQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuICAvLyBBbGwgKipFQ01BU2NyaXB0IDUqKiBuYXRpdmUgZnVuY3Rpb24gaW1wbGVtZW50YXRpb25zIHRoYXQgd2UgaG9wZSB0byB1c2VcbiAgLy8gYXJlIGRlY2xhcmVkIGhlcmUuXG4gIHZhciBuYXRpdmVJc0FycmF5ID0gQXJyYXkuaXNBcnJheSxcbiAgICAgIG5hdGl2ZUtleXMgPSBPYmplY3Qua2V5cyxcbiAgICAgIG5hdGl2ZUNyZWF0ZSA9IE9iamVjdC5jcmVhdGU7XG5cbiAgLy8gTmFrZWQgZnVuY3Rpb24gcmVmZXJlbmNlIGZvciBzdXJyb2dhdGUtcHJvdG90eXBlLXN3YXBwaW5nLlxuICB2YXIgQ3RvciA9IGZ1bmN0aW9uKCl7fTtcblxuICAvLyBDcmVhdGUgYSBzYWZlIHJlZmVyZW5jZSB0byB0aGUgVW5kZXJzY29yZSBvYmplY3QgZm9yIHVzZSBiZWxvdy5cbiAgdmFyIF8gPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAob2JqIGluc3RhbmNlb2YgXykgcmV0dXJuIG9iajtcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgXykpIHJldHVybiBuZXcgXyhvYmopO1xuICAgIHRoaXMuX3dyYXBwZWQgPSBvYmo7XG4gIH07XG5cbiAgLy8gRXhwb3J0IHRoZSBVbmRlcnNjb3JlIG9iamVjdCBmb3IgKipOb2RlLmpzKiosIHdpdGhcbiAgLy8gYmFja3dhcmRzLWNvbXBhdGliaWxpdHkgZm9yIHRoZWlyIG9sZCBtb2R1bGUgQVBJLiBJZiB3ZSdyZSBpblxuICAvLyB0aGUgYnJvd3NlciwgYWRkIGBfYCBhcyBhIGdsb2JhbCBvYmplY3QuXG4gIC8vIChgbm9kZVR5cGVgIGlzIGNoZWNrZWQgdG8gZW5zdXJlIHRoYXQgYG1vZHVsZWBcbiAgLy8gYW5kIGBleHBvcnRzYCBhcmUgbm90IEhUTUwgZWxlbWVudHMuKVxuICBpZiAodHlwZW9mIGV4cG9ydHMgIT0gJ3VuZGVmaW5lZCcgJiYgIWV4cG9ydHMubm9kZVR5cGUpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZSAhPSAndW5kZWZpbmVkJyAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgICBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBfO1xuICAgIH1cbiAgICBleHBvcnRzLl8gPSBfO1xuICB9IGVsc2Uge1xuICAgIHJvb3QuXyA9IF87XG4gIH1cblxuICAvLyBDdXJyZW50IHZlcnNpb24uXG4gIF8uVkVSU0lPTiA9ICcxLjkuMCc7XG5cbiAgLy8gSW50ZXJuYWwgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGFuIGVmZmljaWVudCAoZm9yIGN1cnJlbnQgZW5naW5lcykgdmVyc2lvblxuICAvLyBvZiB0aGUgcGFzc2VkLWluIGNhbGxiYWNrLCB0byBiZSByZXBlYXRlZGx5IGFwcGxpZWQgaW4gb3RoZXIgVW5kZXJzY29yZVxuICAvLyBmdW5jdGlvbnMuXG4gIHZhciBvcHRpbWl6ZUNiID0gZnVuY3Rpb24oZnVuYywgY29udGV4dCwgYXJnQ291bnQpIHtcbiAgICBpZiAoY29udGV4dCA9PT0gdm9pZCAwKSByZXR1cm4gZnVuYztcbiAgICBzd2l0Y2ggKGFyZ0NvdW50ID09IG51bGwgPyAzIDogYXJnQ291bnQpIHtcbiAgICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBmdW5jLmNhbGwoY29udGV4dCwgdmFsdWUpO1xuICAgICAgfTtcbiAgICAgIC8vIFRoZSAyLWFyZ3VtZW50IGNhc2UgaXMgb21pdHRlZCBiZWNhdXNlIHdl4oCZcmUgbm90IHVzaW5nIGl0LlxuICAgICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHJldHVybiBmdW5jLmNhbGwoY29udGV4dCwgdmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICAgIH07XG4gICAgICBjYXNlIDQ6IHJldHVybiBmdW5jdGlvbihhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHJldHVybiBmdW5jLmNhbGwoY29udGV4dCwgYWNjdW11bGF0b3IsIHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7XG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZnVuYy5hcHBseShjb250ZXh0LCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGJ1aWx0aW5JdGVyYXRlZTtcblxuICAvLyBBbiBpbnRlcm5hbCBmdW5jdGlvbiB0byBnZW5lcmF0ZSBjYWxsYmFja3MgdGhhdCBjYW4gYmUgYXBwbGllZCB0byBlYWNoXG4gIC8vIGVsZW1lbnQgaW4gYSBjb2xsZWN0aW9uLCByZXR1cm5pbmcgdGhlIGRlc2lyZWQgcmVzdWx0IOKAlCBlaXRoZXIgYGlkZW50aXR5YCxcbiAgLy8gYW4gYXJiaXRyYXJ5IGNhbGxiYWNrLCBhIHByb3BlcnR5IG1hdGNoZXIsIG9yIGEgcHJvcGVydHkgYWNjZXNzb3IuXG4gIHZhciBjYiA9IGZ1bmN0aW9uKHZhbHVlLCBjb250ZXh0LCBhcmdDb3VudCkge1xuICAgIGlmIChfLml0ZXJhdGVlICE9PSBidWlsdGluSXRlcmF0ZWUpIHJldHVybiBfLml0ZXJhdGVlKHZhbHVlLCBjb250ZXh0KTtcbiAgICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIF8uaWRlbnRpdHk7XG4gICAgaWYgKF8uaXNGdW5jdGlvbih2YWx1ZSkpIHJldHVybiBvcHRpbWl6ZUNiKHZhbHVlLCBjb250ZXh0LCBhcmdDb3VudCk7XG4gICAgaWYgKF8uaXNPYmplY3QodmFsdWUpICYmICFfLmlzQXJyYXkodmFsdWUpKSByZXR1cm4gXy5tYXRjaGVyKHZhbHVlKTtcbiAgICByZXR1cm4gXy5wcm9wZXJ0eSh2YWx1ZSk7XG4gIH07XG5cbiAgLy8gRXh0ZXJuYWwgd3JhcHBlciBmb3Igb3VyIGNhbGxiYWNrIGdlbmVyYXRvci4gVXNlcnMgbWF5IGN1c3RvbWl6ZVxuICAvLyBgXy5pdGVyYXRlZWAgaWYgdGhleSB3YW50IGFkZGl0aW9uYWwgcHJlZGljYXRlL2l0ZXJhdGVlIHNob3J0aGFuZCBzdHlsZXMuXG4gIC8vIFRoaXMgYWJzdHJhY3Rpb24gaGlkZXMgdGhlIGludGVybmFsLW9ubHkgYXJnQ291bnQgYXJndW1lbnQuXG4gIF8uaXRlcmF0ZWUgPSBidWlsdGluSXRlcmF0ZWUgPSBmdW5jdGlvbih2YWx1ZSwgY29udGV4dCkge1xuICAgIHJldHVybiBjYih2YWx1ZSwgY29udGV4dCwgSW5maW5pdHkpO1xuICB9O1xuXG4gIC8vIFNvbWUgZnVuY3Rpb25zIHRha2UgYSB2YXJpYWJsZSBudW1iZXIgb2YgYXJndW1lbnRzLCBvciBhIGZldyBleHBlY3RlZFxuICAvLyBhcmd1bWVudHMgYXQgdGhlIGJlZ2lubmluZyBhbmQgdGhlbiBhIHZhcmlhYmxlIG51bWJlciBvZiB2YWx1ZXMgdG8gb3BlcmF0ZVxuICAvLyBvbi4gVGhpcyBoZWxwZXIgYWNjdW11bGF0ZXMgYWxsIHJlbWFpbmluZyBhcmd1bWVudHMgcGFzdCB0aGUgZnVuY3Rpb27igJlzXG4gIC8vIGFyZ3VtZW50IGxlbmd0aCAob3IgYW4gZXhwbGljaXQgYHN0YXJ0SW5kZXhgKSwgaW50byBhbiBhcnJheSB0aGF0IGJlY29tZXNcbiAgLy8gdGhlIGxhc3QgYXJndW1lbnQuIFNpbWlsYXIgdG8gRVM24oCZcyBcInJlc3QgcGFyYW1ldGVyXCIuXG4gIHZhciByZXN0QXJndW1lbnRzID0gZnVuY3Rpb24oZnVuYywgc3RhcnRJbmRleCkge1xuICAgIHN0YXJ0SW5kZXggPSBzdGFydEluZGV4ID09IG51bGwgPyBmdW5jLmxlbmd0aCAtIDEgOiArc3RhcnRJbmRleDtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gTWF0aC5tYXgoYXJndW1lbnRzLmxlbmd0aCAtIHN0YXJ0SW5kZXgsIDApLFxuICAgICAgICAgIHJlc3QgPSBBcnJheShsZW5ndGgpLFxuICAgICAgICAgIGluZGV4ID0gMDtcbiAgICAgIGZvciAoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICByZXN0W2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleCArIHN0YXJ0SW5kZXhdO1xuICAgICAgfVxuICAgICAgc3dpdGNoIChzdGFydEluZGV4KSB7XG4gICAgICAgIGNhc2UgMDogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzLCByZXN0KTtcbiAgICAgICAgY2FzZSAxOiByZXR1cm4gZnVuYy5jYWxsKHRoaXMsIGFyZ3VtZW50c1swXSwgcmVzdCk7XG4gICAgICAgIGNhc2UgMjogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzLCBhcmd1bWVudHNbMF0sIGFyZ3VtZW50c1sxXSwgcmVzdCk7XG4gICAgICB9XG4gICAgICB2YXIgYXJncyA9IEFycmF5KHN0YXJ0SW5kZXggKyAxKTtcbiAgICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IHN0YXJ0SW5kZXg7IGluZGV4KyspIHtcbiAgICAgICAgYXJnc1tpbmRleF0gPSBhcmd1bWVudHNbaW5kZXhdO1xuICAgICAgfVxuICAgICAgYXJnc1tzdGFydEluZGV4XSA9IHJlc3Q7XG4gICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9O1xuICB9O1xuXG4gIC8vIEFuIGludGVybmFsIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBhIG5ldyBvYmplY3QgdGhhdCBpbmhlcml0cyBmcm9tIGFub3RoZXIuXG4gIHZhciBiYXNlQ3JlYXRlID0gZnVuY3Rpb24ocHJvdG90eXBlKSB7XG4gICAgaWYgKCFfLmlzT2JqZWN0KHByb3RvdHlwZSkpIHJldHVybiB7fTtcbiAgICBpZiAobmF0aXZlQ3JlYXRlKSByZXR1cm4gbmF0aXZlQ3JlYXRlKHByb3RvdHlwZSk7XG4gICAgQ3Rvci5wcm90b3R5cGUgPSBwcm90b3R5cGU7XG4gICAgdmFyIHJlc3VsdCA9IG5ldyBDdG9yO1xuICAgIEN0b3IucHJvdG90eXBlID0gbnVsbDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIHZhciBzaGFsbG93UHJvcGVydHkgPSBmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24ob2JqKSB7XG4gICAgICByZXR1cm4gb2JqID09IG51bGwgPyB2b2lkIDAgOiBvYmpba2V5XTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBkZWVwR2V0ID0gZnVuY3Rpb24ob2JqLCBwYXRoKSB7XG4gICAgdmFyIGxlbmd0aCA9IHBhdGgubGVuZ3RoO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuIHZvaWQgMDtcbiAgICAgIG9iaiA9IG9ialtwYXRoW2ldXTtcbiAgICB9XG4gICAgcmV0dXJuIGxlbmd0aCA/IG9iaiA6IHZvaWQgMDtcbiAgfTtcblxuICAvLyBIZWxwZXIgZm9yIGNvbGxlY3Rpb24gbWV0aG9kcyB0byBkZXRlcm1pbmUgd2hldGhlciBhIGNvbGxlY3Rpb25cbiAgLy8gc2hvdWxkIGJlIGl0ZXJhdGVkIGFzIGFuIGFycmF5IG9yIGFzIGFuIG9iamVjdC5cbiAgLy8gUmVsYXRlZDogaHR0cDovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtdG9sZW5ndGhcbiAgLy8gQXZvaWRzIGEgdmVyeSBuYXN0eSBpT1MgOCBKSVQgYnVnIG9uIEFSTS02NC4gIzIwOTRcbiAgdmFyIE1BWF9BUlJBWV9JTkRFWCA9IE1hdGgucG93KDIsIDUzKSAtIDE7XG4gIHZhciBnZXRMZW5ndGggPSBzaGFsbG93UHJvcGVydHkoJ2xlbmd0aCcpO1xuICB2YXIgaXNBcnJheUxpa2UgPSBmdW5jdGlvbihjb2xsZWN0aW9uKSB7XG4gICAgdmFyIGxlbmd0aCA9IGdldExlbmd0aChjb2xsZWN0aW9uKTtcbiAgICByZXR1cm4gdHlwZW9mIGxlbmd0aCA9PSAnbnVtYmVyJyAmJiBsZW5ndGggPj0gMCAmJiBsZW5ndGggPD0gTUFYX0FSUkFZX0lOREVYO1xuICB9O1xuXG4gIC8vIENvbGxlY3Rpb24gRnVuY3Rpb25zXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gVGhlIGNvcm5lcnN0b25lLCBhbiBgZWFjaGAgaW1wbGVtZW50YXRpb24sIGFrYSBgZm9yRWFjaGAuXG4gIC8vIEhhbmRsZXMgcmF3IG9iamVjdHMgaW4gYWRkaXRpb24gdG8gYXJyYXktbGlrZXMuIFRyZWF0cyBhbGxcbiAgLy8gc3BhcnNlIGFycmF5LWxpa2VzIGFzIGlmIHRoZXkgd2VyZSBkZW5zZS5cbiAgXy5lYWNoID0gXy5mb3JFYWNoID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICAgIGl0ZXJhdGVlID0gb3B0aW1pemVDYihpdGVyYXRlZSwgY29udGV4dCk7XG4gICAgdmFyIGksIGxlbmd0aDtcbiAgICBpZiAoaXNBcnJheUxpa2Uob2JqKSkge1xuICAgICAgZm9yIChpID0gMCwgbGVuZ3RoID0gb2JqLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGl0ZXJhdGVlKG9ialtpXSwgaSwgb2JqKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGtleXMgPSBfLmtleXMob2JqKTtcbiAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IGtleXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaXRlcmF0ZWUob2JqW2tleXNbaV1dLCBrZXlzW2ldLCBvYmopO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb2JqO1xuICB9O1xuXG4gIC8vIFJldHVybiB0aGUgcmVzdWx0cyBvZiBhcHBseWluZyB0aGUgaXRlcmF0ZWUgdG8gZWFjaCBlbGVtZW50LlxuICBfLm1hcCA9IF8uY29sbGVjdCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgICBpdGVyYXRlZSA9IGNiKGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgICB2YXIga2V5cyA9ICFpc0FycmF5TGlrZShvYmopICYmIF8ua2V5cyhvYmopLFxuICAgICAgICBsZW5ndGggPSAoa2V5cyB8fCBvYmopLmxlbmd0aCxcbiAgICAgICAgcmVzdWx0cyA9IEFycmF5KGxlbmd0aCk7XG4gICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgdmFyIGN1cnJlbnRLZXkgPSBrZXlzID8ga2V5c1tpbmRleF0gOiBpbmRleDtcbiAgICAgIHJlc3VsdHNbaW5kZXhdID0gaXRlcmF0ZWUob2JqW2N1cnJlbnRLZXldLCBjdXJyZW50S2V5LCBvYmopO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfTtcblxuICAvLyBDcmVhdGUgYSByZWR1Y2luZyBmdW5jdGlvbiBpdGVyYXRpbmcgbGVmdCBvciByaWdodC5cbiAgdmFyIGNyZWF0ZVJlZHVjZSA9IGZ1bmN0aW9uKGRpcikge1xuICAgIC8vIFdyYXAgY29kZSB0aGF0IHJlYXNzaWducyBhcmd1bWVudCB2YXJpYWJsZXMgaW4gYSBzZXBhcmF0ZSBmdW5jdGlvbiB0aGFuXG4gICAgLy8gdGhlIG9uZSB0aGF0IGFjY2Vzc2VzIGBhcmd1bWVudHMubGVuZ3RoYCB0byBhdm9pZCBhIHBlcmYgaGl0LiAoIzE5OTEpXG4gICAgdmFyIHJlZHVjZXIgPSBmdW5jdGlvbihvYmosIGl0ZXJhdGVlLCBtZW1vLCBpbml0aWFsKSB7XG4gICAgICB2YXIga2V5cyA9ICFpc0FycmF5TGlrZShvYmopICYmIF8ua2V5cyhvYmopLFxuICAgICAgICAgIGxlbmd0aCA9IChrZXlzIHx8IG9iaikubGVuZ3RoLFxuICAgICAgICAgIGluZGV4ID0gZGlyID4gMCA/IDAgOiBsZW5ndGggLSAxO1xuICAgICAgaWYgKCFpbml0aWFsKSB7XG4gICAgICAgIG1lbW8gPSBvYmpba2V5cyA/IGtleXNbaW5kZXhdIDogaW5kZXhdO1xuICAgICAgICBpbmRleCArPSBkaXI7XG4gICAgICB9XG4gICAgICBmb3IgKDsgaW5kZXggPj0gMCAmJiBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gZGlyKSB7XG4gICAgICAgIHZhciBjdXJyZW50S2V5ID0ga2V5cyA/IGtleXNbaW5kZXhdIDogaW5kZXg7XG4gICAgICAgIG1lbW8gPSBpdGVyYXRlZShtZW1vLCBvYmpbY3VycmVudEtleV0sIGN1cnJlbnRLZXksIG9iaik7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWVtbztcbiAgICB9O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uKG9iaiwgaXRlcmF0ZWUsIG1lbW8sIGNvbnRleHQpIHtcbiAgICAgIHZhciBpbml0aWFsID0gYXJndW1lbnRzLmxlbmd0aCA+PSAzO1xuICAgICAgcmV0dXJuIHJlZHVjZXIob2JqLCBvcHRpbWl6ZUNiKGl0ZXJhdGVlLCBjb250ZXh0LCA0KSwgbWVtbywgaW5pdGlhbCk7XG4gICAgfTtcbiAgfTtcblxuICAvLyAqKlJlZHVjZSoqIGJ1aWxkcyB1cCBhIHNpbmdsZSByZXN1bHQgZnJvbSBhIGxpc3Qgb2YgdmFsdWVzLCBha2EgYGluamVjdGAsXG4gIC8vIG9yIGBmb2xkbGAuXG4gIF8ucmVkdWNlID0gXy5mb2xkbCA9IF8uaW5qZWN0ID0gY3JlYXRlUmVkdWNlKDEpO1xuXG4gIC8vIFRoZSByaWdodC1hc3NvY2lhdGl2ZSB2ZXJzaW9uIG9mIHJlZHVjZSwgYWxzbyBrbm93biBhcyBgZm9sZHJgLlxuICBfLnJlZHVjZVJpZ2h0ID0gXy5mb2xkciA9IGNyZWF0ZVJlZHVjZSgtMSk7XG5cbiAgLy8gUmV0dXJuIHRoZSBmaXJzdCB2YWx1ZSB3aGljaCBwYXNzZXMgYSB0cnV0aCB0ZXN0LiBBbGlhc2VkIGFzIGBkZXRlY3RgLlxuICBfLmZpbmQgPSBfLmRldGVjdCA9IGZ1bmN0aW9uKG9iaiwgcHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIGtleUZpbmRlciA9IGlzQXJyYXlMaWtlKG9iaikgPyBfLmZpbmRJbmRleCA6IF8uZmluZEtleTtcbiAgICB2YXIga2V5ID0ga2V5RmluZGVyKG9iaiwgcHJlZGljYXRlLCBjb250ZXh0KTtcbiAgICBpZiAoa2V5ICE9PSB2b2lkIDAgJiYga2V5ICE9PSAtMSkgcmV0dXJuIG9ialtrZXldO1xuICB9O1xuXG4gIC8vIFJldHVybiBhbGwgdGhlIGVsZW1lbnRzIHRoYXQgcGFzcyBhIHRydXRoIHRlc3QuXG4gIC8vIEFsaWFzZWQgYXMgYHNlbGVjdGAuXG4gIF8uZmlsdGVyID0gXy5zZWxlY3QgPSBmdW5jdGlvbihvYmosIHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgIHZhciByZXN1bHRzID0gW107XG4gICAgcHJlZGljYXRlID0gY2IocHJlZGljYXRlLCBjb250ZXh0KTtcbiAgICBfLmVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGxpc3QpIHtcbiAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBsaXN0KSkgcmVzdWx0cy5wdXNoKHZhbHVlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfTtcblxuICAvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyBmb3Igd2hpY2ggYSB0cnV0aCB0ZXN0IGZhaWxzLlxuICBfLnJlamVjdCA9IGZ1bmN0aW9uKG9iaiwgcHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIF8uZmlsdGVyKG9iaiwgXy5uZWdhdGUoY2IocHJlZGljYXRlKSksIGNvbnRleHQpO1xuICB9O1xuXG4gIC8vIERldGVybWluZSB3aGV0aGVyIGFsbCBvZiB0aGUgZWxlbWVudHMgbWF0Y2ggYSB0cnV0aCB0ZXN0LlxuICAvLyBBbGlhc2VkIGFzIGBhbGxgLlxuICBfLmV2ZXJ5ID0gXy5hbGwgPSBmdW5jdGlvbihvYmosIHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgIHByZWRpY2F0ZSA9IGNiKHByZWRpY2F0ZSwgY29udGV4dCk7XG4gICAgdmFyIGtleXMgPSAhaXNBcnJheUxpa2Uob2JqKSAmJiBfLmtleXMob2JqKSxcbiAgICAgICAgbGVuZ3RoID0gKGtleXMgfHwgb2JqKS5sZW5ndGg7XG4gICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgdmFyIGN1cnJlbnRLZXkgPSBrZXlzID8ga2V5c1tpbmRleF0gOiBpbmRleDtcbiAgICAgIGlmICghcHJlZGljYXRlKG9ialtjdXJyZW50S2V5XSwgY3VycmVudEtleSwgb2JqKSkgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICAvLyBEZXRlcm1pbmUgaWYgYXQgbGVhc3Qgb25lIGVsZW1lbnQgaW4gdGhlIG9iamVjdCBtYXRjaGVzIGEgdHJ1dGggdGVzdC5cbiAgLy8gQWxpYXNlZCBhcyBgYW55YC5cbiAgXy5zb21lID0gXy5hbnkgPSBmdW5jdGlvbihvYmosIHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgIHByZWRpY2F0ZSA9IGNiKHByZWRpY2F0ZSwgY29udGV4dCk7XG4gICAgdmFyIGtleXMgPSAhaXNBcnJheUxpa2Uob2JqKSAmJiBfLmtleXMob2JqKSxcbiAgICAgICAgbGVuZ3RoID0gKGtleXMgfHwgb2JqKS5sZW5ndGg7XG4gICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgdmFyIGN1cnJlbnRLZXkgPSBrZXlzID8ga2V5c1tpbmRleF0gOiBpbmRleDtcbiAgICAgIGlmIChwcmVkaWNhdGUob2JqW2N1cnJlbnRLZXldLCBjdXJyZW50S2V5LCBvYmopKSByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIC8vIERldGVybWluZSBpZiB0aGUgYXJyYXkgb3Igb2JqZWN0IGNvbnRhaW5zIGEgZ2l2ZW4gaXRlbSAodXNpbmcgYD09PWApLlxuICAvLyBBbGlhc2VkIGFzIGBpbmNsdWRlc2AgYW5kIGBpbmNsdWRlYC5cbiAgXy5jb250YWlucyA9IF8uaW5jbHVkZXMgPSBfLmluY2x1ZGUgPSBmdW5jdGlvbihvYmosIGl0ZW0sIGZyb21JbmRleCwgZ3VhcmQpIHtcbiAgICBpZiAoIWlzQXJyYXlMaWtlKG9iaikpIG9iaiA9IF8udmFsdWVzKG9iaik7XG4gICAgaWYgKHR5cGVvZiBmcm9tSW5kZXggIT0gJ251bWJlcicgfHwgZ3VhcmQpIGZyb21JbmRleCA9IDA7XG4gICAgcmV0dXJuIF8uaW5kZXhPZihvYmosIGl0ZW0sIGZyb21JbmRleCkgPj0gMDtcbiAgfTtcblxuICAvLyBJbnZva2UgYSBtZXRob2QgKHdpdGggYXJndW1lbnRzKSBvbiBldmVyeSBpdGVtIGluIGEgY29sbGVjdGlvbi5cbiAgXy5pbnZva2UgPSByZXN0QXJndW1lbnRzKGZ1bmN0aW9uKG9iaiwgcGF0aCwgYXJncykge1xuICAgIHZhciBjb250ZXh0UGF0aCwgZnVuYztcbiAgICBpZiAoXy5pc0Z1bmN0aW9uKHBhdGgpKSB7XG4gICAgICBmdW5jID0gcGF0aDtcbiAgICB9IGVsc2UgaWYgKF8uaXNBcnJheShwYXRoKSkge1xuICAgICAgY29udGV4dFBhdGggPSBwYXRoLnNsaWNlKDAsIC0xKTtcbiAgICAgIHBhdGggPSBwYXRoW3BhdGgubGVuZ3RoIC0gMV07XG4gICAgfVxuICAgIHJldHVybiBfLm1hcChvYmosIGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgICAgIHZhciBtZXRob2QgPSBmdW5jO1xuICAgICAgaWYgKCFtZXRob2QpIHtcbiAgICAgICAgaWYgKGNvbnRleHRQYXRoICYmIGNvbnRleHRQYXRoLmxlbmd0aCkge1xuICAgICAgICAgIGNvbnRleHQgPSBkZWVwR2V0KGNvbnRleHQsIGNvbnRleHRQYXRoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29udGV4dCA9PSBudWxsKSByZXR1cm4gdm9pZCAwO1xuICAgICAgICBtZXRob2QgPSBjb250ZXh0W3BhdGhdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1ldGhvZCA9PSBudWxsID8gbWV0aG9kIDogbWV0aG9kLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgIH0pO1xuICB9KTtcblxuICAvLyBDb252ZW5pZW5jZSB2ZXJzaW9uIG9mIGEgY29tbW9uIHVzZSBjYXNlIG9mIGBtYXBgOiBmZXRjaGluZyBhIHByb3BlcnR5LlxuICBfLnBsdWNrID0gZnVuY3Rpb24ob2JqLCBrZXkpIHtcbiAgICByZXR1cm4gXy5tYXAob2JqLCBfLnByb3BlcnR5KGtleSkpO1xuICB9O1xuXG4gIC8vIENvbnZlbmllbmNlIHZlcnNpb24gb2YgYSBjb21tb24gdXNlIGNhc2Ugb2YgYGZpbHRlcmA6IHNlbGVjdGluZyBvbmx5IG9iamVjdHNcbiAgLy8gY29udGFpbmluZyBzcGVjaWZpYyBga2V5OnZhbHVlYCBwYWlycy5cbiAgXy53aGVyZSA9IGZ1bmN0aW9uKG9iaiwgYXR0cnMpIHtcbiAgICByZXR1cm4gXy5maWx0ZXIob2JqLCBfLm1hdGNoZXIoYXR0cnMpKTtcbiAgfTtcblxuICAvLyBDb252ZW5pZW5jZSB2ZXJzaW9uIG9mIGEgY29tbW9uIHVzZSBjYXNlIG9mIGBmaW5kYDogZ2V0dGluZyB0aGUgZmlyc3Qgb2JqZWN0XG4gIC8vIGNvbnRhaW5pbmcgc3BlY2lmaWMgYGtleTp2YWx1ZWAgcGFpcnMuXG4gIF8uZmluZFdoZXJlID0gZnVuY3Rpb24ob2JqLCBhdHRycykge1xuICAgIHJldHVybiBfLmZpbmQob2JqLCBfLm1hdGNoZXIoYXR0cnMpKTtcbiAgfTtcblxuICAvLyBSZXR1cm4gdGhlIG1heGltdW0gZWxlbWVudCAob3IgZWxlbWVudC1iYXNlZCBjb21wdXRhdGlvbikuXG4gIF8ubWF4ID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICAgIHZhciByZXN1bHQgPSAtSW5maW5pdHksIGxhc3RDb21wdXRlZCA9IC1JbmZpbml0eSxcbiAgICAgICAgdmFsdWUsIGNvbXB1dGVkO1xuICAgIGlmIChpdGVyYXRlZSA9PSBudWxsIHx8IHR5cGVvZiBpdGVyYXRlZSA9PSAnbnVtYmVyJyAmJiB0eXBlb2Ygb2JqWzBdICE9ICdvYmplY3QnICYmIG9iaiAhPSBudWxsKSB7XG4gICAgICBvYmogPSBpc0FycmF5TGlrZShvYmopID8gb2JqIDogXy52YWx1ZXMob2JqKTtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBvYmoubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFsdWUgPSBvYmpbaV07XG4gICAgICAgIGlmICh2YWx1ZSAhPSBudWxsICYmIHZhbHVlID4gcmVzdWx0KSB7XG4gICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaXRlcmF0ZWUgPSBjYihpdGVyYXRlZSwgY29udGV4dCk7XG4gICAgICBfLmVhY2gob2JqLCBmdW5jdGlvbih2LCBpbmRleCwgbGlzdCkge1xuICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlKHYsIGluZGV4LCBsaXN0KTtcbiAgICAgICAgaWYgKGNvbXB1dGVkID4gbGFzdENvbXB1dGVkIHx8IGNvbXB1dGVkID09PSAtSW5maW5pdHkgJiYgcmVzdWx0ID09PSAtSW5maW5pdHkpIHtcbiAgICAgICAgICByZXN1bHQgPSB2O1xuICAgICAgICAgIGxhc3RDb21wdXRlZCA9IGNvbXB1dGVkO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBSZXR1cm4gdGhlIG1pbmltdW0gZWxlbWVudCAob3IgZWxlbWVudC1iYXNlZCBjb21wdXRhdGlvbikuXG4gIF8ubWluID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICAgIHZhciByZXN1bHQgPSBJbmZpbml0eSwgbGFzdENvbXB1dGVkID0gSW5maW5pdHksXG4gICAgICAgIHZhbHVlLCBjb21wdXRlZDtcbiAgICBpZiAoaXRlcmF0ZWUgPT0gbnVsbCB8fCB0eXBlb2YgaXRlcmF0ZWUgPT0gJ251bWJlcicgJiYgdHlwZW9mIG9ialswXSAhPSAnb2JqZWN0JyAmJiBvYmogIT0gbnVsbCkge1xuICAgICAgb2JqID0gaXNBcnJheUxpa2Uob2JqKSA/IG9iaiA6IF8udmFsdWVzKG9iaik7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gb2JqLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhbHVlID0gb2JqW2ldO1xuICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCAmJiB2YWx1ZSA8IHJlc3VsdCkge1xuICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGl0ZXJhdGVlID0gY2IoaXRlcmF0ZWUsIGNvbnRleHQpO1xuICAgICAgXy5lYWNoKG9iaiwgZnVuY3Rpb24odiwgaW5kZXgsIGxpc3QpIHtcbiAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSh2LCBpbmRleCwgbGlzdCk7XG4gICAgICAgIGlmIChjb21wdXRlZCA8IGxhc3RDb21wdXRlZCB8fCBjb21wdXRlZCA9PT0gSW5maW5pdHkgJiYgcmVzdWx0ID09PSBJbmZpbml0eSkge1xuICAgICAgICAgIHJlc3VsdCA9IHY7XG4gICAgICAgICAgbGFzdENvbXB1dGVkID0gY29tcHV0ZWQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIFNodWZmbGUgYSBjb2xsZWN0aW9uLlxuICBfLnNodWZmbGUgPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gXy5zYW1wbGUob2JqLCBJbmZpbml0eSk7XG4gIH07XG5cbiAgLy8gU2FtcGxlICoqbioqIHJhbmRvbSB2YWx1ZXMgZnJvbSBhIGNvbGxlY3Rpb24gdXNpbmcgdGhlIG1vZGVybiB2ZXJzaW9uIG9mIHRoZVxuICAvLyBbRmlzaGVyLVlhdGVzIHNodWZmbGVdKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRmlzaGVy4oCTWWF0ZXNfc2h1ZmZsZSkuXG4gIC8vIElmICoqbioqIGlzIG5vdCBzcGVjaWZpZWQsIHJldHVybnMgYSBzaW5nbGUgcmFuZG9tIGVsZW1lbnQuXG4gIC8vIFRoZSBpbnRlcm5hbCBgZ3VhcmRgIGFyZ3VtZW50IGFsbG93cyBpdCB0byB3b3JrIHdpdGggYG1hcGAuXG4gIF8uc2FtcGxlID0gZnVuY3Rpb24ob2JqLCBuLCBndWFyZCkge1xuICAgIGlmIChuID09IG51bGwgfHwgZ3VhcmQpIHtcbiAgICAgIGlmICghaXNBcnJheUxpa2Uob2JqKSkgb2JqID0gXy52YWx1ZXMob2JqKTtcbiAgICAgIHJldHVybiBvYmpbXy5yYW5kb20ob2JqLmxlbmd0aCAtIDEpXTtcbiAgICB9XG4gICAgdmFyIHNhbXBsZSA9IGlzQXJyYXlMaWtlKG9iaikgPyBfLmNsb25lKG9iaikgOiBfLnZhbHVlcyhvYmopO1xuICAgIHZhciBsZW5ndGggPSBnZXRMZW5ndGgoc2FtcGxlKTtcbiAgICBuID0gTWF0aC5tYXgoTWF0aC5taW4obiwgbGVuZ3RoKSwgMCk7XG4gICAgdmFyIGxhc3QgPSBsZW5ndGggLSAxO1xuICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBuOyBpbmRleCsrKSB7XG4gICAgICB2YXIgcmFuZCA9IF8ucmFuZG9tKGluZGV4LCBsYXN0KTtcbiAgICAgIHZhciB0ZW1wID0gc2FtcGxlW2luZGV4XTtcbiAgICAgIHNhbXBsZVtpbmRleF0gPSBzYW1wbGVbcmFuZF07XG4gICAgICBzYW1wbGVbcmFuZF0gPSB0ZW1wO1xuICAgIH1cbiAgICByZXR1cm4gc2FtcGxlLnNsaWNlKDAsIG4pO1xuICB9O1xuXG4gIC8vIFNvcnQgdGhlIG9iamVjdCdzIHZhbHVlcyBieSBhIGNyaXRlcmlvbiBwcm9kdWNlZCBieSBhbiBpdGVyYXRlZS5cbiAgXy5zb3J0QnkgPSBmdW5jdGlvbihvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICBpdGVyYXRlZSA9IGNiKGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgICByZXR1cm4gXy5wbHVjayhfLm1hcChvYmosIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGxpc3QpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgaW5kZXg6IGluZGV4KyssXG4gICAgICAgIGNyaXRlcmlhOiBpdGVyYXRlZSh2YWx1ZSwga2V5LCBsaXN0KVxuICAgICAgfTtcbiAgICB9KS5zb3J0KGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7XG4gICAgICB2YXIgYSA9IGxlZnQuY3JpdGVyaWE7XG4gICAgICB2YXIgYiA9IHJpZ2h0LmNyaXRlcmlhO1xuICAgICAgaWYgKGEgIT09IGIpIHtcbiAgICAgICAgaWYgKGEgPiBiIHx8IGEgPT09IHZvaWQgMCkgcmV0dXJuIDE7XG4gICAgICAgIGlmIChhIDwgYiB8fCBiID09PSB2b2lkIDApIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBsZWZ0LmluZGV4IC0gcmlnaHQuaW5kZXg7XG4gICAgfSksICd2YWx1ZScpO1xuICB9O1xuXG4gIC8vIEFuIGludGVybmFsIGZ1bmN0aW9uIHVzZWQgZm9yIGFnZ3JlZ2F0ZSBcImdyb3VwIGJ5XCIgb3BlcmF0aW9ucy5cbiAgdmFyIGdyb3VwID0gZnVuY3Rpb24oYmVoYXZpb3IsIHBhcnRpdGlvbikge1xuICAgIHJldHVybiBmdW5jdGlvbihvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gcGFydGl0aW9uID8gW1tdLCBbXV0gOiB7fTtcbiAgICAgIGl0ZXJhdGVlID0gY2IoaXRlcmF0ZWUsIGNvbnRleHQpO1xuICAgICAgXy5lYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4KSB7XG4gICAgICAgIHZhciBrZXkgPSBpdGVyYXRlZSh2YWx1ZSwgaW5kZXgsIG9iaik7XG4gICAgICAgIGJlaGF2aW9yKHJlc3VsdCwgdmFsdWUsIGtleSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgfTtcblxuICAvLyBHcm91cHMgdGhlIG9iamVjdCdzIHZhbHVlcyBieSBhIGNyaXRlcmlvbi4gUGFzcyBlaXRoZXIgYSBzdHJpbmcgYXR0cmlidXRlXG4gIC8vIHRvIGdyb3VwIGJ5LCBvciBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgY3JpdGVyaW9uLlxuICBfLmdyb3VwQnkgPSBncm91cChmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICBpZiAoXy5oYXMocmVzdWx0LCBrZXkpKSByZXN1bHRba2V5XS5wdXNoKHZhbHVlKTsgZWxzZSByZXN1bHRba2V5XSA9IFt2YWx1ZV07XG4gIH0pO1xuXG4gIC8vIEluZGV4ZXMgdGhlIG9iamVjdCdzIHZhbHVlcyBieSBhIGNyaXRlcmlvbiwgc2ltaWxhciB0byBgZ3JvdXBCeWAsIGJ1dCBmb3JcbiAgLy8gd2hlbiB5b3Uga25vdyB0aGF0IHlvdXIgaW5kZXggdmFsdWVzIHdpbGwgYmUgdW5pcXVlLlxuICBfLmluZGV4QnkgPSBncm91cChmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICByZXN1bHRba2V5XSA9IHZhbHVlO1xuICB9KTtcblxuICAvLyBDb3VudHMgaW5zdGFuY2VzIG9mIGFuIG9iamVjdCB0aGF0IGdyb3VwIGJ5IGEgY2VydGFpbiBjcml0ZXJpb24uIFBhc3NcbiAgLy8gZWl0aGVyIGEgc3RyaW5nIGF0dHJpYnV0ZSB0byBjb3VudCBieSwgb3IgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlXG4gIC8vIGNyaXRlcmlvbi5cbiAgXy5jb3VudEJ5ID0gZ3JvdXAoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgaWYgKF8uaGFzKHJlc3VsdCwga2V5KSkgcmVzdWx0W2tleV0rKzsgZWxzZSByZXN1bHRba2V5XSA9IDE7XG4gIH0pO1xuXG4gIHZhciByZVN0clN5bWJvbCA9IC9bXlxcdWQ4MDAtXFx1ZGZmZl18W1xcdWQ4MDAtXFx1ZGJmZl1bXFx1ZGMwMC1cXHVkZmZmXXxbXFx1ZDgwMC1cXHVkZmZmXS9nO1xuICAvLyBTYWZlbHkgY3JlYXRlIGEgcmVhbCwgbGl2ZSBhcnJheSBmcm9tIGFueXRoaW5nIGl0ZXJhYmxlLlxuICBfLnRvQXJyYXkgPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAoIW9iaikgcmV0dXJuIFtdO1xuICAgIGlmIChfLmlzQXJyYXkob2JqKSkgcmV0dXJuIHNsaWNlLmNhbGwob2JqKTtcbiAgICBpZiAoXy5pc1N0cmluZyhvYmopKSB7XG4gICAgICAvLyBLZWVwIHN1cnJvZ2F0ZSBwYWlyIGNoYXJhY3RlcnMgdG9nZXRoZXJcbiAgICAgIHJldHVybiBvYmoubWF0Y2gocmVTdHJTeW1ib2wpO1xuICAgIH1cbiAgICBpZiAoaXNBcnJheUxpa2Uob2JqKSkgcmV0dXJuIF8ubWFwKG9iaiwgXy5pZGVudGl0eSk7XG4gICAgcmV0dXJuIF8udmFsdWVzKG9iaik7XG4gIH07XG5cbiAgLy8gUmV0dXJuIHRoZSBudW1iZXIgb2YgZWxlbWVudHMgaW4gYW4gb2JqZWN0LlxuICBfLnNpemUgPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAob2JqID09IG51bGwpIHJldHVybiAwO1xuICAgIHJldHVybiBpc0FycmF5TGlrZShvYmopID8gb2JqLmxlbmd0aCA6IF8ua2V5cyhvYmopLmxlbmd0aDtcbiAgfTtcblxuICAvLyBTcGxpdCBhIGNvbGxlY3Rpb24gaW50byB0d28gYXJyYXlzOiBvbmUgd2hvc2UgZWxlbWVudHMgYWxsIHNhdGlzZnkgdGhlIGdpdmVuXG4gIC8vIHByZWRpY2F0ZSwgYW5kIG9uZSB3aG9zZSBlbGVtZW50cyBhbGwgZG8gbm90IHNhdGlzZnkgdGhlIHByZWRpY2F0ZS5cbiAgXy5wYXJ0aXRpb24gPSBncm91cChmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBwYXNzKSB7XG4gICAgcmVzdWx0W3Bhc3MgPyAwIDogMV0ucHVzaCh2YWx1ZSk7XG4gIH0sIHRydWUpO1xuXG4gIC8vIEFycmF5IEZ1bmN0aW9uc1xuICAvLyAtLS0tLS0tLS0tLS0tLS1cblxuICAvLyBHZXQgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYW4gYXJyYXkuIFBhc3NpbmcgKipuKiogd2lsbCByZXR1cm4gdGhlIGZpcnN0IE5cbiAgLy8gdmFsdWVzIGluIHRoZSBhcnJheS4gQWxpYXNlZCBhcyBgaGVhZGAgYW5kIGB0YWtlYC4gVGhlICoqZ3VhcmQqKiBjaGVja1xuICAvLyBhbGxvd3MgaXQgdG8gd29yayB3aXRoIGBfLm1hcGAuXG4gIF8uZmlyc3QgPSBfLmhlYWQgPSBfLnRha2UgPSBmdW5jdGlvbihhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICBpZiAoYXJyYXkgPT0gbnVsbCB8fCBhcnJheS5sZW5ndGggPCAxKSByZXR1cm4gdm9pZCAwO1xuICAgIGlmIChuID09IG51bGwgfHwgZ3VhcmQpIHJldHVybiBhcnJheVswXTtcbiAgICByZXR1cm4gXy5pbml0aWFsKGFycmF5LCBhcnJheS5sZW5ndGggLSBuKTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGV2ZXJ5dGhpbmcgYnV0IHRoZSBsYXN0IGVudHJ5IG9mIHRoZSBhcnJheS4gRXNwZWNpYWxseSB1c2VmdWwgb25cbiAgLy8gdGhlIGFyZ3VtZW50cyBvYmplY3QuIFBhc3NpbmcgKipuKiogd2lsbCByZXR1cm4gYWxsIHRoZSB2YWx1ZXMgaW5cbiAgLy8gdGhlIGFycmF5LCBleGNsdWRpbmcgdGhlIGxhc3QgTi5cbiAgXy5pbml0aWFsID0gZnVuY3Rpb24oYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgcmV0dXJuIHNsaWNlLmNhbGwoYXJyYXksIDAsIE1hdGgubWF4KDAsIGFycmF5Lmxlbmd0aCAtIChuID09IG51bGwgfHwgZ3VhcmQgPyAxIDogbikpKTtcbiAgfTtcblxuICAvLyBHZXQgdGhlIGxhc3QgZWxlbWVudCBvZiBhbiBhcnJheS4gUGFzc2luZyAqKm4qKiB3aWxsIHJldHVybiB0aGUgbGFzdCBOXG4gIC8vIHZhbHVlcyBpbiB0aGUgYXJyYXkuXG4gIF8ubGFzdCA9IGZ1bmN0aW9uKGFycmF5LCBuLCBndWFyZCkge1xuICAgIGlmIChhcnJheSA9PSBudWxsIHx8IGFycmF5Lmxlbmd0aCA8IDEpIHJldHVybiB2b2lkIDA7XG4gICAgaWYgKG4gPT0gbnVsbCB8fCBndWFyZCkgcmV0dXJuIGFycmF5W2FycmF5Lmxlbmd0aCAtIDFdO1xuICAgIHJldHVybiBfLnJlc3QoYXJyYXksIE1hdGgubWF4KDAsIGFycmF5Lmxlbmd0aCAtIG4pKTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGV2ZXJ5dGhpbmcgYnV0IHRoZSBmaXJzdCBlbnRyeSBvZiB0aGUgYXJyYXkuIEFsaWFzZWQgYXMgYHRhaWxgIGFuZCBgZHJvcGAuXG4gIC8vIEVzcGVjaWFsbHkgdXNlZnVsIG9uIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBQYXNzaW5nIGFuICoqbioqIHdpbGwgcmV0dXJuXG4gIC8vIHRoZSByZXN0IE4gdmFsdWVzIGluIHRoZSBhcnJheS5cbiAgXy5yZXN0ID0gXy50YWlsID0gXy5kcm9wID0gZnVuY3Rpb24oYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgcmV0dXJuIHNsaWNlLmNhbGwoYXJyYXksIG4gPT0gbnVsbCB8fCBndWFyZCA/IDEgOiBuKTtcbiAgfTtcblxuICAvLyBUcmltIG91dCBhbGwgZmFsc3kgdmFsdWVzIGZyb20gYW4gYXJyYXkuXG4gIF8uY29tcGFjdCA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgcmV0dXJuIF8uZmlsdGVyKGFycmF5LCBCb29sZWFuKTtcbiAgfTtcblxuICAvLyBJbnRlcm5hbCBpbXBsZW1lbnRhdGlvbiBvZiBhIHJlY3Vyc2l2ZSBgZmxhdHRlbmAgZnVuY3Rpb24uXG4gIHZhciBmbGF0dGVuID0gZnVuY3Rpb24oaW5wdXQsIHNoYWxsb3csIHN0cmljdCwgb3V0cHV0KSB7XG4gICAgb3V0cHV0ID0gb3V0cHV0IHx8IFtdO1xuICAgIHZhciBpZHggPSBvdXRwdXQubGVuZ3RoO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBnZXRMZW5ndGgoaW5wdXQpOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB2YWx1ZSA9IGlucHV0W2ldO1xuICAgICAgaWYgKGlzQXJyYXlMaWtlKHZhbHVlKSAmJiAoXy5pc0FycmF5KHZhbHVlKSB8fCBfLmlzQXJndW1lbnRzKHZhbHVlKSkpIHtcbiAgICAgICAgLy8gRmxhdHRlbiBjdXJyZW50IGxldmVsIG9mIGFycmF5IG9yIGFyZ3VtZW50cyBvYmplY3QuXG4gICAgICAgIGlmIChzaGFsbG93KSB7XG4gICAgICAgICAgdmFyIGogPSAwLCBsZW4gPSB2YWx1ZS5sZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKGogPCBsZW4pIG91dHB1dFtpZHgrK10gPSB2YWx1ZVtqKytdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZsYXR0ZW4odmFsdWUsIHNoYWxsb3csIHN0cmljdCwgb3V0cHV0KTtcbiAgICAgICAgICBpZHggPSBvdXRwdXQubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKCFzdHJpY3QpIHtcbiAgICAgICAgb3V0cHV0W2lkeCsrXSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0O1xuICB9O1xuXG4gIC8vIEZsYXR0ZW4gb3V0IGFuIGFycmF5LCBlaXRoZXIgcmVjdXJzaXZlbHkgKGJ5IGRlZmF1bHQpLCBvciBqdXN0IG9uZSBsZXZlbC5cbiAgXy5mbGF0dGVuID0gZnVuY3Rpb24oYXJyYXksIHNoYWxsb3cpIHtcbiAgICByZXR1cm4gZmxhdHRlbihhcnJheSwgc2hhbGxvdywgZmFsc2UpO1xuICB9O1xuXG4gIC8vIFJldHVybiBhIHZlcnNpb24gb2YgdGhlIGFycmF5IHRoYXQgZG9lcyBub3QgY29udGFpbiB0aGUgc3BlY2lmaWVkIHZhbHVlKHMpLlxuICBfLndpdGhvdXQgPSByZXN0QXJndW1lbnRzKGZ1bmN0aW9uKGFycmF5LCBvdGhlckFycmF5cykge1xuICAgIHJldHVybiBfLmRpZmZlcmVuY2UoYXJyYXksIG90aGVyQXJyYXlzKTtcbiAgfSk7XG5cbiAgLy8gUHJvZHVjZSBhIGR1cGxpY2F0ZS1mcmVlIHZlcnNpb24gb2YgdGhlIGFycmF5LiBJZiB0aGUgYXJyYXkgaGFzIGFscmVhZHlcbiAgLy8gYmVlbiBzb3J0ZWQsIHlvdSBoYXZlIHRoZSBvcHRpb24gb2YgdXNpbmcgYSBmYXN0ZXIgYWxnb3JpdGhtLlxuICAvLyBUaGUgZmFzdGVyIGFsZ29yaXRobSB3aWxsIG5vdCB3b3JrIHdpdGggYW4gaXRlcmF0ZWUgaWYgdGhlIGl0ZXJhdGVlXG4gIC8vIGlzIG5vdCBhIG9uZS10by1vbmUgZnVuY3Rpb24sIHNvIHByb3ZpZGluZyBhbiBpdGVyYXRlZSB3aWxsIGRpc2FibGVcbiAgLy8gdGhlIGZhc3RlciBhbGdvcml0aG0uXG4gIC8vIEFsaWFzZWQgYXMgYHVuaXF1ZWAuXG4gIF8udW5pcSA9IF8udW5pcXVlID0gZnVuY3Rpb24oYXJyYXksIGlzU29ydGVkLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICAgIGlmICghXy5pc0Jvb2xlYW4oaXNTb3J0ZWQpKSB7XG4gICAgICBjb250ZXh0ID0gaXRlcmF0ZWU7XG4gICAgICBpdGVyYXRlZSA9IGlzU29ydGVkO1xuICAgICAgaXNTb3J0ZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGl0ZXJhdGVlICE9IG51bGwpIGl0ZXJhdGVlID0gY2IoaXRlcmF0ZWUsIGNvbnRleHQpO1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICB2YXIgc2VlbiA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBnZXRMZW5ndGgoYXJyYXkpOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2ldLFxuICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSwgaSwgYXJyYXkpIDogdmFsdWU7XG4gICAgICBpZiAoaXNTb3J0ZWQgJiYgIWl0ZXJhdGVlKSB7XG4gICAgICAgIGlmICghaSB8fCBzZWVuICE9PSBjb21wdXRlZCkgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICBzZWVuID0gY29tcHV0ZWQ7XG4gICAgICB9IGVsc2UgaWYgKGl0ZXJhdGVlKSB7XG4gICAgICAgIGlmICghXy5jb250YWlucyhzZWVuLCBjb21wdXRlZCkpIHtcbiAgICAgICAgICBzZWVuLnB1c2goY29tcHV0ZWQpO1xuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICghXy5jb250YWlucyhyZXN1bHQsIHZhbHVlKSkge1xuICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gUHJvZHVjZSBhbiBhcnJheSB0aGF0IGNvbnRhaW5zIHRoZSB1bmlvbjogZWFjaCBkaXN0aW5jdCBlbGVtZW50IGZyb20gYWxsIG9mXG4gIC8vIHRoZSBwYXNzZWQtaW4gYXJyYXlzLlxuICBfLnVuaW9uID0gcmVzdEFyZ3VtZW50cyhmdW5jdGlvbihhcnJheXMpIHtcbiAgICByZXR1cm4gXy51bmlxKGZsYXR0ZW4oYXJyYXlzLCB0cnVlLCB0cnVlKSk7XG4gIH0pO1xuXG4gIC8vIFByb2R1Y2UgYW4gYXJyYXkgdGhhdCBjb250YWlucyBldmVyeSBpdGVtIHNoYXJlZCBiZXR3ZWVuIGFsbCB0aGVcbiAgLy8gcGFzc2VkLWluIGFycmF5cy5cbiAgXy5pbnRlcnNlY3Rpb24gPSBmdW5jdGlvbihhcnJheSkge1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICB2YXIgYXJnc0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGdldExlbmd0aChhcnJheSk7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGl0ZW0gPSBhcnJheVtpXTtcbiAgICAgIGlmIChfLmNvbnRhaW5zKHJlc3VsdCwgaXRlbSkpIGNvbnRpbnVlO1xuICAgICAgdmFyIGo7XG4gICAgICBmb3IgKGogPSAxOyBqIDwgYXJnc0xlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmICghXy5jb250YWlucyhhcmd1bWVudHNbal0sIGl0ZW0pKSBicmVhaztcbiAgICAgIH1cbiAgICAgIGlmIChqID09PSBhcmdzTGVuZ3RoKSByZXN1bHQucHVzaChpdGVtKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBUYWtlIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gb25lIGFycmF5IGFuZCBhIG51bWJlciBvZiBvdGhlciBhcnJheXMuXG4gIC8vIE9ubHkgdGhlIGVsZW1lbnRzIHByZXNlbnQgaW4ganVzdCB0aGUgZmlyc3QgYXJyYXkgd2lsbCByZW1haW4uXG4gIF8uZGlmZmVyZW5jZSA9IHJlc3RBcmd1bWVudHMoZnVuY3Rpb24oYXJyYXksIHJlc3QpIHtcbiAgICByZXN0ID0gZmxhdHRlbihyZXN0LCB0cnVlLCB0cnVlKTtcbiAgICByZXR1cm4gXy5maWx0ZXIoYXJyYXksIGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAgIHJldHVybiAhXy5jb250YWlucyhyZXN0LCB2YWx1ZSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIC8vIENvbXBsZW1lbnQgb2YgXy56aXAuIFVuemlwIGFjY2VwdHMgYW4gYXJyYXkgb2YgYXJyYXlzIGFuZCBncm91cHNcbiAgLy8gZWFjaCBhcnJheSdzIGVsZW1lbnRzIG9uIHNoYXJlZCBpbmRpY2VzLlxuICBfLnVuemlwID0gZnVuY3Rpb24oYXJyYXkpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkgJiYgXy5tYXgoYXJyYXksIGdldExlbmd0aCkubGVuZ3RoIHx8IDA7XG4gICAgdmFyIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICByZXN1bHRbaW5kZXhdID0gXy5wbHVjayhhcnJheSwgaW5kZXgpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIFppcCB0b2dldGhlciBtdWx0aXBsZSBsaXN0cyBpbnRvIGEgc2luZ2xlIGFycmF5IC0tIGVsZW1lbnRzIHRoYXQgc2hhcmVcbiAgLy8gYW4gaW5kZXggZ28gdG9nZXRoZXIuXG4gIF8uemlwID0gcmVzdEFyZ3VtZW50cyhfLnVuemlwKTtcblxuICAvLyBDb252ZXJ0cyBsaXN0cyBpbnRvIG9iamVjdHMuIFBhc3MgZWl0aGVyIGEgc2luZ2xlIGFycmF5IG9mIGBba2V5LCB2YWx1ZV1gXG4gIC8vIHBhaXJzLCBvciB0d28gcGFyYWxsZWwgYXJyYXlzIG9mIHRoZSBzYW1lIGxlbmd0aCAtLSBvbmUgb2Yga2V5cywgYW5kIG9uZSBvZlxuICAvLyB0aGUgY29ycmVzcG9uZGluZyB2YWx1ZXMuIFBhc3NpbmcgYnkgcGFpcnMgaXMgdGhlIHJldmVyc2Ugb2YgXy5wYWlycy5cbiAgXy5vYmplY3QgPSBmdW5jdGlvbihsaXN0LCB2YWx1ZXMpIHtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGdldExlbmd0aChsaXN0KTsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodmFsdWVzKSB7XG4gICAgICAgIHJlc3VsdFtsaXN0W2ldXSA9IHZhbHVlc1tpXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdFtsaXN0W2ldWzBdXSA9IGxpc3RbaV1bMV07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gR2VuZXJhdG9yIGZ1bmN0aW9uIHRvIGNyZWF0ZSB0aGUgZmluZEluZGV4IGFuZCBmaW5kTGFzdEluZGV4IGZ1bmN0aW9ucy5cbiAgdmFyIGNyZWF0ZVByZWRpY2F0ZUluZGV4RmluZGVyID0gZnVuY3Rpb24oZGlyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGFycmF5LCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICAgIHByZWRpY2F0ZSA9IGNiKHByZWRpY2F0ZSwgY29udGV4dCk7XG4gICAgICB2YXIgbGVuZ3RoID0gZ2V0TGVuZ3RoKGFycmF5KTtcbiAgICAgIHZhciBpbmRleCA9IGRpciA+IDAgPyAwIDogbGVuZ3RoIC0gMTtcbiAgICAgIGZvciAoOyBpbmRleCA+PSAwICYmIGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSBkaXIpIHtcbiAgICAgICAgaWYgKHByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9O1xuICB9O1xuXG4gIC8vIFJldHVybnMgdGhlIGZpcnN0IGluZGV4IG9uIGFuIGFycmF5LWxpa2UgdGhhdCBwYXNzZXMgYSBwcmVkaWNhdGUgdGVzdC5cbiAgXy5maW5kSW5kZXggPSBjcmVhdGVQcmVkaWNhdGVJbmRleEZpbmRlcigxKTtcbiAgXy5maW5kTGFzdEluZGV4ID0gY3JlYXRlUHJlZGljYXRlSW5kZXhGaW5kZXIoLTEpO1xuXG4gIC8vIFVzZSBhIGNvbXBhcmF0b3IgZnVuY3Rpb24gdG8gZmlndXJlIG91dCB0aGUgc21hbGxlc3QgaW5kZXggYXQgd2hpY2hcbiAgLy8gYW4gb2JqZWN0IHNob3VsZCBiZSBpbnNlcnRlZCBzbyBhcyB0byBtYWludGFpbiBvcmRlci4gVXNlcyBiaW5hcnkgc2VhcmNoLlxuICBfLnNvcnRlZEluZGV4ID0gZnVuY3Rpb24oYXJyYXksIG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgICBpdGVyYXRlZSA9IGNiKGl0ZXJhdGVlLCBjb250ZXh0LCAxKTtcbiAgICB2YXIgdmFsdWUgPSBpdGVyYXRlZShvYmopO1xuICAgIHZhciBsb3cgPSAwLCBoaWdoID0gZ2V0TGVuZ3RoKGFycmF5KTtcbiAgICB3aGlsZSAobG93IDwgaGlnaCkge1xuICAgICAgdmFyIG1pZCA9IE1hdGguZmxvb3IoKGxvdyArIGhpZ2gpIC8gMik7XG4gICAgICBpZiAoaXRlcmF0ZWUoYXJyYXlbbWlkXSkgPCB2YWx1ZSkgbG93ID0gbWlkICsgMTsgZWxzZSBoaWdoID0gbWlkO1xuICAgIH1cbiAgICByZXR1cm4gbG93O1xuICB9O1xuXG4gIC8vIEdlbmVyYXRvciBmdW5jdGlvbiB0byBjcmVhdGUgdGhlIGluZGV4T2YgYW5kIGxhc3RJbmRleE9mIGZ1bmN0aW9ucy5cbiAgdmFyIGNyZWF0ZUluZGV4RmluZGVyID0gZnVuY3Rpb24oZGlyLCBwcmVkaWNhdGVGaW5kLCBzb3J0ZWRJbmRleCkge1xuICAgIHJldHVybiBmdW5jdGlvbihhcnJheSwgaXRlbSwgaWR4KSB7XG4gICAgICB2YXIgaSA9IDAsIGxlbmd0aCA9IGdldExlbmd0aChhcnJheSk7XG4gICAgICBpZiAodHlwZW9mIGlkeCA9PSAnbnVtYmVyJykge1xuICAgICAgICBpZiAoZGlyID4gMCkge1xuICAgICAgICAgIGkgPSBpZHggPj0gMCA/IGlkeCA6IE1hdGgubWF4KGlkeCArIGxlbmd0aCwgaSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGVuZ3RoID0gaWR4ID49IDAgPyBNYXRoLm1pbihpZHggKyAxLCBsZW5ndGgpIDogaWR4ICsgbGVuZ3RoICsgMTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChzb3J0ZWRJbmRleCAmJiBpZHggJiYgbGVuZ3RoKSB7XG4gICAgICAgIGlkeCA9IHNvcnRlZEluZGV4KGFycmF5LCBpdGVtKTtcbiAgICAgICAgcmV0dXJuIGFycmF5W2lkeF0gPT09IGl0ZW0gPyBpZHggOiAtMTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtICE9PSBpdGVtKSB7XG4gICAgICAgIGlkeCA9IHByZWRpY2F0ZUZpbmQoc2xpY2UuY2FsbChhcnJheSwgaSwgbGVuZ3RoKSwgXy5pc05hTik7XG4gICAgICAgIHJldHVybiBpZHggPj0gMCA/IGlkeCArIGkgOiAtMTtcbiAgICAgIH1cbiAgICAgIGZvciAoaWR4ID0gZGlyID4gMCA/IGkgOiBsZW5ndGggLSAxOyBpZHggPj0gMCAmJiBpZHggPCBsZW5ndGg7IGlkeCArPSBkaXIpIHtcbiAgICAgICAgaWYgKGFycmF5W2lkeF0gPT09IGl0ZW0pIHJldHVybiBpZHg7XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfTtcbiAgfTtcblxuICAvLyBSZXR1cm4gdGhlIHBvc2l0aW9uIG9mIHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9mIGFuIGl0ZW0gaW4gYW4gYXJyYXksXG4gIC8vIG9yIC0xIGlmIHRoZSBpdGVtIGlzIG5vdCBpbmNsdWRlZCBpbiB0aGUgYXJyYXkuXG4gIC8vIElmIHRoZSBhcnJheSBpcyBsYXJnZSBhbmQgYWxyZWFkeSBpbiBzb3J0IG9yZGVyLCBwYXNzIGB0cnVlYFxuICAvLyBmb3IgKippc1NvcnRlZCoqIHRvIHVzZSBiaW5hcnkgc2VhcmNoLlxuICBfLmluZGV4T2YgPSBjcmVhdGVJbmRleEZpbmRlcigxLCBfLmZpbmRJbmRleCwgXy5zb3J0ZWRJbmRleCk7XG4gIF8ubGFzdEluZGV4T2YgPSBjcmVhdGVJbmRleEZpbmRlcigtMSwgXy5maW5kTGFzdEluZGV4KTtcblxuICAvLyBHZW5lcmF0ZSBhbiBpbnRlZ2VyIEFycmF5IGNvbnRhaW5pbmcgYW4gYXJpdGhtZXRpYyBwcm9ncmVzc2lvbi4gQSBwb3J0IG9mXG4gIC8vIHRoZSBuYXRpdmUgUHl0aG9uIGByYW5nZSgpYCBmdW5jdGlvbi4gU2VlXG4gIC8vIFt0aGUgUHl0aG9uIGRvY3VtZW50YXRpb25dKGh0dHA6Ly9kb2NzLnB5dGhvbi5vcmcvbGlicmFyeS9mdW5jdGlvbnMuaHRtbCNyYW5nZSkuXG4gIF8ucmFuZ2UgPSBmdW5jdGlvbihzdGFydCwgc3RvcCwgc3RlcCkge1xuICAgIGlmIChzdG9wID09IG51bGwpIHtcbiAgICAgIHN0b3AgPSBzdGFydCB8fCAwO1xuICAgICAgc3RhcnQgPSAwO1xuICAgIH1cbiAgICBpZiAoIXN0ZXApIHtcbiAgICAgIHN0ZXAgPSBzdG9wIDwgc3RhcnQgPyAtMSA6IDE7XG4gICAgfVxuXG4gICAgdmFyIGxlbmd0aCA9IE1hdGgubWF4KE1hdGguY2VpbCgoc3RvcCAtIHN0YXJ0KSAvIHN0ZXApLCAwKTtcbiAgICB2YXIgcmFuZ2UgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgZm9yICh2YXIgaWR4ID0gMDsgaWR4IDwgbGVuZ3RoOyBpZHgrKywgc3RhcnQgKz0gc3RlcCkge1xuICAgICAgcmFuZ2VbaWR4XSA9IHN0YXJ0O1xuICAgIH1cblxuICAgIHJldHVybiByYW5nZTtcbiAgfTtcblxuICAvLyBDaHVuayBhIHNpbmdsZSBhcnJheSBpbnRvIG11bHRpcGxlIGFycmF5cywgZWFjaCBjb250YWluaW5nIGBjb3VudGAgb3IgZmV3ZXJcbiAgLy8gaXRlbXMuXG4gIF8uY2h1bmsgPSBmdW5jdGlvbihhcnJheSwgY291bnQpIHtcbiAgICBpZiAoY291bnQgPT0gbnVsbCB8fCBjb3VudCA8IDEpIHJldHVybiBbXTtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIGkgPSAwLCBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgd2hpbGUgKGkgPCBsZW5ndGgpIHtcbiAgICAgIHJlc3VsdC5wdXNoKHNsaWNlLmNhbGwoYXJyYXksIGksIGkgKz0gY291bnQpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBGdW5jdGlvbiAoYWhlbSkgRnVuY3Rpb25zXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vIERldGVybWluZXMgd2hldGhlciB0byBleGVjdXRlIGEgZnVuY3Rpb24gYXMgYSBjb25zdHJ1Y3RvclxuICAvLyBvciBhIG5vcm1hbCBmdW5jdGlvbiB3aXRoIHRoZSBwcm92aWRlZCBhcmd1bWVudHMuXG4gIHZhciBleGVjdXRlQm91bmQgPSBmdW5jdGlvbihzb3VyY2VGdW5jLCBib3VuZEZ1bmMsIGNvbnRleHQsIGNhbGxpbmdDb250ZXh0LCBhcmdzKSB7XG4gICAgaWYgKCEoY2FsbGluZ0NvbnRleHQgaW5zdGFuY2VvZiBib3VuZEZ1bmMpKSByZXR1cm4gc291cmNlRnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICB2YXIgc2VsZiA9IGJhc2VDcmVhdGUoc291cmNlRnVuYy5wcm90b3R5cGUpO1xuICAgIHZhciByZXN1bHQgPSBzb3VyY2VGdW5jLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICAgIGlmIChfLmlzT2JqZWN0KHJlc3VsdCkpIHJldHVybiByZXN1bHQ7XG4gICAgcmV0dXJuIHNlbGY7XG4gIH07XG5cbiAgLy8gQ3JlYXRlIGEgZnVuY3Rpb24gYm91bmQgdG8gYSBnaXZlbiBvYmplY3QgKGFzc2lnbmluZyBgdGhpc2AsIGFuZCBhcmd1bWVudHMsXG4gIC8vIG9wdGlvbmFsbHkpLiBEZWxlZ2F0ZXMgdG8gKipFQ01BU2NyaXB0IDUqKidzIG5hdGl2ZSBgRnVuY3Rpb24uYmluZGAgaWZcbiAgLy8gYXZhaWxhYmxlLlxuICBfLmJpbmQgPSByZXN0QXJndW1lbnRzKGZ1bmN0aW9uKGZ1bmMsIGNvbnRleHQsIGFyZ3MpIHtcbiAgICBpZiAoIV8uaXNGdW5jdGlvbihmdW5jKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQmluZCBtdXN0IGJlIGNhbGxlZCBvbiBhIGZ1bmN0aW9uJyk7XG4gICAgdmFyIGJvdW5kID0gcmVzdEFyZ3VtZW50cyhmdW5jdGlvbihjYWxsQXJncykge1xuICAgICAgcmV0dXJuIGV4ZWN1dGVCb3VuZChmdW5jLCBib3VuZCwgY29udGV4dCwgdGhpcywgYXJncy5jb25jYXQoY2FsbEFyZ3MpKTtcbiAgICB9KTtcbiAgICByZXR1cm4gYm91bmQ7XG4gIH0pO1xuXG4gIC8vIFBhcnRpYWxseSBhcHBseSBhIGZ1bmN0aW9uIGJ5IGNyZWF0aW5nIGEgdmVyc2lvbiB0aGF0IGhhcyBoYWQgc29tZSBvZiBpdHNcbiAgLy8gYXJndW1lbnRzIHByZS1maWxsZWQsIHdpdGhvdXQgY2hhbmdpbmcgaXRzIGR5bmFtaWMgYHRoaXNgIGNvbnRleHQuIF8gYWN0c1xuICAvLyBhcyBhIHBsYWNlaG9sZGVyIGJ5IGRlZmF1bHQsIGFsbG93aW5nIGFueSBjb21iaW5hdGlvbiBvZiBhcmd1bWVudHMgdG8gYmVcbiAgLy8gcHJlLWZpbGxlZC4gU2V0IGBfLnBhcnRpYWwucGxhY2Vob2xkZXJgIGZvciBhIGN1c3RvbSBwbGFjZWhvbGRlciBhcmd1bWVudC5cbiAgXy5wYXJ0aWFsID0gcmVzdEFyZ3VtZW50cyhmdW5jdGlvbihmdW5jLCBib3VuZEFyZ3MpIHtcbiAgICB2YXIgcGxhY2Vob2xkZXIgPSBfLnBhcnRpYWwucGxhY2Vob2xkZXI7XG4gICAgdmFyIGJvdW5kID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcG9zaXRpb24gPSAwLCBsZW5ndGggPSBib3VuZEFyZ3MubGVuZ3RoO1xuICAgICAgdmFyIGFyZ3MgPSBBcnJheShsZW5ndGgpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBhcmdzW2ldID0gYm91bmRBcmdzW2ldID09PSBwbGFjZWhvbGRlciA/IGFyZ3VtZW50c1twb3NpdGlvbisrXSA6IGJvdW5kQXJnc1tpXTtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChwb3NpdGlvbiA8IGFyZ3VtZW50cy5sZW5ndGgpIGFyZ3MucHVzaChhcmd1bWVudHNbcG9zaXRpb24rK10pO1xuICAgICAgcmV0dXJuIGV4ZWN1dGVCb3VuZChmdW5jLCBib3VuZCwgdGhpcywgdGhpcywgYXJncyk7XG4gICAgfTtcbiAgICByZXR1cm4gYm91bmQ7XG4gIH0pO1xuXG4gIF8ucGFydGlhbC5wbGFjZWhvbGRlciA9IF87XG5cbiAgLy8gQmluZCBhIG51bWJlciBvZiBhbiBvYmplY3QncyBtZXRob2RzIHRvIHRoYXQgb2JqZWN0LiBSZW1haW5pbmcgYXJndW1lbnRzXG4gIC8vIGFyZSB0aGUgbWV0aG9kIG5hbWVzIHRvIGJlIGJvdW5kLiBVc2VmdWwgZm9yIGVuc3VyaW5nIHRoYXQgYWxsIGNhbGxiYWNrc1xuICAvLyBkZWZpbmVkIG9uIGFuIG9iamVjdCBiZWxvbmcgdG8gaXQuXG4gIF8uYmluZEFsbCA9IHJlc3RBcmd1bWVudHMoZnVuY3Rpb24ob2JqLCBrZXlzKSB7XG4gICAga2V5cyA9IGZsYXR0ZW4oa2V5cywgZmFsc2UsIGZhbHNlKTtcbiAgICB2YXIgaW5kZXggPSBrZXlzLmxlbmd0aDtcbiAgICBpZiAoaW5kZXggPCAxKSB0aHJvdyBuZXcgRXJyb3IoJ2JpbmRBbGwgbXVzdCBiZSBwYXNzZWQgZnVuY3Rpb24gbmFtZXMnKTtcbiAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgdmFyIGtleSA9IGtleXNbaW5kZXhdO1xuICAgICAgb2JqW2tleV0gPSBfLmJpbmQob2JqW2tleV0sIG9iaik7XG4gICAgfVxuICB9KTtcblxuICAvLyBNZW1vaXplIGFuIGV4cGVuc2l2ZSBmdW5jdGlvbiBieSBzdG9yaW5nIGl0cyByZXN1bHRzLlxuICBfLm1lbW9pemUgPSBmdW5jdGlvbihmdW5jLCBoYXNoZXIpIHtcbiAgICB2YXIgbWVtb2l6ZSA9IGZ1bmN0aW9uKGtleSkge1xuICAgICAgdmFyIGNhY2hlID0gbWVtb2l6ZS5jYWNoZTtcbiAgICAgIHZhciBhZGRyZXNzID0gJycgKyAoaGFzaGVyID8gaGFzaGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiBrZXkpO1xuICAgICAgaWYgKCFfLmhhcyhjYWNoZSwgYWRkcmVzcykpIGNhY2hlW2FkZHJlc3NdID0gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgcmV0dXJuIGNhY2hlW2FkZHJlc3NdO1xuICAgIH07XG4gICAgbWVtb2l6ZS5jYWNoZSA9IHt9O1xuICAgIHJldHVybiBtZW1vaXplO1xuICB9O1xuXG4gIC8vIERlbGF5cyBhIGZ1bmN0aW9uIGZvciB0aGUgZ2l2ZW4gbnVtYmVyIG9mIG1pbGxpc2Vjb25kcywgYW5kIHRoZW4gY2FsbHNcbiAgLy8gaXQgd2l0aCB0aGUgYXJndW1lbnRzIHN1cHBsaWVkLlxuICBfLmRlbGF5ID0gcmVzdEFyZ3VtZW50cyhmdW5jdGlvbihmdW5jLCB3YWl0LCBhcmdzKSB7XG4gICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZnVuYy5hcHBseShudWxsLCBhcmdzKTtcbiAgICB9LCB3YWl0KTtcbiAgfSk7XG5cbiAgLy8gRGVmZXJzIGEgZnVuY3Rpb24sIHNjaGVkdWxpbmcgaXQgdG8gcnVuIGFmdGVyIHRoZSBjdXJyZW50IGNhbGwgc3RhY2sgaGFzXG4gIC8vIGNsZWFyZWQuXG4gIF8uZGVmZXIgPSBfLnBhcnRpYWwoXy5kZWxheSwgXywgMSk7XG5cbiAgLy8gUmV0dXJucyBhIGZ1bmN0aW9uLCB0aGF0LCB3aGVuIGludm9rZWQsIHdpbGwgb25seSBiZSB0cmlnZ2VyZWQgYXQgbW9zdCBvbmNlXG4gIC8vIGR1cmluZyBhIGdpdmVuIHdpbmRvdyBvZiB0aW1lLiBOb3JtYWxseSwgdGhlIHRocm90dGxlZCBmdW5jdGlvbiB3aWxsIHJ1blxuICAvLyBhcyBtdWNoIGFzIGl0IGNhbiwgd2l0aG91dCBldmVyIGdvaW5nIG1vcmUgdGhhbiBvbmNlIHBlciBgd2FpdGAgZHVyYXRpb247XG4gIC8vIGJ1dCBpZiB5b3UnZCBsaWtlIHRvIGRpc2FibGUgdGhlIGV4ZWN1dGlvbiBvbiB0aGUgbGVhZGluZyBlZGdlLCBwYXNzXG4gIC8vIGB7bGVhZGluZzogZmFsc2V9YC4gVG8gZGlzYWJsZSBleGVjdXRpb24gb24gdGhlIHRyYWlsaW5nIGVkZ2UsIGRpdHRvLlxuICBfLnRocm90dGxlID0gZnVuY3Rpb24oZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICAgIHZhciB0aW1lb3V0LCBjb250ZXh0LCBhcmdzLCByZXN1bHQ7XG4gICAgdmFyIHByZXZpb3VzID0gMDtcbiAgICBpZiAoIW9wdGlvbnMpIG9wdGlvbnMgPSB7fTtcblxuICAgIHZhciBsYXRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgcHJldmlvdXMgPSBvcHRpb25zLmxlYWRpbmcgPT09IGZhbHNlID8gMCA6IF8ubm93KCk7XG4gICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICBpZiAoIXRpbWVvdXQpIGNvbnRleHQgPSBhcmdzID0gbnVsbDtcbiAgICB9O1xuXG4gICAgdmFyIHRocm90dGxlZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIG5vdyA9IF8ubm93KCk7XG4gICAgICBpZiAoIXByZXZpb3VzICYmIG9wdGlvbnMubGVhZGluZyA9PT0gZmFsc2UpIHByZXZpb3VzID0gbm93O1xuICAgICAgdmFyIHJlbWFpbmluZyA9IHdhaXQgLSAobm93IC0gcHJldmlvdXMpO1xuICAgICAgY29udGV4dCA9IHRoaXM7XG4gICAgICBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgaWYgKHJlbWFpbmluZyA8PSAwIHx8IHJlbWFpbmluZyA+IHdhaXQpIHtcbiAgICAgICAgaWYgKHRpbWVvdXQpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcHJldmlvdXMgPSBub3c7XG4gICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgIGlmICghdGltZW91dCkgY29udGV4dCA9IGFyZ3MgPSBudWxsO1xuICAgICAgfSBlbHNlIGlmICghdGltZW91dCAmJiBvcHRpb25zLnRyYWlsaW5nICE9PSBmYWxzZSkge1xuICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgcmVtYWluaW5nKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIHRocm90dGxlZC5jYW5jZWwgPSBmdW5jdGlvbigpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgIHByZXZpb3VzID0gMDtcbiAgICAgIHRpbWVvdXQgPSBjb250ZXh0ID0gYXJncyA9IG51bGw7XG4gICAgfTtcblxuICAgIHJldHVybiB0aHJvdHRsZWQ7XG4gIH07XG5cbiAgLy8gUmV0dXJucyBhIGZ1bmN0aW9uLCB0aGF0LCBhcyBsb25nIGFzIGl0IGNvbnRpbnVlcyB0byBiZSBpbnZva2VkLCB3aWxsIG5vdFxuICAvLyBiZSB0cmlnZ2VyZWQuIFRoZSBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCBhZnRlciBpdCBzdG9wcyBiZWluZyBjYWxsZWQgZm9yXG4gIC8vIE4gbWlsbGlzZWNvbmRzLiBJZiBgaW1tZWRpYXRlYCBpcyBwYXNzZWQsIHRyaWdnZXIgdGhlIGZ1bmN0aW9uIG9uIHRoZVxuICAvLyBsZWFkaW5nIGVkZ2UsIGluc3RlYWQgb2YgdGhlIHRyYWlsaW5nLlxuICBfLmRlYm91bmNlID0gZnVuY3Rpb24oZnVuYywgd2FpdCwgaW1tZWRpYXRlKSB7XG4gICAgdmFyIHRpbWVvdXQsIHJlc3VsdDtcblxuICAgIHZhciBsYXRlciA9IGZ1bmN0aW9uKGNvbnRleHQsIGFyZ3MpIHtcbiAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgICAgaWYgKGFyZ3MpIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgfTtcblxuICAgIHZhciBkZWJvdW5jZWQgPSByZXN0QXJndW1lbnRzKGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgIGlmICh0aW1lb3V0KSBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICBpZiAoaW1tZWRpYXRlKSB7XG4gICAgICAgIHZhciBjYWxsTm93ID0gIXRpbWVvdXQ7XG4gICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCB3YWl0KTtcbiAgICAgICAgaWYgKGNhbGxOb3cpIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aW1lb3V0ID0gXy5kZWxheShsYXRlciwgd2FpdCwgdGhpcywgYXJncyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG5cbiAgICBkZWJvdW5jZWQuY2FuY2VsID0gZnVuY3Rpb24oKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGRlYm91bmNlZDtcbiAgfTtcblxuICAvLyBSZXR1cm5zIHRoZSBmaXJzdCBmdW5jdGlvbiBwYXNzZWQgYXMgYW4gYXJndW1lbnQgdG8gdGhlIHNlY29uZCxcbiAgLy8gYWxsb3dpbmcgeW91IHRvIGFkanVzdCBhcmd1bWVudHMsIHJ1biBjb2RlIGJlZm9yZSBhbmQgYWZ0ZXIsIGFuZFxuICAvLyBjb25kaXRpb25hbGx5IGV4ZWN1dGUgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uLlxuICBfLndyYXAgPSBmdW5jdGlvbihmdW5jLCB3cmFwcGVyKSB7XG4gICAgcmV0dXJuIF8ucGFydGlhbCh3cmFwcGVyLCBmdW5jKTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGEgbmVnYXRlZCB2ZXJzaW9uIG9mIHRoZSBwYXNzZWQtaW4gcHJlZGljYXRlLlxuICBfLm5lZ2F0ZSA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAhcHJlZGljYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBpcyB0aGUgY29tcG9zaXRpb24gb2YgYSBsaXN0IG9mIGZ1bmN0aW9ucywgZWFjaFxuICAvLyBjb25zdW1pbmcgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgZnVuY3Rpb24gdGhhdCBmb2xsb3dzLlxuICBfLmNvbXBvc2UgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICB2YXIgc3RhcnQgPSBhcmdzLmxlbmd0aCAtIDE7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGkgPSBzdGFydDtcbiAgICAgIHZhciByZXN1bHQgPSBhcmdzW3N0YXJ0XS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgd2hpbGUgKGktLSkgcmVzdWx0ID0gYXJnc1tpXS5jYWxsKHRoaXMsIHJlc3VsdCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gIH07XG5cbiAgLy8gUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBvbmx5IGJlIGV4ZWN1dGVkIG9uIGFuZCBhZnRlciB0aGUgTnRoIGNhbGwuXG4gIF8uYWZ0ZXIgPSBmdW5jdGlvbih0aW1lcywgZnVuYykge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICgtLXRpbWVzIDwgMSkge1xuICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgLy8gUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBvbmx5IGJlIGV4ZWN1dGVkIHVwIHRvIChidXQgbm90IGluY2x1ZGluZykgdGhlIE50aCBjYWxsLlxuICBfLmJlZm9yZSA9IGZ1bmN0aW9uKHRpbWVzLCBmdW5jKSB7XG4gICAgdmFyIG1lbW87XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKC0tdGltZXMgPiAwKSB7XG4gICAgICAgIG1lbW8gPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgICBpZiAodGltZXMgPD0gMSkgZnVuYyA9IG51bGw7XG4gICAgICByZXR1cm4gbWVtbztcbiAgICB9O1xuICB9O1xuXG4gIC8vIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgZXhlY3V0ZWQgYXQgbW9zdCBvbmUgdGltZSwgbm8gbWF0dGVyIGhvd1xuICAvLyBvZnRlbiB5b3UgY2FsbCBpdC4gVXNlZnVsIGZvciBsYXp5IGluaXRpYWxpemF0aW9uLlxuICBfLm9uY2UgPSBfLnBhcnRpYWwoXy5iZWZvcmUsIDIpO1xuXG4gIF8ucmVzdEFyZ3VtZW50cyA9IHJlc3RBcmd1bWVudHM7XG5cbiAgLy8gT2JqZWN0IEZ1bmN0aW9uc1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gS2V5cyBpbiBJRSA8IDkgdGhhdCB3b24ndCBiZSBpdGVyYXRlZCBieSBgZm9yIGtleSBpbiAuLi5gIGFuZCB0aHVzIG1pc3NlZC5cbiAgdmFyIGhhc0VudW1CdWcgPSAhe3RvU3RyaW5nOiBudWxsfS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgndG9TdHJpbmcnKTtcbiAgdmFyIG5vbkVudW1lcmFibGVQcm9wcyA9IFsndmFsdWVPZicsICdpc1Byb3RvdHlwZU9mJywgJ3RvU3RyaW5nJyxcbiAgICAncHJvcGVydHlJc0VudW1lcmFibGUnLCAnaGFzT3duUHJvcGVydHknLCAndG9Mb2NhbGVTdHJpbmcnXTtcblxuICB2YXIgY29sbGVjdE5vbkVudW1Qcm9wcyA9IGZ1bmN0aW9uKG9iaiwga2V5cykge1xuICAgIHZhciBub25FbnVtSWR4ID0gbm9uRW51bWVyYWJsZVByb3BzLmxlbmd0aDtcbiAgICB2YXIgY29uc3RydWN0b3IgPSBvYmouY29uc3RydWN0b3I7XG4gICAgdmFyIHByb3RvID0gXy5pc0Z1bmN0aW9uKGNvbnN0cnVjdG9yKSAmJiBjb25zdHJ1Y3Rvci5wcm90b3R5cGUgfHwgT2JqUHJvdG87XG5cbiAgICAvLyBDb25zdHJ1Y3RvciBpcyBhIHNwZWNpYWwgY2FzZS5cbiAgICB2YXIgcHJvcCA9ICdjb25zdHJ1Y3Rvcic7XG4gICAgaWYgKF8uaGFzKG9iaiwgcHJvcCkgJiYgIV8uY29udGFpbnMoa2V5cywgcHJvcCkpIGtleXMucHVzaChwcm9wKTtcblxuICAgIHdoaWxlIChub25FbnVtSWR4LS0pIHtcbiAgICAgIHByb3AgPSBub25FbnVtZXJhYmxlUHJvcHNbbm9uRW51bUlkeF07XG4gICAgICBpZiAocHJvcCBpbiBvYmogJiYgb2JqW3Byb3BdICE9PSBwcm90b1twcm9wXSAmJiAhXy5jb250YWlucyhrZXlzLCBwcm9wKSkge1xuICAgICAgICBrZXlzLnB1c2gocHJvcCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8vIFJldHJpZXZlIHRoZSBuYW1lcyBvZiBhbiBvYmplY3QncyBvd24gcHJvcGVydGllcy5cbiAgLy8gRGVsZWdhdGVzIHRvICoqRUNNQVNjcmlwdCA1KioncyBuYXRpdmUgYE9iamVjdC5rZXlzYC5cbiAgXy5rZXlzID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKCFfLmlzT2JqZWN0KG9iaikpIHJldHVybiBbXTtcbiAgICBpZiAobmF0aXZlS2V5cykgcmV0dXJuIG5hdGl2ZUtleXMob2JqKTtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIGlmIChfLmhhcyhvYmosIGtleSkpIGtleXMucHVzaChrZXkpO1xuICAgIC8vIEFoZW0sIElFIDwgOS5cbiAgICBpZiAoaGFzRW51bUJ1ZykgY29sbGVjdE5vbkVudW1Qcm9wcyhvYmosIGtleXMpO1xuICAgIHJldHVybiBrZXlzO1xuICB9O1xuXG4gIC8vIFJldHJpZXZlIGFsbCB0aGUgcHJvcGVydHkgbmFtZXMgb2YgYW4gb2JqZWN0LlxuICBfLmFsbEtleXMgPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAoIV8uaXNPYmplY3Qob2JqKSkgcmV0dXJuIFtdO1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iaikga2V5cy5wdXNoKGtleSk7XG4gICAgLy8gQWhlbSwgSUUgPCA5LlxuICAgIGlmIChoYXNFbnVtQnVnKSBjb2xsZWN0Tm9uRW51bVByb3BzKG9iaiwga2V5cyk7XG4gICAgcmV0dXJuIGtleXM7XG4gIH07XG5cbiAgLy8gUmV0cmlldmUgdGhlIHZhbHVlcyBvZiBhbiBvYmplY3QncyBwcm9wZXJ0aWVzLlxuICBfLnZhbHVlcyA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciBrZXlzID0gXy5rZXlzKG9iaik7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciB2YWx1ZXMgPSBBcnJheShsZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhbHVlc1tpXSA9IG9ialtrZXlzW2ldXTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlcztcbiAgfTtcblxuICAvLyBSZXR1cm5zIHRoZSByZXN1bHRzIG9mIGFwcGx5aW5nIHRoZSBpdGVyYXRlZSB0byBlYWNoIGVsZW1lbnQgb2YgdGhlIG9iamVjdC5cbiAgLy8gSW4gY29udHJhc3QgdG8gXy5tYXAgaXQgcmV0dXJucyBhbiBvYmplY3QuXG4gIF8ubWFwT2JqZWN0ID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICAgIGl0ZXJhdGVlID0gY2IoaXRlcmF0ZWUsIGNvbnRleHQpO1xuICAgIHZhciBrZXlzID0gXy5rZXlzKG9iaiksXG4gICAgICAgIGxlbmd0aCA9IGtleXMubGVuZ3RoLFxuICAgICAgICByZXN1bHRzID0ge307XG4gICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgdmFyIGN1cnJlbnRLZXkgPSBrZXlzW2luZGV4XTtcbiAgICAgIHJlc3VsdHNbY3VycmVudEtleV0gPSBpdGVyYXRlZShvYmpbY3VycmVudEtleV0sIGN1cnJlbnRLZXksIG9iaik7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRzO1xuICB9O1xuXG4gIC8vIENvbnZlcnQgYW4gb2JqZWN0IGludG8gYSBsaXN0IG9mIGBba2V5LCB2YWx1ZV1gIHBhaXJzLlxuICAvLyBUaGUgb3Bwb3NpdGUgb2YgXy5vYmplY3QuXG4gIF8ucGFpcnMgPSBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIga2V5cyA9IF8ua2V5cyhvYmopO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgcGFpcnMgPSBBcnJheShsZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHBhaXJzW2ldID0gW2tleXNbaV0sIG9ialtrZXlzW2ldXV07XG4gICAgfVxuICAgIHJldHVybiBwYWlycztcbiAgfTtcblxuICAvLyBJbnZlcnQgdGhlIGtleXMgYW5kIHZhbHVlcyBvZiBhbiBvYmplY3QuIFRoZSB2YWx1ZXMgbXVzdCBiZSBzZXJpYWxpemFibGUuXG4gIF8uaW52ZXJ0ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIHZhciBrZXlzID0gXy5rZXlzKG9iaik7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGtleXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHJlc3VsdFtvYmpba2V5c1tpXV1dID0ga2V5c1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBSZXR1cm4gYSBzb3J0ZWQgbGlzdCBvZiB0aGUgZnVuY3Rpb24gbmFtZXMgYXZhaWxhYmxlIG9uIHRoZSBvYmplY3QuXG4gIC8vIEFsaWFzZWQgYXMgYG1ldGhvZHNgLlxuICBfLmZ1bmN0aW9ucyA9IF8ubWV0aG9kcyA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciBuYW1lcyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChfLmlzRnVuY3Rpb24ob2JqW2tleV0pKSBuYW1lcy5wdXNoKGtleSk7XG4gICAgfVxuICAgIHJldHVybiBuYW1lcy5zb3J0KCk7XG4gIH07XG5cbiAgLy8gQW4gaW50ZXJuYWwgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIGFzc2lnbmVyIGZ1bmN0aW9ucy5cbiAgdmFyIGNyZWF0ZUFzc2lnbmVyID0gZnVuY3Rpb24oa2V5c0Z1bmMsIGRlZmF1bHRzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKG9iaikge1xuICAgICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICBpZiAoZGVmYXVsdHMpIG9iaiA9IE9iamVjdChvYmopO1xuICAgICAgaWYgKGxlbmd0aCA8IDIgfHwgb2JqID09IG51bGwpIHJldHVybiBvYmo7XG4gICAgICBmb3IgKHZhciBpbmRleCA9IDE7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaW5kZXhdLFxuICAgICAgICAgICAga2V5cyA9IGtleXNGdW5jKHNvdXJjZSksXG4gICAgICAgICAgICBsID0ga2V5cy5sZW5ndGg7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgaWYgKCFkZWZhdWx0cyB8fCBvYmpba2V5XSA9PT0gdm9pZCAwKSBvYmpba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqO1xuICAgIH07XG4gIH07XG5cbiAgLy8gRXh0ZW5kIGEgZ2l2ZW4gb2JqZWN0IHdpdGggYWxsIHRoZSBwcm9wZXJ0aWVzIGluIHBhc3NlZC1pbiBvYmplY3QocykuXG4gIF8uZXh0ZW5kID0gY3JlYXRlQXNzaWduZXIoXy5hbGxLZXlzKTtcblxuICAvLyBBc3NpZ25zIGEgZ2l2ZW4gb2JqZWN0IHdpdGggYWxsIHRoZSBvd24gcHJvcGVydGllcyBpbiB0aGUgcGFzc2VkLWluIG9iamVjdChzKS5cbiAgLy8gKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9hc3NpZ24pXG4gIF8uZXh0ZW5kT3duID0gXy5hc3NpZ24gPSBjcmVhdGVBc3NpZ25lcihfLmtleXMpO1xuXG4gIC8vIFJldHVybnMgdGhlIGZpcnN0IGtleSBvbiBhbiBvYmplY3QgdGhhdCBwYXNzZXMgYSBwcmVkaWNhdGUgdGVzdC5cbiAgXy5maW5kS2V5ID0gZnVuY3Rpb24ob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICBwcmVkaWNhdGUgPSBjYihwcmVkaWNhdGUsIGNvbnRleHQpO1xuICAgIHZhciBrZXlzID0gXy5rZXlzKG9iaiksIGtleTtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0ga2V5cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAga2V5ID0ga2V5c1tpXTtcbiAgICAgIGlmIChwcmVkaWNhdGUob2JqW2tleV0sIGtleSwgb2JqKSkgcmV0dXJuIGtleTtcbiAgICB9XG4gIH07XG5cbiAgLy8gSW50ZXJuYWwgcGljayBoZWxwZXIgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGlmIGBvYmpgIGhhcyBrZXkgYGtleWAuXG4gIHZhciBrZXlJbk9iaiA9IGZ1bmN0aW9uKHZhbHVlLCBrZXksIG9iaikge1xuICAgIHJldHVybiBrZXkgaW4gb2JqO1xuICB9O1xuXG4gIC8vIFJldHVybiBhIGNvcHkgb2YgdGhlIG9iamVjdCBvbmx5IGNvbnRhaW5pbmcgdGhlIHdoaXRlbGlzdGVkIHByb3BlcnRpZXMuXG4gIF8ucGljayA9IHJlc3RBcmd1bWVudHMoZnVuY3Rpb24ob2JqLCBrZXlzKSB7XG4gICAgdmFyIHJlc3VsdCA9IHt9LCBpdGVyYXRlZSA9IGtleXNbMF07XG4gICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gcmVzdWx0O1xuICAgIGlmIChfLmlzRnVuY3Rpb24oaXRlcmF0ZWUpKSB7XG4gICAgICBpZiAoa2V5cy5sZW5ndGggPiAxKSBpdGVyYXRlZSA9IG9wdGltaXplQ2IoaXRlcmF0ZWUsIGtleXNbMV0pO1xuICAgICAga2V5cyA9IF8uYWxsS2V5cyhvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBpdGVyYXRlZSA9IGtleUluT2JqO1xuICAgICAga2V5cyA9IGZsYXR0ZW4oa2V5cywgZmFsc2UsIGZhbHNlKTtcbiAgICAgIG9iaiA9IE9iamVjdChvYmopO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0ga2V5cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICB2YXIgdmFsdWUgPSBvYmpba2V5XTtcbiAgICAgIGlmIChpdGVyYXRlZSh2YWx1ZSwga2V5LCBvYmopKSByZXN1bHRba2V5XSA9IHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9KTtcblxuICAvLyBSZXR1cm4gYSBjb3B5IG9mIHRoZSBvYmplY3Qgd2l0aG91dCB0aGUgYmxhY2tsaXN0ZWQgcHJvcGVydGllcy5cbiAgXy5vbWl0ID0gcmVzdEFyZ3VtZW50cyhmdW5jdGlvbihvYmosIGtleXMpIHtcbiAgICB2YXIgaXRlcmF0ZWUgPSBrZXlzWzBdLCBjb250ZXh0O1xuICAgIGlmIChfLmlzRnVuY3Rpb24oaXRlcmF0ZWUpKSB7XG4gICAgICBpdGVyYXRlZSA9IF8ubmVnYXRlKGl0ZXJhdGVlKTtcbiAgICAgIGlmIChrZXlzLmxlbmd0aCA+IDEpIGNvbnRleHQgPSBrZXlzWzFdO1xuICAgIH0gZWxzZSB7XG4gICAgICBrZXlzID0gXy5tYXAoZmxhdHRlbihrZXlzLCBmYWxzZSwgZmFsc2UpLCBTdHJpbmcpO1xuICAgICAgaXRlcmF0ZWUgPSBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgIHJldHVybiAhXy5jb250YWlucyhrZXlzLCBrZXkpO1xuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIF8ucGljayhvYmosIGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgfSk7XG5cbiAgLy8gRmlsbCBpbiBhIGdpdmVuIG9iamVjdCB3aXRoIGRlZmF1bHQgcHJvcGVydGllcy5cbiAgXy5kZWZhdWx0cyA9IGNyZWF0ZUFzc2lnbmVyKF8uYWxsS2V5cywgdHJ1ZSk7XG5cbiAgLy8gQ3JlYXRlcyBhbiBvYmplY3QgdGhhdCBpbmhlcml0cyBmcm9tIHRoZSBnaXZlbiBwcm90b3R5cGUgb2JqZWN0LlxuICAvLyBJZiBhZGRpdGlvbmFsIHByb3BlcnRpZXMgYXJlIHByb3ZpZGVkIHRoZW4gdGhleSB3aWxsIGJlIGFkZGVkIHRvIHRoZVxuICAvLyBjcmVhdGVkIG9iamVjdC5cbiAgXy5jcmVhdGUgPSBmdW5jdGlvbihwcm90b3R5cGUsIHByb3BzKSB7XG4gICAgdmFyIHJlc3VsdCA9IGJhc2VDcmVhdGUocHJvdG90eXBlKTtcbiAgICBpZiAocHJvcHMpIF8uZXh0ZW5kT3duKHJlc3VsdCwgcHJvcHMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gQ3JlYXRlIGEgKHNoYWxsb3ctY2xvbmVkKSBkdXBsaWNhdGUgb2YgYW4gb2JqZWN0LlxuICBfLmNsb25lID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKCFfLmlzT2JqZWN0KG9iaikpIHJldHVybiBvYmo7XG4gICAgcmV0dXJuIF8uaXNBcnJheShvYmopID8gb2JqLnNsaWNlKCkgOiBfLmV4dGVuZCh7fSwgb2JqKTtcbiAgfTtcblxuICAvLyBJbnZva2VzIGludGVyY2VwdG9yIHdpdGggdGhlIG9iaiwgYW5kIHRoZW4gcmV0dXJucyBvYmouXG4gIC8vIFRoZSBwcmltYXJ5IHB1cnBvc2Ugb2YgdGhpcyBtZXRob2QgaXMgdG8gXCJ0YXAgaW50b1wiIGEgbWV0aG9kIGNoYWluLCBpblxuICAvLyBvcmRlciB0byBwZXJmb3JtIG9wZXJhdGlvbnMgb24gaW50ZXJtZWRpYXRlIHJlc3VsdHMgd2l0aGluIHRoZSBjaGFpbi5cbiAgXy50YXAgPSBmdW5jdGlvbihvYmosIGludGVyY2VwdG9yKSB7XG4gICAgaW50ZXJjZXB0b3Iob2JqKTtcbiAgICByZXR1cm4gb2JqO1xuICB9O1xuXG4gIC8vIFJldHVybnMgd2hldGhlciBhbiBvYmplY3QgaGFzIGEgZ2l2ZW4gc2V0IG9mIGBrZXk6dmFsdWVgIHBhaXJzLlxuICBfLmlzTWF0Y2ggPSBmdW5jdGlvbihvYmplY3QsIGF0dHJzKSB7XG4gICAgdmFyIGtleXMgPSBfLmtleXMoYXR0cnMpLCBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICBpZiAob2JqZWN0ID09IG51bGwpIHJldHVybiAhbGVuZ3RoO1xuICAgIHZhciBvYmogPSBPYmplY3Qob2JqZWN0KTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgIGlmIChhdHRyc1trZXldICE9PSBvYmpba2V5XSB8fCAhKGtleSBpbiBvYmopKSByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG5cbiAgLy8gSW50ZXJuYWwgcmVjdXJzaXZlIGNvbXBhcmlzb24gZnVuY3Rpb24gZm9yIGBpc0VxdWFsYC5cbiAgdmFyIGVxLCBkZWVwRXE7XG4gIGVxID0gZnVuY3Rpb24oYSwgYiwgYVN0YWNrLCBiU3RhY2spIHtcbiAgICAvLyBJZGVudGljYWwgb2JqZWN0cyBhcmUgZXF1YWwuIGAwID09PSAtMGAsIGJ1dCB0aGV5IGFyZW4ndCBpZGVudGljYWwuXG4gICAgLy8gU2VlIHRoZSBbSGFybW9ueSBgZWdhbGAgcHJvcG9zYWxdKGh0dHA6Ly93aWtpLmVjbWFzY3JpcHQub3JnL2Rva3UucGhwP2lkPWhhcm1vbnk6ZWdhbCkuXG4gICAgaWYgKGEgPT09IGIpIHJldHVybiBhICE9PSAwIHx8IDEgLyBhID09PSAxIC8gYjtcbiAgICAvLyBgbnVsbGAgb3IgYHVuZGVmaW5lZGAgb25seSBlcXVhbCB0byBpdHNlbGYgKHN0cmljdCBjb21wYXJpc29uKS5cbiAgICBpZiAoYSA9PSBudWxsIHx8IGIgPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICAgIC8vIGBOYU5gcyBhcmUgZXF1aXZhbGVudCwgYnV0IG5vbi1yZWZsZXhpdmUuXG4gICAgaWYgKGEgIT09IGEpIHJldHVybiBiICE9PSBiO1xuICAgIC8vIEV4aGF1c3QgcHJpbWl0aXZlIGNoZWNrc1xuICAgIHZhciB0eXBlID0gdHlwZW9mIGE7XG4gICAgaWYgKHR5cGUgIT09ICdmdW5jdGlvbicgJiYgdHlwZSAhPT0gJ29iamVjdCcgJiYgdHlwZW9mIGIgIT0gJ29iamVjdCcpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gZGVlcEVxKGEsIGIsIGFTdGFjaywgYlN0YWNrKTtcbiAgfTtcblxuICAvLyBJbnRlcm5hbCByZWN1cnNpdmUgY29tcGFyaXNvbiBmdW5jdGlvbiBmb3IgYGlzRXF1YWxgLlxuICBkZWVwRXEgPSBmdW5jdGlvbihhLCBiLCBhU3RhY2ssIGJTdGFjaykge1xuICAgIC8vIFVud3JhcCBhbnkgd3JhcHBlZCBvYmplY3RzLlxuICAgIGlmIChhIGluc3RhbmNlb2YgXykgYSA9IGEuX3dyYXBwZWQ7XG4gICAgaWYgKGIgaW5zdGFuY2VvZiBfKSBiID0gYi5fd3JhcHBlZDtcbiAgICAvLyBDb21wYXJlIGBbW0NsYXNzXV1gIG5hbWVzLlxuICAgIHZhciBjbGFzc05hbWUgPSB0b1N0cmluZy5jYWxsKGEpO1xuICAgIGlmIChjbGFzc05hbWUgIT09IHRvU3RyaW5nLmNhbGwoYikpIHJldHVybiBmYWxzZTtcbiAgICBzd2l0Y2ggKGNsYXNzTmFtZSkge1xuICAgICAgLy8gU3RyaW5ncywgbnVtYmVycywgcmVndWxhciBleHByZXNzaW9ucywgZGF0ZXMsIGFuZCBib29sZWFucyBhcmUgY29tcGFyZWQgYnkgdmFsdWUuXG4gICAgICBjYXNlICdbb2JqZWN0IFJlZ0V4cF0nOlxuICAgICAgLy8gUmVnRXhwcyBhcmUgY29lcmNlZCB0byBzdHJpbmdzIGZvciBjb21wYXJpc29uIChOb3RlOiAnJyArIC9hL2kgPT09ICcvYS9pJylcbiAgICAgIGNhc2UgJ1tvYmplY3QgU3RyaW5nXSc6XG4gICAgICAgIC8vIFByaW1pdGl2ZXMgYW5kIHRoZWlyIGNvcnJlc3BvbmRpbmcgb2JqZWN0IHdyYXBwZXJzIGFyZSBlcXVpdmFsZW50OyB0aHVzLCBgXCI1XCJgIGlzXG4gICAgICAgIC8vIGVxdWl2YWxlbnQgdG8gYG5ldyBTdHJpbmcoXCI1XCIpYC5cbiAgICAgICAgcmV0dXJuICcnICsgYSA9PT0gJycgKyBiO1xuICAgICAgY2FzZSAnW29iamVjdCBOdW1iZXJdJzpcbiAgICAgICAgLy8gYE5hTmBzIGFyZSBlcXVpdmFsZW50LCBidXQgbm9uLXJlZmxleGl2ZS5cbiAgICAgICAgLy8gT2JqZWN0KE5hTikgaXMgZXF1aXZhbGVudCB0byBOYU4uXG4gICAgICAgIGlmICgrYSAhPT0gK2EpIHJldHVybiArYiAhPT0gK2I7XG4gICAgICAgIC8vIEFuIGBlZ2FsYCBjb21wYXJpc29uIGlzIHBlcmZvcm1lZCBmb3Igb3RoZXIgbnVtZXJpYyB2YWx1ZXMuXG4gICAgICAgIHJldHVybiArYSA9PT0gMCA/IDEgLyArYSA9PT0gMSAvIGIgOiArYSA9PT0gK2I7XG4gICAgICBjYXNlICdbb2JqZWN0IERhdGVdJzpcbiAgICAgIGNhc2UgJ1tvYmplY3QgQm9vbGVhbl0nOlxuICAgICAgICAvLyBDb2VyY2UgZGF0ZXMgYW5kIGJvb2xlYW5zIHRvIG51bWVyaWMgcHJpbWl0aXZlIHZhbHVlcy4gRGF0ZXMgYXJlIGNvbXBhcmVkIGJ5IHRoZWlyXG4gICAgICAgIC8vIG1pbGxpc2Vjb25kIHJlcHJlc2VudGF0aW9ucy4gTm90ZSB0aGF0IGludmFsaWQgZGF0ZXMgd2l0aCBtaWxsaXNlY29uZCByZXByZXNlbnRhdGlvbnNcbiAgICAgICAgLy8gb2YgYE5hTmAgYXJlIG5vdCBlcXVpdmFsZW50LlxuICAgICAgICByZXR1cm4gK2EgPT09ICtiO1xuICAgICAgY2FzZSAnW29iamVjdCBTeW1ib2xdJzpcbiAgICAgICAgcmV0dXJuIFN5bWJvbFByb3RvLnZhbHVlT2YuY2FsbChhKSA9PT0gU3ltYm9sUHJvdG8udmFsdWVPZi5jYWxsKGIpO1xuICAgIH1cblxuICAgIHZhciBhcmVBcnJheXMgPSBjbGFzc05hbWUgPT09ICdbb2JqZWN0IEFycmF5XSc7XG4gICAgaWYgKCFhcmVBcnJheXMpIHtcbiAgICAgIGlmICh0eXBlb2YgYSAhPSAnb2JqZWN0JyB8fCB0eXBlb2YgYiAhPSAnb2JqZWN0JykgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAvLyBPYmplY3RzIHdpdGggZGlmZmVyZW50IGNvbnN0cnVjdG9ycyBhcmUgbm90IGVxdWl2YWxlbnQsIGJ1dCBgT2JqZWN0YHMgb3IgYEFycmF5YHNcbiAgICAgIC8vIGZyb20gZGlmZmVyZW50IGZyYW1lcyBhcmUuXG4gICAgICB2YXIgYUN0b3IgPSBhLmNvbnN0cnVjdG9yLCBiQ3RvciA9IGIuY29uc3RydWN0b3I7XG4gICAgICBpZiAoYUN0b3IgIT09IGJDdG9yICYmICEoXy5pc0Z1bmN0aW9uKGFDdG9yKSAmJiBhQ3RvciBpbnN0YW5jZW9mIGFDdG9yICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5pc0Z1bmN0aW9uKGJDdG9yKSAmJiBiQ3RvciBpbnN0YW5jZW9mIGJDdG9yKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAmJiAoJ2NvbnN0cnVjdG9yJyBpbiBhICYmICdjb25zdHJ1Y3RvcicgaW4gYikpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBBc3N1bWUgZXF1YWxpdHkgZm9yIGN5Y2xpYyBzdHJ1Y3R1cmVzLiBUaGUgYWxnb3JpdGhtIGZvciBkZXRlY3RpbmcgY3ljbGljXG4gICAgLy8gc3RydWN0dXJlcyBpcyBhZGFwdGVkIGZyb20gRVMgNS4xIHNlY3Rpb24gMTUuMTIuMywgYWJzdHJhY3Qgb3BlcmF0aW9uIGBKT2AuXG5cbiAgICAvLyBJbml0aWFsaXppbmcgc3RhY2sgb2YgdHJhdmVyc2VkIG9iamVjdHMuXG4gICAgLy8gSXQncyBkb25lIGhlcmUgc2luY2Ugd2Ugb25seSBuZWVkIHRoZW0gZm9yIG9iamVjdHMgYW5kIGFycmF5cyBjb21wYXJpc29uLlxuICAgIGFTdGFjayA9IGFTdGFjayB8fCBbXTtcbiAgICBiU3RhY2sgPSBiU3RhY2sgfHwgW107XG4gICAgdmFyIGxlbmd0aCA9IGFTdGFjay5sZW5ndGg7XG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAvLyBMaW5lYXIgc2VhcmNoLiBQZXJmb3JtYW5jZSBpcyBpbnZlcnNlbHkgcHJvcG9ydGlvbmFsIHRvIHRoZSBudW1iZXIgb2ZcbiAgICAgIC8vIHVuaXF1ZSBuZXN0ZWQgc3RydWN0dXJlcy5cbiAgICAgIGlmIChhU3RhY2tbbGVuZ3RoXSA9PT0gYSkgcmV0dXJuIGJTdGFja1tsZW5ndGhdID09PSBiO1xuICAgIH1cblxuICAgIC8vIEFkZCB0aGUgZmlyc3Qgb2JqZWN0IHRvIHRoZSBzdGFjayBvZiB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAgICBhU3RhY2sucHVzaChhKTtcbiAgICBiU3RhY2sucHVzaChiKTtcblxuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyBhbmQgYXJyYXlzLlxuICAgIGlmIChhcmVBcnJheXMpIHtcbiAgICAgIC8vIENvbXBhcmUgYXJyYXkgbGVuZ3RocyB0byBkZXRlcm1pbmUgaWYgYSBkZWVwIGNvbXBhcmlzb24gaXMgbmVjZXNzYXJ5LlxuICAgICAgbGVuZ3RoID0gYS5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoICE9PSBiLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuICAgICAgLy8gRGVlcCBjb21wYXJlIHRoZSBjb250ZW50cywgaWdub3Jpbmcgbm9uLW51bWVyaWMgcHJvcGVydGllcy5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICBpZiAoIWVxKGFbbGVuZ3RoXSwgYltsZW5ndGhdLCBhU3RhY2ssIGJTdGFjaykpIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gRGVlcCBjb21wYXJlIG9iamVjdHMuXG4gICAgICB2YXIga2V5cyA9IF8ua2V5cyhhKSwga2V5O1xuICAgICAgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgICAvLyBFbnN1cmUgdGhhdCBib3RoIG9iamVjdHMgY29udGFpbiB0aGUgc2FtZSBudW1iZXIgb2YgcHJvcGVydGllcyBiZWZvcmUgY29tcGFyaW5nIGRlZXAgZXF1YWxpdHkuXG4gICAgICBpZiAoXy5rZXlzKGIpLmxlbmd0aCAhPT0gbGVuZ3RoKSByZXR1cm4gZmFsc2U7XG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgLy8gRGVlcCBjb21wYXJlIGVhY2ggbWVtYmVyXG4gICAgICAgIGtleSA9IGtleXNbbGVuZ3RoXTtcbiAgICAgICAgaWYgKCEoXy5oYXMoYiwga2V5KSAmJiBlcShhW2tleV0sIGJba2V5XSwgYVN0YWNrLCBiU3RhY2spKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBSZW1vdmUgdGhlIGZpcnN0IG9iamVjdCBmcm9tIHRoZSBzdGFjayBvZiB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAgICBhU3RhY2sucG9wKCk7XG4gICAgYlN0YWNrLnBvcCgpO1xuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIC8vIFBlcmZvcm0gYSBkZWVwIGNvbXBhcmlzb24gdG8gY2hlY2sgaWYgdHdvIG9iamVjdHMgYXJlIGVxdWFsLlxuICBfLmlzRXF1YWwgPSBmdW5jdGlvbihhLCBiKSB7XG4gICAgcmV0dXJuIGVxKGEsIGIpO1xuICB9O1xuXG4gIC8vIElzIGEgZ2l2ZW4gYXJyYXksIHN0cmluZywgb3Igb2JqZWN0IGVtcHR5P1xuICAvLyBBbiBcImVtcHR5XCIgb2JqZWN0IGhhcyBubyBlbnVtZXJhYmxlIG93bi1wcm9wZXJ0aWVzLlxuICBfLmlzRW1wdHkgPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAob2JqID09IG51bGwpIHJldHVybiB0cnVlO1xuICAgIGlmIChpc0FycmF5TGlrZShvYmopICYmIChfLmlzQXJyYXkob2JqKSB8fCBfLmlzU3RyaW5nKG9iaikgfHwgXy5pc0FyZ3VtZW50cyhvYmopKSkgcmV0dXJuIG9iai5sZW5ndGggPT09IDA7XG4gICAgcmV0dXJuIF8ua2V5cyhvYmopLmxlbmd0aCA9PT0gMDtcbiAgfTtcblxuICAvLyBJcyBhIGdpdmVuIHZhbHVlIGEgRE9NIGVsZW1lbnQ/XG4gIF8uaXNFbGVtZW50ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuICEhKG9iaiAmJiBvYmoubm9kZVR5cGUgPT09IDEpO1xuICB9O1xuXG4gIC8vIElzIGEgZ2l2ZW4gdmFsdWUgYW4gYXJyYXk/XG4gIC8vIERlbGVnYXRlcyB0byBFQ01BNSdzIG5hdGl2ZSBBcnJheS5pc0FycmF5XG4gIF8uaXNBcnJheSA9IG5hdGl2ZUlzQXJyYXkgfHwgZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbiAgfTtcblxuICAvLyBJcyBhIGdpdmVuIHZhcmlhYmxlIGFuIG9iamVjdD9cbiAgXy5pc09iamVjdCA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciB0eXBlID0gdHlwZW9mIG9iajtcbiAgICByZXR1cm4gdHlwZSA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlID09PSAnb2JqZWN0JyAmJiAhIW9iajtcbiAgfTtcblxuICAvLyBBZGQgc29tZSBpc1R5cGUgbWV0aG9kczogaXNBcmd1bWVudHMsIGlzRnVuY3Rpb24sIGlzU3RyaW5nLCBpc051bWJlciwgaXNEYXRlLCBpc1JlZ0V4cCwgaXNFcnJvciwgaXNNYXAsIGlzV2Vha01hcCwgaXNTZXQsIGlzV2Vha1NldC5cbiAgXy5lYWNoKFsnQXJndW1lbnRzJywgJ0Z1bmN0aW9uJywgJ1N0cmluZycsICdOdW1iZXInLCAnRGF0ZScsICdSZWdFeHAnLCAnRXJyb3InLCAnU3ltYm9sJywgJ01hcCcsICdXZWFrTWFwJywgJ1NldCcsICdXZWFrU2V0J10sIGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBfWydpcycgKyBuYW1lXSA9IGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgJyArIG5hbWUgKyAnXSc7XG4gICAgfTtcbiAgfSk7XG5cbiAgLy8gRGVmaW5lIGEgZmFsbGJhY2sgdmVyc2lvbiBvZiB0aGUgbWV0aG9kIGluIGJyb3dzZXJzIChhaGVtLCBJRSA8IDkpLCB3aGVyZVxuICAvLyB0aGVyZSBpc24ndCBhbnkgaW5zcGVjdGFibGUgXCJBcmd1bWVudHNcIiB0eXBlLlxuICBpZiAoIV8uaXNBcmd1bWVudHMoYXJndW1lbnRzKSkge1xuICAgIF8uaXNBcmd1bWVudHMgPSBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiBfLmhhcyhvYmosICdjYWxsZWUnKTtcbiAgICB9O1xuICB9XG5cbiAgLy8gT3B0aW1pemUgYGlzRnVuY3Rpb25gIGlmIGFwcHJvcHJpYXRlLiBXb3JrIGFyb3VuZCBzb21lIHR5cGVvZiBidWdzIGluIG9sZCB2OCxcbiAgLy8gSUUgMTEgKCMxNjIxKSwgU2FmYXJpIDggKCMxOTI5KSwgYW5kIFBoYW50b21KUyAoIzIyMzYpLlxuICB2YXIgbm9kZWxpc3QgPSByb290LmRvY3VtZW50ICYmIHJvb3QuZG9jdW1lbnQuY2hpbGROb2RlcztcbiAgaWYgKHR5cGVvZiAvLi8gIT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgSW50OEFycmF5ICE9ICdvYmplY3QnICYmIHR5cGVvZiBub2RlbGlzdCAhPSAnZnVuY3Rpb24nKSB7XG4gICAgXy5pc0Z1bmN0aW9uID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIG9iaiA9PSAnZnVuY3Rpb24nIHx8IGZhbHNlO1xuICAgIH07XG4gIH1cblxuICAvLyBJcyBhIGdpdmVuIG9iamVjdCBhIGZpbml0ZSBudW1iZXI/XG4gIF8uaXNGaW5pdGUgPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gIV8uaXNTeW1ib2wob2JqKSAmJiBpc0Zpbml0ZShvYmopICYmICFpc05hTihwYXJzZUZsb2F0KG9iaikpO1xuICB9O1xuXG4gIC8vIElzIHRoZSBnaXZlbiB2YWx1ZSBgTmFOYD9cbiAgXy5pc05hTiA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiBfLmlzTnVtYmVyKG9iaikgJiYgaXNOYU4ob2JqKTtcbiAgfTtcblxuICAvLyBJcyBhIGdpdmVuIHZhbHVlIGEgYm9vbGVhbj9cbiAgXy5pc0Jvb2xlYW4gPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gb2JqID09PSB0cnVlIHx8IG9iaiA9PT0gZmFsc2UgfHwgdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBCb29sZWFuXSc7XG4gIH07XG5cbiAgLy8gSXMgYSBnaXZlbiB2YWx1ZSBlcXVhbCB0byBudWxsP1xuICBfLmlzTnVsbCA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiBvYmogPT09IG51bGw7XG4gIH07XG5cbiAgLy8gSXMgYSBnaXZlbiB2YXJpYWJsZSB1bmRlZmluZWQ/XG4gIF8uaXNVbmRlZmluZWQgPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gb2JqID09PSB2b2lkIDA7XG4gIH07XG5cbiAgLy8gU2hvcnRjdXQgZnVuY3Rpb24gZm9yIGNoZWNraW5nIGlmIGFuIG9iamVjdCBoYXMgYSBnaXZlbiBwcm9wZXJ0eSBkaXJlY3RseVxuICAvLyBvbiBpdHNlbGYgKGluIG90aGVyIHdvcmRzLCBub3Qgb24gYSBwcm90b3R5cGUpLlxuICBfLmhhcyA9IGZ1bmN0aW9uKG9iaiwgcGF0aCkge1xuICAgIGlmICghXy5pc0FycmF5KHBhdGgpKSB7XG4gICAgICByZXR1cm4gb2JqICE9IG51bGwgJiYgaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHBhdGgpO1xuICAgIH1cbiAgICB2YXIgbGVuZ3RoID0gcGF0aC5sZW5ndGg7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGtleSA9IHBhdGhbaV07XG4gICAgICBpZiAob2JqID09IG51bGwgfHwgIWhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIG9iaiA9IG9ialtrZXldO1xuICAgIH1cbiAgICByZXR1cm4gISFsZW5ndGg7XG4gIH07XG5cbiAgLy8gVXRpbGl0eSBGdW5jdGlvbnNcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyBSdW4gVW5kZXJzY29yZS5qcyBpbiAqbm9Db25mbGljdCogbW9kZSwgcmV0dXJuaW5nIHRoZSBgX2AgdmFyaWFibGUgdG8gaXRzXG4gIC8vIHByZXZpb3VzIG93bmVyLiBSZXR1cm5zIGEgcmVmZXJlbmNlIHRvIHRoZSBVbmRlcnNjb3JlIG9iamVjdC5cbiAgXy5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgcm9vdC5fID0gcHJldmlvdXNVbmRlcnNjb3JlO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIEtlZXAgdGhlIGlkZW50aXR5IGZ1bmN0aW9uIGFyb3VuZCBmb3IgZGVmYXVsdCBpdGVyYXRlZXMuXG4gIF8uaWRlbnRpdHkgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfTtcblxuICAvLyBQcmVkaWNhdGUtZ2VuZXJhdGluZyBmdW5jdGlvbnMuIE9mdGVuIHVzZWZ1bCBvdXRzaWRlIG9mIFVuZGVyc2NvcmUuXG4gIF8uY29uc3RhbnQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuICB9O1xuXG4gIF8ubm9vcCA9IGZ1bmN0aW9uKCl7fTtcblxuICAvLyBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBwYXNzZWQgYW4gb2JqZWN0LCB3aWxsIHRyYXZlcnNlIHRoYXQgb2JqZWN04oCZc1xuICAvLyBwcm9wZXJ0aWVzIGRvd24gdGhlIGdpdmVuIGBwYXRoYCwgc3BlY2lmaWVkIGFzIGFuIGFycmF5IG9mIGtleXMgb3IgaW5kZXhlcy5cbiAgXy5wcm9wZXJ0eSA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgICBpZiAoIV8uaXNBcnJheShwYXRoKSkge1xuICAgICAgcmV0dXJuIHNoYWxsb3dQcm9wZXJ0eShwYXRoKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuIGRlZXBHZXQob2JqLCBwYXRoKTtcbiAgICB9O1xuICB9O1xuXG4gIC8vIEdlbmVyYXRlcyBhIGZ1bmN0aW9uIGZvciBhIGdpdmVuIG9iamVjdCB0aGF0IHJldHVybnMgYSBnaXZlbiBwcm9wZXJ0eS5cbiAgXy5wcm9wZXJ0eU9mID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKG9iaiA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKXt9O1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24ocGF0aCkge1xuICAgICAgcmV0dXJuICFfLmlzQXJyYXkocGF0aCkgPyBvYmpbcGF0aF0gOiBkZWVwR2V0KG9iaiwgcGF0aCk7XG4gICAgfTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGEgcHJlZGljYXRlIGZvciBjaGVja2luZyB3aGV0aGVyIGFuIG9iamVjdCBoYXMgYSBnaXZlbiBzZXQgb2ZcbiAgLy8gYGtleTp2YWx1ZWAgcGFpcnMuXG4gIF8ubWF0Y2hlciA9IF8ubWF0Y2hlcyA9IGZ1bmN0aW9uKGF0dHJzKSB7XG4gICAgYXR0cnMgPSBfLmV4dGVuZE93bih7fSwgYXR0cnMpO1xuICAgIHJldHVybiBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiBfLmlzTWF0Y2gob2JqLCBhdHRycyk7XG4gICAgfTtcbiAgfTtcblxuICAvLyBSdW4gYSBmdW5jdGlvbiAqKm4qKiB0aW1lcy5cbiAgXy50aW1lcyA9IGZ1bmN0aW9uKG4sIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gICAgdmFyIGFjY3VtID0gQXJyYXkoTWF0aC5tYXgoMCwgbikpO1xuICAgIGl0ZXJhdGVlID0gb3B0aW1pemVDYihpdGVyYXRlZSwgY29udGV4dCwgMSk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyBpKyspIGFjY3VtW2ldID0gaXRlcmF0ZWUoaSk7XG4gICAgcmV0dXJuIGFjY3VtO1xuICB9O1xuXG4gIC8vIFJldHVybiBhIHJhbmRvbSBpbnRlZ2VyIGJldHdlZW4gbWluIGFuZCBtYXggKGluY2x1c2l2ZSkuXG4gIF8ucmFuZG9tID0gZnVuY3Rpb24obWluLCBtYXgpIHtcbiAgICBpZiAobWF4ID09IG51bGwpIHtcbiAgICAgIG1heCA9IG1pbjtcbiAgICAgIG1pbiA9IDA7XG4gICAgfVxuICAgIHJldHVybiBtaW4gKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgMSkpO1xuICB9O1xuXG4gIC8vIEEgKHBvc3NpYmx5IGZhc3Rlcikgd2F5IHRvIGdldCB0aGUgY3VycmVudCB0aW1lc3RhbXAgYXMgYW4gaW50ZWdlci5cbiAgXy5ub3cgPSBEYXRlLm5vdyB8fCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gIH07XG5cbiAgLy8gTGlzdCBvZiBIVE1MIGVudGl0aWVzIGZvciBlc2NhcGluZy5cbiAgdmFyIGVzY2FwZU1hcCA9IHtcbiAgICAnJic6ICcmYW1wOycsXG4gICAgJzwnOiAnJmx0OycsXG4gICAgJz4nOiAnJmd0OycsXG4gICAgJ1wiJzogJyZxdW90OycsXG4gICAgXCInXCI6ICcmI3gyNzsnLFxuICAgICdgJzogJyYjeDYwOydcbiAgfTtcbiAgdmFyIHVuZXNjYXBlTWFwID0gXy5pbnZlcnQoZXNjYXBlTWFwKTtcblxuICAvLyBGdW5jdGlvbnMgZm9yIGVzY2FwaW5nIGFuZCB1bmVzY2FwaW5nIHN0cmluZ3MgdG8vZnJvbSBIVE1MIGludGVycG9sYXRpb24uXG4gIHZhciBjcmVhdGVFc2NhcGVyID0gZnVuY3Rpb24obWFwKSB7XG4gICAgdmFyIGVzY2FwZXIgPSBmdW5jdGlvbihtYXRjaCkge1xuICAgICAgcmV0dXJuIG1hcFttYXRjaF07XG4gICAgfTtcbiAgICAvLyBSZWdleGVzIGZvciBpZGVudGlmeWluZyBhIGtleSB0aGF0IG5lZWRzIHRvIGJlIGVzY2FwZWQuXG4gICAgdmFyIHNvdXJjZSA9ICcoPzonICsgXy5rZXlzKG1hcCkuam9pbignfCcpICsgJyknO1xuICAgIHZhciB0ZXN0UmVnZXhwID0gUmVnRXhwKHNvdXJjZSk7XG4gICAgdmFyIHJlcGxhY2VSZWdleHAgPSBSZWdFeHAoc291cmNlLCAnZycpO1xuICAgIHJldHVybiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgIHN0cmluZyA9IHN0cmluZyA9PSBudWxsID8gJycgOiAnJyArIHN0cmluZztcbiAgICAgIHJldHVybiB0ZXN0UmVnZXhwLnRlc3Qoc3RyaW5nKSA/IHN0cmluZy5yZXBsYWNlKHJlcGxhY2VSZWdleHAsIGVzY2FwZXIpIDogc3RyaW5nO1xuICAgIH07XG4gIH07XG4gIF8uZXNjYXBlID0gY3JlYXRlRXNjYXBlcihlc2NhcGVNYXApO1xuICBfLnVuZXNjYXBlID0gY3JlYXRlRXNjYXBlcih1bmVzY2FwZU1hcCk7XG5cbiAgLy8gVHJhdmVyc2VzIHRoZSBjaGlsZHJlbiBvZiBgb2JqYCBhbG9uZyBgcGF0aGAuIElmIGEgY2hpbGQgaXMgYSBmdW5jdGlvbiwgaXRcbiAgLy8gaXMgaW52b2tlZCB3aXRoIGl0cyBwYXJlbnQgYXMgY29udGV4dC4gUmV0dXJucyB0aGUgdmFsdWUgb2YgdGhlIGZpbmFsXG4gIC8vIGNoaWxkLCBvciBgZmFsbGJhY2tgIGlmIGFueSBjaGlsZCBpcyB1bmRlZmluZWQuXG4gIF8ucmVzdWx0ID0gZnVuY3Rpb24ob2JqLCBwYXRoLCBmYWxsYmFjaykge1xuICAgIGlmICghXy5pc0FycmF5KHBhdGgpKSBwYXRoID0gW3BhdGhdO1xuICAgIHZhciBsZW5ndGggPSBwYXRoLmxlbmd0aDtcbiAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgcmV0dXJuIF8uaXNGdW5jdGlvbihmYWxsYmFjaykgPyBmYWxsYmFjay5jYWxsKG9iaikgOiBmYWxsYmFjaztcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHByb3AgPSBvYmogPT0gbnVsbCA/IHZvaWQgMCA6IG9ialtwYXRoW2ldXTtcbiAgICAgIGlmIChwcm9wID09PSB2b2lkIDApIHtcbiAgICAgICAgcHJvcCA9IGZhbGxiYWNrO1xuICAgICAgICBpID0gbGVuZ3RoOyAvLyBFbnN1cmUgd2UgZG9uJ3QgY29udGludWUgaXRlcmF0aW5nLlxuICAgICAgfVxuICAgICAgb2JqID0gXy5pc0Z1bmN0aW9uKHByb3ApID8gcHJvcC5jYWxsKG9iaikgOiBwcm9wO1xuICAgIH1cbiAgICByZXR1cm4gb2JqO1xuICB9O1xuXG4gIC8vIEdlbmVyYXRlIGEgdW5pcXVlIGludGVnZXIgaWQgKHVuaXF1ZSB3aXRoaW4gdGhlIGVudGlyZSBjbGllbnQgc2Vzc2lvbikuXG4gIC8vIFVzZWZ1bCBmb3IgdGVtcG9yYXJ5IERPTSBpZHMuXG4gIHZhciBpZENvdW50ZXIgPSAwO1xuICBfLnVuaXF1ZUlkID0gZnVuY3Rpb24ocHJlZml4KSB7XG4gICAgdmFyIGlkID0gKytpZENvdW50ZXIgKyAnJztcbiAgICByZXR1cm4gcHJlZml4ID8gcHJlZml4ICsgaWQgOiBpZDtcbiAgfTtcblxuICAvLyBCeSBkZWZhdWx0LCBVbmRlcnNjb3JlIHVzZXMgRVJCLXN0eWxlIHRlbXBsYXRlIGRlbGltaXRlcnMsIGNoYW5nZSB0aGVcbiAgLy8gZm9sbG93aW5nIHRlbXBsYXRlIHNldHRpbmdzIHRvIHVzZSBhbHRlcm5hdGl2ZSBkZWxpbWl0ZXJzLlxuICBfLnRlbXBsYXRlU2V0dGluZ3MgPSB7XG4gICAgZXZhbHVhdGU6IC88JShbXFxzXFxTXSs/KSU+L2csXG4gICAgaW50ZXJwb2xhdGU6IC88JT0oW1xcc1xcU10rPyklPi9nLFxuICAgIGVzY2FwZTogLzwlLShbXFxzXFxTXSs/KSU+L2dcbiAgfTtcblxuICAvLyBXaGVuIGN1c3RvbWl6aW5nIGB0ZW1wbGF0ZVNldHRpbmdzYCwgaWYgeW91IGRvbid0IHdhbnQgdG8gZGVmaW5lIGFuXG4gIC8vIGludGVycG9sYXRpb24sIGV2YWx1YXRpb24gb3IgZXNjYXBpbmcgcmVnZXgsIHdlIG5lZWQgb25lIHRoYXQgaXNcbiAgLy8gZ3VhcmFudGVlZCBub3QgdG8gbWF0Y2guXG4gIHZhciBub01hdGNoID0gLyguKV4vO1xuXG4gIC8vIENlcnRhaW4gY2hhcmFjdGVycyBuZWVkIHRvIGJlIGVzY2FwZWQgc28gdGhhdCB0aGV5IGNhbiBiZSBwdXQgaW50byBhXG4gIC8vIHN0cmluZyBsaXRlcmFsLlxuICB2YXIgZXNjYXBlcyA9IHtcbiAgICBcIidcIjogXCInXCIsXG4gICAgJ1xcXFwnOiAnXFxcXCcsXG4gICAgJ1xccic6ICdyJyxcbiAgICAnXFxuJzogJ24nLFxuICAgICdcXHUyMDI4JzogJ3UyMDI4JyxcbiAgICAnXFx1MjAyOSc6ICd1MjAyOSdcbiAgfTtcblxuICB2YXIgZXNjYXBlUmVnRXhwID0gL1xcXFx8J3xcXHJ8XFxufFxcdTIwMjh8XFx1MjAyOS9nO1xuXG4gIHZhciBlc2NhcGVDaGFyID0gZnVuY3Rpb24obWF0Y2gpIHtcbiAgICByZXR1cm4gJ1xcXFwnICsgZXNjYXBlc1ttYXRjaF07XG4gIH07XG5cbiAgLy8gSmF2YVNjcmlwdCBtaWNyby10ZW1wbGF0aW5nLCBzaW1pbGFyIHRvIEpvaG4gUmVzaWcncyBpbXBsZW1lbnRhdGlvbi5cbiAgLy8gVW5kZXJzY29yZSB0ZW1wbGF0aW5nIGhhbmRsZXMgYXJiaXRyYXJ5IGRlbGltaXRlcnMsIHByZXNlcnZlcyB3aGl0ZXNwYWNlLFxuICAvLyBhbmQgY29ycmVjdGx5IGVzY2FwZXMgcXVvdGVzIHdpdGhpbiBpbnRlcnBvbGF0ZWQgY29kZS5cbiAgLy8gTkI6IGBvbGRTZXR0aW5nc2Agb25seSBleGlzdHMgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LlxuICBfLnRlbXBsYXRlID0gZnVuY3Rpb24odGV4dCwgc2V0dGluZ3MsIG9sZFNldHRpbmdzKSB7XG4gICAgaWYgKCFzZXR0aW5ncyAmJiBvbGRTZXR0aW5ncykgc2V0dGluZ3MgPSBvbGRTZXR0aW5ncztcbiAgICBzZXR0aW5ncyA9IF8uZGVmYXVsdHMoe30sIHNldHRpbmdzLCBfLnRlbXBsYXRlU2V0dGluZ3MpO1xuXG4gICAgLy8gQ29tYmluZSBkZWxpbWl0ZXJzIGludG8gb25lIHJlZ3VsYXIgZXhwcmVzc2lvbiB2aWEgYWx0ZXJuYXRpb24uXG4gICAgdmFyIG1hdGNoZXIgPSBSZWdFeHAoW1xuICAgICAgKHNldHRpbmdzLmVzY2FwZSB8fCBub01hdGNoKS5zb3VyY2UsXG4gICAgICAoc2V0dGluZ3MuaW50ZXJwb2xhdGUgfHwgbm9NYXRjaCkuc291cmNlLFxuICAgICAgKHNldHRpbmdzLmV2YWx1YXRlIHx8IG5vTWF0Y2gpLnNvdXJjZVxuICAgIF0uam9pbignfCcpICsgJ3wkJywgJ2cnKTtcblxuICAgIC8vIENvbXBpbGUgdGhlIHRlbXBsYXRlIHNvdXJjZSwgZXNjYXBpbmcgc3RyaW5nIGxpdGVyYWxzIGFwcHJvcHJpYXRlbHkuXG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgc291cmNlID0gXCJfX3ArPSdcIjtcbiAgICB0ZXh0LnJlcGxhY2UobWF0Y2hlciwgZnVuY3Rpb24obWF0Y2gsIGVzY2FwZSwgaW50ZXJwb2xhdGUsIGV2YWx1YXRlLCBvZmZzZXQpIHtcbiAgICAgIHNvdXJjZSArPSB0ZXh0LnNsaWNlKGluZGV4LCBvZmZzZXQpLnJlcGxhY2UoZXNjYXBlUmVnRXhwLCBlc2NhcGVDaGFyKTtcbiAgICAgIGluZGV4ID0gb2Zmc2V0ICsgbWF0Y2gubGVuZ3RoO1xuXG4gICAgICBpZiAoZXNjYXBlKSB7XG4gICAgICAgIHNvdXJjZSArPSBcIicrXFxuKChfX3Q9KFwiICsgZXNjYXBlICsgXCIpKT09bnVsbD8nJzpfLmVzY2FwZShfX3QpKStcXG4nXCI7XG4gICAgICB9IGVsc2UgaWYgKGludGVycG9sYXRlKSB7XG4gICAgICAgIHNvdXJjZSArPSBcIicrXFxuKChfX3Q9KFwiICsgaW50ZXJwb2xhdGUgKyBcIikpPT1udWxsPycnOl9fdCkrXFxuJ1wiO1xuICAgICAgfSBlbHNlIGlmIChldmFsdWF0ZSkge1xuICAgICAgICBzb3VyY2UgKz0gXCInO1xcblwiICsgZXZhbHVhdGUgKyBcIlxcbl9fcCs9J1wiO1xuICAgICAgfVxuXG4gICAgICAvLyBBZG9iZSBWTXMgbmVlZCB0aGUgbWF0Y2ggcmV0dXJuZWQgdG8gcHJvZHVjZSB0aGUgY29ycmVjdCBvZmZzZXQuXG4gICAgICByZXR1cm4gbWF0Y2g7XG4gICAgfSk7XG4gICAgc291cmNlICs9IFwiJztcXG5cIjtcblxuICAgIC8vIElmIGEgdmFyaWFibGUgaXMgbm90IHNwZWNpZmllZCwgcGxhY2UgZGF0YSB2YWx1ZXMgaW4gbG9jYWwgc2NvcGUuXG4gICAgaWYgKCFzZXR0aW5ncy52YXJpYWJsZSkgc291cmNlID0gJ3dpdGgob2JqfHx7fSl7XFxuJyArIHNvdXJjZSArICd9XFxuJztcblxuICAgIHNvdXJjZSA9IFwidmFyIF9fdCxfX3A9JycsX19qPUFycmF5LnByb3RvdHlwZS5qb2luLFwiICtcbiAgICAgIFwicHJpbnQ9ZnVuY3Rpb24oKXtfX3ArPV9fai5jYWxsKGFyZ3VtZW50cywnJyk7fTtcXG5cIiArXG4gICAgICBzb3VyY2UgKyAncmV0dXJuIF9fcDtcXG4nO1xuXG4gICAgdmFyIHJlbmRlcjtcbiAgICB0cnkge1xuICAgICAgcmVuZGVyID0gbmV3IEZ1bmN0aW9uKHNldHRpbmdzLnZhcmlhYmxlIHx8ICdvYmonLCAnXycsIHNvdXJjZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgZS5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cblxuICAgIHZhciB0ZW1wbGF0ZSA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIHJldHVybiByZW5kZXIuY2FsbCh0aGlzLCBkYXRhLCBfKTtcbiAgICB9O1xuXG4gICAgLy8gUHJvdmlkZSB0aGUgY29tcGlsZWQgc291cmNlIGFzIGEgY29udmVuaWVuY2UgZm9yIHByZWNvbXBpbGF0aW9uLlxuICAgIHZhciBhcmd1bWVudCA9IHNldHRpbmdzLnZhcmlhYmxlIHx8ICdvYmonO1xuICAgIHRlbXBsYXRlLnNvdXJjZSA9ICdmdW5jdGlvbignICsgYXJndW1lbnQgKyAnKXtcXG4nICsgc291cmNlICsgJ30nO1xuXG4gICAgcmV0dXJuIHRlbXBsYXRlO1xuICB9O1xuXG4gIC8vIEFkZCBhIFwiY2hhaW5cIiBmdW5jdGlvbi4gU3RhcnQgY2hhaW5pbmcgYSB3cmFwcGVkIFVuZGVyc2NvcmUgb2JqZWN0LlxuICBfLmNoYWluID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIGluc3RhbmNlID0gXyhvYmopO1xuICAgIGluc3RhbmNlLl9jaGFpbiA9IHRydWU7XG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9O1xuXG4gIC8vIE9PUFxuICAvLyAtLS0tLS0tLS0tLS0tLS1cbiAgLy8gSWYgVW5kZXJzY29yZSBpcyBjYWxsZWQgYXMgYSBmdW5jdGlvbiwgaXQgcmV0dXJucyBhIHdyYXBwZWQgb2JqZWN0IHRoYXRcbiAgLy8gY2FuIGJlIHVzZWQgT08tc3R5bGUuIFRoaXMgd3JhcHBlciBob2xkcyBhbHRlcmVkIHZlcnNpb25zIG9mIGFsbCB0aGVcbiAgLy8gdW5kZXJzY29yZSBmdW5jdGlvbnMuIFdyYXBwZWQgb2JqZWN0cyBtYXkgYmUgY2hhaW5lZC5cblxuICAvLyBIZWxwZXIgZnVuY3Rpb24gdG8gY29udGludWUgY2hhaW5pbmcgaW50ZXJtZWRpYXRlIHJlc3VsdHMuXG4gIHZhciBjaGFpblJlc3VsdCA9IGZ1bmN0aW9uKGluc3RhbmNlLCBvYmopIHtcbiAgICByZXR1cm4gaW5zdGFuY2UuX2NoYWluID8gXyhvYmopLmNoYWluKCkgOiBvYmo7XG4gIH07XG5cbiAgLy8gQWRkIHlvdXIgb3duIGN1c3RvbSBmdW5jdGlvbnMgdG8gdGhlIFVuZGVyc2NvcmUgb2JqZWN0LlxuICBfLm1peGluID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgXy5lYWNoKF8uZnVuY3Rpb25zKG9iaiksIGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIHZhciBmdW5jID0gX1tuYW1lXSA9IG9ialtuYW1lXTtcbiAgICAgIF8ucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gW3RoaXMuX3dyYXBwZWRdO1xuICAgICAgICBwdXNoLmFwcGx5KGFyZ3MsIGFyZ3VtZW50cyk7XG4gICAgICAgIHJldHVybiBjaGFpblJlc3VsdCh0aGlzLCBmdW5jLmFwcGx5KF8sIGFyZ3MpKTtcbiAgICAgIH07XG4gICAgfSk7XG4gICAgcmV0dXJuIF87XG4gIH07XG5cbiAgLy8gQWRkIGFsbCBvZiB0aGUgVW5kZXJzY29yZSBmdW5jdGlvbnMgdG8gdGhlIHdyYXBwZXIgb2JqZWN0LlxuICBfLm1peGluKF8pO1xuXG4gIC8vIEFkZCBhbGwgbXV0YXRvciBBcnJheSBmdW5jdGlvbnMgdG8gdGhlIHdyYXBwZXIuXG4gIF8uZWFjaChbJ3BvcCcsICdwdXNoJywgJ3JldmVyc2UnLCAnc2hpZnQnLCAnc29ydCcsICdzcGxpY2UnLCAndW5zaGlmdCddLCBmdW5jdGlvbihuYW1lKSB7XG4gICAgdmFyIG1ldGhvZCA9IEFycmF5UHJvdG9bbmFtZV07XG4gICAgXy5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBvYmogPSB0aGlzLl93cmFwcGVkO1xuICAgICAgbWV0aG9kLmFwcGx5KG9iaiwgYXJndW1lbnRzKTtcbiAgICAgIGlmICgobmFtZSA9PT0gJ3NoaWZ0JyB8fCBuYW1lID09PSAnc3BsaWNlJykgJiYgb2JqLmxlbmd0aCA9PT0gMCkgZGVsZXRlIG9ialswXTtcbiAgICAgIHJldHVybiBjaGFpblJlc3VsdCh0aGlzLCBvYmopO1xuICAgIH07XG4gIH0pO1xuXG4gIC8vIEFkZCBhbGwgYWNjZXNzb3IgQXJyYXkgZnVuY3Rpb25zIHRvIHRoZSB3cmFwcGVyLlxuICBfLmVhY2goWydjb25jYXQnLCAnam9pbicsICdzbGljZSddLCBmdW5jdGlvbihuYW1lKSB7XG4gICAgdmFyIG1ldGhvZCA9IEFycmF5UHJvdG9bbmFtZV07XG4gICAgXy5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBjaGFpblJlc3VsdCh0aGlzLCBtZXRob2QuYXBwbHkodGhpcy5fd3JhcHBlZCwgYXJndW1lbnRzKSk7XG4gICAgfTtcbiAgfSk7XG5cbiAgLy8gRXh0cmFjdHMgdGhlIHJlc3VsdCBmcm9tIGEgd3JhcHBlZCBhbmQgY2hhaW5lZCBvYmplY3QuXG4gIF8ucHJvdG90eXBlLnZhbHVlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX3dyYXBwZWQ7XG4gIH07XG5cbiAgLy8gUHJvdmlkZSB1bndyYXBwaW5nIHByb3h5IGZvciBzb21lIG1ldGhvZHMgdXNlZCBpbiBlbmdpbmUgb3BlcmF0aW9uc1xuICAvLyBzdWNoIGFzIGFyaXRobWV0aWMgYW5kIEpTT04gc3RyaW5naWZpY2F0aW9uLlxuICBfLnByb3RvdHlwZS52YWx1ZU9mID0gXy5wcm90b3R5cGUudG9KU09OID0gXy5wcm90b3R5cGUudmFsdWU7XG5cbiAgXy5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gU3RyaW5nKHRoaXMuX3dyYXBwZWQpO1xuICB9O1xuXG4gIC8vIEFNRCByZWdpc3RyYXRpb24gaGFwcGVucyBhdCB0aGUgZW5kIGZvciBjb21wYXRpYmlsaXR5IHdpdGggQU1EIGxvYWRlcnNcbiAgLy8gdGhhdCBtYXkgbm90IGVuZm9yY2UgbmV4dC10dXJuIHNlbWFudGljcyBvbiBtb2R1bGVzLiBFdmVuIHRob3VnaCBnZW5lcmFsXG4gIC8vIHByYWN0aWNlIGZvciBBTUQgcmVnaXN0cmF0aW9uIGlzIHRvIGJlIGFub255bW91cywgdW5kZXJzY29yZSByZWdpc3RlcnNcbiAgLy8gYXMgYSBuYW1lZCBtb2R1bGUgYmVjYXVzZSwgbGlrZSBqUXVlcnksIGl0IGlzIGEgYmFzZSBsaWJyYXJ5IHRoYXQgaXNcbiAgLy8gcG9wdWxhciBlbm91Z2ggdG8gYmUgYnVuZGxlZCBpbiBhIHRoaXJkIHBhcnR5IGxpYiwgYnV0IG5vdCBiZSBwYXJ0IG9mXG4gIC8vIGFuIEFNRCBsb2FkIHJlcXVlc3QuIFRob3NlIGNhc2VzIGNvdWxkIGdlbmVyYXRlIGFuIGVycm9yIHdoZW4gYW5cbiAgLy8gYW5vbnltb3VzIGRlZmluZSgpIGlzIGNhbGxlZCBvdXRzaWRlIG9mIGEgbG9hZGVyIHJlcXVlc3QuXG4gIGlmICh0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZSgndW5kZXJzY29yZScsIFtdLCBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBfO1xuICAgIH0pO1xuICB9XG59KCkpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0aWYgKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XG5cdFx0bW9kdWxlLnBhdGhzID0gW107XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5cbmNvbnN0IElucHV0ID0gKHsgcmVmcywgdmFsdWUgfSkgPT4ge1xuICBjb25zdCBbaW5wdXRWYWx1ZSwgc2V0SW5wdXRWYWx1ZV0gPSB1c2VTdGF0ZSh2YWx1ZSk7XG5cbiAgcmV0dXJuIChcbiAgICA8aW5wdXRcbiAgICAgIGNsYXNzTmFtZT1cImlucHV0XCJcbiAgICAgIHJlZj17cmVmc31cbiAgICAgIHZhbHVlPXtpbnB1dFZhbHVlfVxuICAgICAgb25DaGFuZ2U9e2UgPT4gc2V0SW5wdXRWYWx1ZShlLnRhcmdldC52YWx1ZSl9XG4gICAgLz5cbiAgKTtcbn07XG5leHBvcnQgZGVmYXVsdCBJbnB1dDtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuXG5jb25zdCBBZGRGb3JtID0gKHsgYWRkSXRlbSB9KSA9PiB7XG4gIGNvbnN0IFtpbnB1dFZhbHVlLCBzZXRJbnB1dFZhbHVlXSA9IHVzZVN0YXRlKFwiXCIpO1xuXG4gIGNvbnN0IGhhbmRsZVN1Ym1pdCA9IGUgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAoaW5wdXRWYWx1ZSAhPT0gXCJcIikge1xuICAgICAgYWRkSXRlbShpbnB1dFZhbHVlKTtcbiAgICAgIHNldElucHV0VmFsdWUoXCJcIik7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPGZvcm0gb25TdWJtaXQ9e2UgPT4gaGFuZGxlU3VibWl0KGUpfT5cbiAgICAgIDxpbnB1dFxuICAgICAgICBjbGFzc05hbWU9XCJpbnB1dFwiXG4gICAgICAgIHBsYWNlaG9sZGVyPVwiRW50ZXIgeW91ciB0YXNrXCJcbiAgICAgICAgb25DaGFuZ2U9e2UgPT4gc2V0SW5wdXRWYWx1ZShlLnRhcmdldC52YWx1ZSl9XG4gICAgICAgIHZhbHVlPXtpbnB1dFZhbHVlfVxuICAgICAgLz5cbiAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYnV0dG9uXCIgdHlwZT1cInN1Ym1pdFwiPlxuICAgICAgICBBZGQgSXRlbVxuICAgICAgPC9idXR0b24+XG4gICAgPC9mb3JtPlxuICApO1xufTtcbmV4cG9ydCBkZWZhdWx0IEFkZEZvcm07XG4iLCJpbXBvcnQgeyBjb21iaW5lUmVkdWNlcnMgfSBmcm9tICdyZWR1eCc7XG5pbXBvcnQgVG9Eb0l0ZW0gZnJvbSAnLi90b2RvUmVkdWNlcic7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbWJpbmVSZWR1Y2Vycyh7XG4gIFRvRG9JdGVtLFxufSk7XG4iLCJpbXBvcnQgeyBBRERfVE9ETywgRURJVF9JVEVNLCBERUxFVEVfSVRFTSwgU0VUX0VESVQgfSBmcm9tIFwiLi4vYWN0aW9uc1wiO1xuXG5jb25zdCBpbml0aWFsU3RhdGUgPSBbXG4gIHtcbiAgICB0ZXh0OiBcInNzXCJcbiAgfVxuXTtcbmNvbnN0IFRvRG9JdGVtID0gKHN0YXRlID0gaW5pdGlhbFN0YXRlLCBhY3Rpb24pID0+IHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgQUREX1RPRE86XG4gICAgICByZXR1cm4gW1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAge1xuICAgICAgICAgIHRleHQ6IGFjdGlvbi50ZXh0XG4gICAgICAgIH1cbiAgICAgIF07XG4gICAgY2FzZSBTRVRfRURJVDpcbiAgICAgIHJldHVybiBbLi4uc3RhdGVdLm1hcCgoaXRlbSwga2V5KSA9PiB7XG4gICAgICAgIGl0ZW0uaXNFZGl0ID0ga2V5ID09PSBhY3Rpb24uZWRpdEtleSA/IHRydWUgOiBmYWxzZTtcbiAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgICB9KTtcbiAgICBjYXNlIEVESVRfSVRFTTpcbiAgICAgIHJldHVybiBbLi4uc3RhdGVdLm1hcCgoaXRlbSwga2V5KSA9PiB7XG4gICAgICAgIGlmIChrZXkgPT09IGFjdGlvbi51cGRhdGVkSXRlbS5rZXkpIHtcbiAgICAgICAgICBpdGVtLnRleHQgPSBhY3Rpb24udXBkYXRlZEl0ZW0udGV4dDtcbiAgICAgICAgICBpdGVtLmlzRWRpdCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpdGVtO1xuICAgICAgfSk7XG4gICAgY2FzZSBERUxFVEVfSVRFTTpcbiAgICAgIHJldHVybiBbLi4uc3RhdGUuZmlsdGVyKChpdGVtLCBrZXkpID0+IGtleSAhPT0gYWN0aW9uLmRlbGV0ZUtleSldO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IFRvRG9JdGVtO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==